
vegheater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec1c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800ed2c  0800ed2c  0001ed2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee68  0800ee68  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee68  0800ee68  0001ee68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee70  0800ee70  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee70  0800ee70  0001ee70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee74  0800ee74  0001ee74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800ee78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  200001f4  0800f06c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd8  0800f06c  00021fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000272b9  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000543c  00000000  00000000  000474d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  0004c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  0004e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ddaf  00000000  00000000  0004ff70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224fa  00000000  00000000  0006dd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac60  00000000  00000000  00090219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ae79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bb4  00000000  00000000  0012aecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ed14 	.word	0x0800ed14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800ed14 	.word	0x0800ed14

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2iz>:
 8000910:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000914:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000918:	d215      	bcs.n	8000946 <__aeabi_d2iz+0x36>
 800091a:	d511      	bpl.n	8000940 <__aeabi_d2iz+0x30>
 800091c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000920:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000924:	d912      	bls.n	800094c <__aeabi_d2iz+0x3c>
 8000926:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800092a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000932:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000936:	fa23 f002 	lsr.w	r0, r3, r2
 800093a:	bf18      	it	ne
 800093c:	4240      	negne	r0, r0
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094a:	d105      	bne.n	8000958 <__aeabi_d2iz+0x48>
 800094c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000950:	bf08      	it	eq
 8000952:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000956:	4770      	bx	lr
 8000958:	f04f 0000 	mov.w	r0, #0
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <__aeabi_frsub>:
 8000960:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000964:	e002      	b.n	800096c <__addsf3>
 8000966:	bf00      	nop

08000968 <__aeabi_fsub>:
 8000968:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800096c <__addsf3>:
 800096c:	0042      	lsls	r2, r0, #1
 800096e:	bf1f      	itttt	ne
 8000970:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000974:	ea92 0f03 	teqne	r2, r3
 8000978:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800097c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000980:	d06a      	beq.n	8000a58 <__addsf3+0xec>
 8000982:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000986:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800098a:	bfc1      	itttt	gt
 800098c:	18d2      	addgt	r2, r2, r3
 800098e:	4041      	eorgt	r1, r0
 8000990:	4048      	eorgt	r0, r1
 8000992:	4041      	eorgt	r1, r0
 8000994:	bfb8      	it	lt
 8000996:	425b      	neglt	r3, r3
 8000998:	2b19      	cmp	r3, #25
 800099a:	bf88      	it	hi
 800099c:	4770      	bxhi	lr
 800099e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009aa:	bf18      	it	ne
 80009ac:	4240      	negne	r0, r0
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009ba:	bf18      	it	ne
 80009bc:	4249      	negne	r1, r1
 80009be:	ea92 0f03 	teq	r2, r3
 80009c2:	d03f      	beq.n	8000a44 <__addsf3+0xd8>
 80009c4:	f1a2 0201 	sub.w	r2, r2, #1
 80009c8:	fa41 fc03 	asr.w	ip, r1, r3
 80009cc:	eb10 000c 	adds.w	r0, r0, ip
 80009d0:	f1c3 0320 	rsb	r3, r3, #32
 80009d4:	fa01 f103 	lsl.w	r1, r1, r3
 80009d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009dc:	d502      	bpl.n	80009e4 <__addsf3+0x78>
 80009de:	4249      	negs	r1, r1
 80009e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009e8:	d313      	bcc.n	8000a12 <__addsf3+0xa6>
 80009ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ee:	d306      	bcc.n	80009fe <__addsf3+0x92>
 80009f0:	0840      	lsrs	r0, r0, #1
 80009f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f6:	f102 0201 	add.w	r2, r2, #1
 80009fa:	2afe      	cmp	r2, #254	; 0xfe
 80009fc:	d251      	bcs.n	8000aa2 <__addsf3+0x136>
 80009fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a06:	bf08      	it	eq
 8000a08:	f020 0001 	biceq.w	r0, r0, #1
 8000a0c:	ea40 0003 	orr.w	r0, r0, r3
 8000a10:	4770      	bx	lr
 8000a12:	0049      	lsls	r1, r1, #1
 8000a14:	eb40 0000 	adc.w	r0, r0, r0
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	bf28      	it	cs
 8000a1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a20:	d2ed      	bcs.n	80009fe <__addsf3+0x92>
 8000a22:	fab0 fc80 	clz	ip, r0
 8000a26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a32:	bfaa      	itet	ge
 8000a34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a38:	4252      	neglt	r2, r2
 8000a3a:	4318      	orrge	r0, r3
 8000a3c:	bfbc      	itt	lt
 8000a3e:	40d0      	lsrlt	r0, r2
 8000a40:	4318      	orrlt	r0, r3
 8000a42:	4770      	bx	lr
 8000a44:	f092 0f00 	teq	r2, #0
 8000a48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a4c:	bf06      	itte	eq
 8000a4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a52:	3201      	addeq	r2, #1
 8000a54:	3b01      	subne	r3, #1
 8000a56:	e7b5      	b.n	80009c4 <__addsf3+0x58>
 8000a58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a66:	d021      	beq.n	8000aac <__addsf3+0x140>
 8000a68:	ea92 0f03 	teq	r2, r3
 8000a6c:	d004      	beq.n	8000a78 <__addsf3+0x10c>
 8000a6e:	f092 0f00 	teq	r2, #0
 8000a72:	bf08      	it	eq
 8000a74:	4608      	moveq	r0, r1
 8000a76:	4770      	bx	lr
 8000a78:	ea90 0f01 	teq	r0, r1
 8000a7c:	bf1c      	itt	ne
 8000a7e:	2000      	movne	r0, #0
 8000a80:	4770      	bxne	lr
 8000a82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a86:	d104      	bne.n	8000a92 <__addsf3+0x126>
 8000a88:	0040      	lsls	r0, r0, #1
 8000a8a:	bf28      	it	cs
 8000a8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a90:	4770      	bx	lr
 8000a92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a96:	bf3c      	itt	cc
 8000a98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a9c:	4770      	bxcc	lr
 8000a9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aaa:	4770      	bx	lr
 8000aac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ab0:	bf16      	itet	ne
 8000ab2:	4608      	movne	r0, r1
 8000ab4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ab8:	4601      	movne	r1, r0
 8000aba:	0242      	lsls	r2, r0, #9
 8000abc:	bf06      	itte	eq
 8000abe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ac2:	ea90 0f01 	teqeq	r0, r1
 8000ac6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aca:	4770      	bx	lr

08000acc <__aeabi_ui2f>:
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	e004      	b.n	8000adc <__aeabi_i2f+0x8>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_i2f>:
 8000ad4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	bf48      	it	mi
 8000ada:	4240      	negmi	r0, r0
 8000adc:	ea5f 0c00 	movs.w	ip, r0
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ae8:	4601      	mov	r1, r0
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	e01c      	b.n	8000b2a <__aeabi_l2f+0x2a>

08000af0 <__aeabi_ul2f>:
 8000af0:	ea50 0201 	orrs.w	r2, r0, r1
 8000af4:	bf08      	it	eq
 8000af6:	4770      	bxeq	lr
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e00a      	b.n	8000b14 <__aeabi_l2f+0x14>
 8000afe:	bf00      	nop

08000b00 <__aeabi_l2f>:
 8000b00:	ea50 0201 	orrs.w	r2, r0, r1
 8000b04:	bf08      	it	eq
 8000b06:	4770      	bxeq	lr
 8000b08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__aeabi_l2f+0x14>
 8000b0e:	4240      	negs	r0, r0
 8000b10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b14:	ea5f 0c01 	movs.w	ip, r1
 8000b18:	bf02      	ittt	eq
 8000b1a:	4684      	moveq	ip, r0
 8000b1c:	4601      	moveq	r1, r0
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b24:	bf08      	it	eq
 8000b26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b2e:	fabc f28c 	clz	r2, ip
 8000b32:	3a08      	subs	r2, #8
 8000b34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b38:	db10      	blt.n	8000b5c <__aeabi_l2f+0x5c>
 8000b3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3e:	4463      	add	r3, ip
 8000b40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b44:	f1c2 0220 	rsb	r2, r2, #32
 8000b48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b50:	eb43 0002 	adc.w	r0, r3, r2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f102 0220 	add.w	r2, r2, #32
 8000b60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b64:	f1c2 0220 	rsb	r2, r2, #32
 8000b68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b70:	eb43 0002 	adc.w	r0, r3, r2
 8000b74:	bf08      	it	eq
 8000b76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_fmul>:
 8000b7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b84:	bf1e      	ittt	ne
 8000b86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b8a:	ea92 0f0c 	teqne	r2, ip
 8000b8e:	ea93 0f0c 	teqne	r3, ip
 8000b92:	d06f      	beq.n	8000c74 <__aeabi_fmul+0xf8>
 8000b94:	441a      	add	r2, r3
 8000b96:	ea80 0c01 	eor.w	ip, r0, r1
 8000b9a:	0240      	lsls	r0, r0, #9
 8000b9c:	bf18      	it	ne
 8000b9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ba2:	d01e      	beq.n	8000be2 <__aeabi_fmul+0x66>
 8000ba4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ba8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bb0:	fba0 3101 	umull	r3, r1, r0, r1
 8000bb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bb8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bbc:	bf3e      	ittt	cc
 8000bbe:	0049      	lslcc	r1, r1, #1
 8000bc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bc4:	005b      	lslcc	r3, r3, #1
 8000bc6:	ea40 0001 	orr.w	r0, r0, r1
 8000bca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bce:	2afd      	cmp	r2, #253	; 0xfd
 8000bd0:	d81d      	bhi.n	8000c0e <__aeabi_fmul+0x92>
 8000bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	4770      	bx	lr
 8000be2:	f090 0f00 	teq	r0, #0
 8000be6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bea:	bf08      	it	eq
 8000bec:	0249      	lsleq	r1, r1, #9
 8000bee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bf2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bf6:	3a7f      	subs	r2, #127	; 0x7f
 8000bf8:	bfc2      	ittt	gt
 8000bfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c02:	4770      	bxgt	lr
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	3a01      	subs	r2, #1
 8000c0e:	dc5d      	bgt.n	8000ccc <__aeabi_fmul+0x150>
 8000c10:	f112 0f19 	cmn.w	r2, #25
 8000c14:	bfdc      	itt	le
 8000c16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c1a:	4770      	bxle	lr
 8000c1c:	f1c2 0200 	rsb	r2, r2, #0
 8000c20:	0041      	lsls	r1, r0, #1
 8000c22:	fa21 f102 	lsr.w	r1, r1, r2
 8000c26:	f1c2 0220 	rsb	r2, r2, #32
 8000c2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c32:	f140 0000 	adc.w	r0, r0, #0
 8000c36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c3a:	bf08      	it	eq
 8000c3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c40:	4770      	bx	lr
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c4a:	bf02      	ittt	eq
 8000c4c:	0040      	lsleq	r0, r0, #1
 8000c4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c52:	3a01      	subeq	r2, #1
 8000c54:	d0f9      	beq.n	8000c4a <__aeabi_fmul+0xce>
 8000c56:	ea40 000c 	orr.w	r0, r0, ip
 8000c5a:	f093 0f00 	teq	r3, #0
 8000c5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	bf02      	ittt	eq
 8000c64:	0049      	lsleq	r1, r1, #1
 8000c66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c6a:	3b01      	subeq	r3, #1
 8000c6c:	d0f9      	beq.n	8000c62 <__aeabi_fmul+0xe6>
 8000c6e:	ea41 010c 	orr.w	r1, r1, ip
 8000c72:	e78f      	b.n	8000b94 <__aeabi_fmul+0x18>
 8000c74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c78:	ea92 0f0c 	teq	r2, ip
 8000c7c:	bf18      	it	ne
 8000c7e:	ea93 0f0c 	teqne	r3, ip
 8000c82:	d00a      	beq.n	8000c9a <__aeabi_fmul+0x11e>
 8000c84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c88:	bf18      	it	ne
 8000c8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	d1d8      	bne.n	8000c42 <__aeabi_fmul+0xc6>
 8000c90:	ea80 0001 	eor.w	r0, r0, r1
 8000c94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f090 0f00 	teq	r0, #0
 8000c9e:	bf17      	itett	ne
 8000ca0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	f091 0f00 	teqne	r1, #0
 8000caa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cae:	d014      	beq.n	8000cda <__aeabi_fmul+0x15e>
 8000cb0:	ea92 0f0c 	teq	r2, ip
 8000cb4:	d101      	bne.n	8000cba <__aeabi_fmul+0x13e>
 8000cb6:	0242      	lsls	r2, r0, #9
 8000cb8:	d10f      	bne.n	8000cda <__aeabi_fmul+0x15e>
 8000cba:	ea93 0f0c 	teq	r3, ip
 8000cbe:	d103      	bne.n	8000cc8 <__aeabi_fmul+0x14c>
 8000cc0:	024b      	lsls	r3, r1, #9
 8000cc2:	bf18      	it	ne
 8000cc4:	4608      	movne	r0, r1
 8000cc6:	d108      	bne.n	8000cda <__aeabi_fmul+0x15e>
 8000cc8:	ea80 0001 	eor.w	r0, r0, r1
 8000ccc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bx	lr
 8000cda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cde:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fdiv>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d069      	beq.n	8000dd0 <__aeabi_fdiv+0xec>
 8000cfc:	eba2 0203 	sub.w	r2, r2, r3
 8000d00:	ea80 0c01 	eor.w	ip, r0, r1
 8000d04:	0249      	lsls	r1, r1, #9
 8000d06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d0a:	d037      	beq.n	8000d7c <__aeabi_fdiv+0x98>
 8000d0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	bf38      	it	cc
 8000d20:	005b      	lslcc	r3, r3, #1
 8000d22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	bf24      	itt	cs
 8000d2e:	1a5b      	subcs	r3, r3, r1
 8000d30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d38:	bf24      	itt	cs
 8000d3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d46:	bf24      	itt	cs
 8000d48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d54:	bf24      	itt	cs
 8000d56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d66:	d1e0      	bne.n	8000d2a <__aeabi_fdiv+0x46>
 8000d68:	2afd      	cmp	r2, #253	; 0xfd
 8000d6a:	f63f af50 	bhi.w	8000c0e <__aeabi_fmul+0x92>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d74:	bf08      	it	eq
 8000d76:	f020 0001 	biceq.w	r0, r0, #1
 8000d7a:	4770      	bx	lr
 8000d7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d84:	327f      	adds	r2, #127	; 0x7f
 8000d86:	bfc2      	ittt	gt
 8000d88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d90:	4770      	bxgt	lr
 8000d92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	3a01      	subs	r2, #1
 8000d9c:	e737      	b.n	8000c0e <__aeabi_fmul+0x92>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0040      	lsleq	r0, r0, #1
 8000daa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dae:	3a01      	subeq	r2, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fdiv+0xc2>
 8000db2:	ea40 000c 	orr.w	r0, r0, ip
 8000db6:	f093 0f00 	teq	r3, #0
 8000dba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dbe:	bf02      	ittt	eq
 8000dc0:	0049      	lsleq	r1, r1, #1
 8000dc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc6:	3b01      	subeq	r3, #1
 8000dc8:	d0f9      	beq.n	8000dbe <__aeabi_fdiv+0xda>
 8000dca:	ea41 010c 	orr.w	r1, r1, ip
 8000dce:	e795      	b.n	8000cfc <__aeabi_fdiv+0x18>
 8000dd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	d108      	bne.n	8000dec <__aeabi_fdiv+0x108>
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	f47f af7d 	bne.w	8000cda <__aeabi_fmul+0x15e>
 8000de0:	ea93 0f0c 	teq	r3, ip
 8000de4:	f47f af70 	bne.w	8000cc8 <__aeabi_fmul+0x14c>
 8000de8:	4608      	mov	r0, r1
 8000dea:	e776      	b.n	8000cda <__aeabi_fmul+0x15e>
 8000dec:	ea93 0f0c 	teq	r3, ip
 8000df0:	d104      	bne.n	8000dfc <__aeabi_fdiv+0x118>
 8000df2:	024b      	lsls	r3, r1, #9
 8000df4:	f43f af4c 	beq.w	8000c90 <__aeabi_fmul+0x114>
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e76e      	b.n	8000cda <__aeabi_fmul+0x15e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1ca      	bne.n	8000d9e <__aeabi_fdiv+0xba>
 8000e08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e0c:	f47f af5c 	bne.w	8000cc8 <__aeabi_fmul+0x14c>
 8000e10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e14:	f47f af3c 	bne.w	8000c90 <__aeabi_fmul+0x114>
 8000e18:	e75f      	b.n	8000cda <__aeabi_fmul+0x15e>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_f2iz>:
 8000e1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e24:	d30f      	bcc.n	8000e46 <__aeabi_f2iz+0x2a>
 8000e26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e2e:	d90d      	bls.n	8000e4c <__aeabi_f2iz+0x30>
 8000e30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e40:	bf18      	it	ne
 8000e42:	4240      	negne	r0, r0
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr
 8000e4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e50:	d101      	bne.n	8000e56 <__aeabi_f2iz+0x3a>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d105      	bne.n	8000e62 <__aeabi_f2iz+0x46>
 8000e56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	bf08      	it	eq
 8000e5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_ldivmod>:
 8000e68:	b97b      	cbnz	r3, 8000e8a <__aeabi_ldivmod+0x22>
 8000e6a:	b972      	cbnz	r2, 8000e8a <__aeabi_ldivmod+0x22>
 8000e6c:	2900      	cmp	r1, #0
 8000e6e:	bfbe      	ittt	lt
 8000e70:	2000      	movlt	r0, #0
 8000e72:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e76:	e006      	blt.n	8000e86 <__aeabi_ldivmod+0x1e>
 8000e78:	bf08      	it	eq
 8000e7a:	2800      	cmpeq	r0, #0
 8000e7c:	bf1c      	itt	ne
 8000e7e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e82:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e86:	f000 b9a1 	b.w	80011cc <__aeabi_idiv0>
 8000e8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e92:	2900      	cmp	r1, #0
 8000e94:	db09      	blt.n	8000eaa <__aeabi_ldivmod+0x42>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db1a      	blt.n	8000ed0 <__aeabi_ldivmod+0x68>
 8000e9a:	f000 f835 	bl	8000f08 <__udivmoddi4>
 8000e9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea6:	b004      	add	sp, #16
 8000ea8:	4770      	bx	lr
 8000eaa:	4240      	negs	r0, r0
 8000eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db1b      	blt.n	8000eec <__aeabi_ldivmod+0x84>
 8000eb4:	f000 f828 	bl	8000f08 <__udivmoddi4>
 8000eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4240      	negs	r0, r0
 8000ec4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec8:	4252      	negs	r2, r2
 8000eca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ece:	4770      	bx	lr
 8000ed0:	4252      	negs	r2, r2
 8000ed2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed6:	f000 f817 	bl	8000f08 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4240      	negs	r0, r0
 8000ee6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eea:	4770      	bx	lr
 8000eec:	4252      	negs	r2, r2
 8000eee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ef2:	f000 f809 	bl	8000f08 <__udivmoddi4>
 8000ef6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efe:	b004      	add	sp, #16
 8000f00:	4252      	negs	r2, r2
 8000f02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f06:	4770      	bx	lr

08000f08 <__udivmoddi4>:
 8000f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f0c:	9e08      	ldr	r6, [sp, #32]
 8000f0e:	460d      	mov	r5, r1
 8000f10:	4604      	mov	r4, r0
 8000f12:	468e      	mov	lr, r1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 8083 	bne.w	8001020 <__udivmoddi4+0x118>
 8000f1a:	428a      	cmp	r2, r1
 8000f1c:	4617      	mov	r7, r2
 8000f1e:	d947      	bls.n	8000fb0 <__udivmoddi4+0xa8>
 8000f20:	fab2 f382 	clz	r3, r2
 8000f24:	b14b      	cbz	r3, 8000f3a <__udivmoddi4+0x32>
 8000f26:	f1c3 0120 	rsb	r1, r3, #32
 8000f2a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000f2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000f32:	409f      	lsls	r7, r3
 8000f34:	ea41 0e0e 	orr.w	lr, r1, lr
 8000f38:	409c      	lsls	r4, r3
 8000f3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f3e:	fbbe fcf8 	udiv	ip, lr, r8
 8000f42:	fa1f f987 	uxth.w	r9, r7
 8000f46:	fb08 e21c 	mls	r2, r8, ip, lr
 8000f4a:	fb0c f009 	mul.w	r0, ip, r9
 8000f4e:	0c21      	lsrs	r1, r4, #16
 8000f50:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000f54:	4290      	cmp	r0, r2
 8000f56:	d90a      	bls.n	8000f6e <__udivmoddi4+0x66>
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000f5e:	f080 8118 	bcs.w	8001192 <__udivmoddi4+0x28a>
 8000f62:	4290      	cmp	r0, r2
 8000f64:	f240 8115 	bls.w	8001192 <__udivmoddi4+0x28a>
 8000f68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f6c:	443a      	add	r2, r7
 8000f6e:	1a12      	subs	r2, r2, r0
 8000f70:	fbb2 f0f8 	udiv	r0, r2, r8
 8000f74:	fb08 2210 	mls	r2, r8, r0, r2
 8000f78:	fb00 f109 	mul.w	r1, r0, r9
 8000f7c:	b2a4      	uxth	r4, r4
 8000f7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f82:	42a1      	cmp	r1, r4
 8000f84:	d909      	bls.n	8000f9a <__udivmoddi4+0x92>
 8000f86:	193c      	adds	r4, r7, r4
 8000f88:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000f8c:	f080 8103 	bcs.w	8001196 <__udivmoddi4+0x28e>
 8000f90:	42a1      	cmp	r1, r4
 8000f92:	f240 8100 	bls.w	8001196 <__udivmoddi4+0x28e>
 8000f96:	3802      	subs	r0, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	1a64      	subs	r4, r4, r1
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000fa2:	b11e      	cbz	r6, 8000fac <__udivmoddi4+0xa4>
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	40dc      	lsrs	r4, r3
 8000fa8:	e9c6 4200 	strd	r4, r2, [r6]
 8000fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb0:	b902      	cbnz	r2, 8000fb4 <__udivmoddi4+0xac>
 8000fb2:	deff      	udf	#255	; 0xff
 8000fb4:	fab2 f382 	clz	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d14f      	bne.n	800105c <__udivmoddi4+0x154>
 8000fbc:	1a8d      	subs	r5, r1, r2
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000fc4:	fa1f f882 	uxth.w	r8, r2
 8000fc8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000fcc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000fd0:	fb08 f00c 	mul.w	r0, r8, ip
 8000fd4:	0c22      	lsrs	r2, r4, #16
 8000fd6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000fda:	42a8      	cmp	r0, r5
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0xe6>
 8000fde:	197d      	adds	r5, r7, r5
 8000fe0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000fe4:	d202      	bcs.n	8000fec <__udivmoddi4+0xe4>
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	f200 80e9 	bhi.w	80011be <__udivmoddi4+0x2b6>
 8000fec:	4694      	mov	ip, r2
 8000fee:	1a2d      	subs	r5, r5, r0
 8000ff0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ff4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ff8:	fb08 f800 	mul.w	r8, r8, r0
 8000ffc:	b2a4      	uxth	r4, r4
 8000ffe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001002:	45a0      	cmp	r8, r4
 8001004:	d907      	bls.n	8001016 <__udivmoddi4+0x10e>
 8001006:	193c      	adds	r4, r7, r4
 8001008:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800100c:	d202      	bcs.n	8001014 <__udivmoddi4+0x10c>
 800100e:	45a0      	cmp	r8, r4
 8001010:	f200 80d9 	bhi.w	80011c6 <__udivmoddi4+0x2be>
 8001014:	4610      	mov	r0, r2
 8001016:	eba4 0408 	sub.w	r4, r4, r8
 800101a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800101e:	e7c0      	b.n	8000fa2 <__udivmoddi4+0x9a>
 8001020:	428b      	cmp	r3, r1
 8001022:	d908      	bls.n	8001036 <__udivmoddi4+0x12e>
 8001024:	2e00      	cmp	r6, #0
 8001026:	f000 80b1 	beq.w	800118c <__udivmoddi4+0x284>
 800102a:	2100      	movs	r1, #0
 800102c:	e9c6 0500 	strd	r0, r5, [r6]
 8001030:	4608      	mov	r0, r1
 8001032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001036:	fab3 f183 	clz	r1, r3
 800103a:	2900      	cmp	r1, #0
 800103c:	d14b      	bne.n	80010d6 <__udivmoddi4+0x1ce>
 800103e:	42ab      	cmp	r3, r5
 8001040:	d302      	bcc.n	8001048 <__udivmoddi4+0x140>
 8001042:	4282      	cmp	r2, r0
 8001044:	f200 80b9 	bhi.w	80011ba <__udivmoddi4+0x2b2>
 8001048:	1a84      	subs	r4, r0, r2
 800104a:	eb65 0303 	sbc.w	r3, r5, r3
 800104e:	2001      	movs	r0, #1
 8001050:	469e      	mov	lr, r3
 8001052:	2e00      	cmp	r6, #0
 8001054:	d0aa      	beq.n	8000fac <__udivmoddi4+0xa4>
 8001056:	e9c6 4e00 	strd	r4, lr, [r6]
 800105a:	e7a7      	b.n	8000fac <__udivmoddi4+0xa4>
 800105c:	409f      	lsls	r7, r3
 800105e:	f1c3 0220 	rsb	r2, r3, #32
 8001062:	40d1      	lsrs	r1, r2
 8001064:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001068:	fbb1 f0fe 	udiv	r0, r1, lr
 800106c:	fa1f f887 	uxth.w	r8, r7
 8001070:	fb0e 1110 	mls	r1, lr, r0, r1
 8001074:	fa24 f202 	lsr.w	r2, r4, r2
 8001078:	409d      	lsls	r5, r3
 800107a:	fb00 fc08 	mul.w	ip, r0, r8
 800107e:	432a      	orrs	r2, r5
 8001080:	0c15      	lsrs	r5, r2, #16
 8001082:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001086:	45ac      	cmp	ip, r5
 8001088:	fa04 f403 	lsl.w	r4, r4, r3
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0x19a>
 800108e:	197d      	adds	r5, r7, r5
 8001090:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001094:	f080 808f 	bcs.w	80011b6 <__udivmoddi4+0x2ae>
 8001098:	45ac      	cmp	ip, r5
 800109a:	f240 808c 	bls.w	80011b6 <__udivmoddi4+0x2ae>
 800109e:	3802      	subs	r0, #2
 80010a0:	443d      	add	r5, r7
 80010a2:	eba5 050c 	sub.w	r5, r5, ip
 80010a6:	fbb5 f1fe 	udiv	r1, r5, lr
 80010aa:	fb0e 5c11 	mls	ip, lr, r1, r5
 80010ae:	fb01 f908 	mul.w	r9, r1, r8
 80010b2:	b295      	uxth	r5, r2
 80010b4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80010b8:	45a9      	cmp	r9, r5
 80010ba:	d907      	bls.n	80010cc <__udivmoddi4+0x1c4>
 80010bc:	197d      	adds	r5, r7, r5
 80010be:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80010c2:	d274      	bcs.n	80011ae <__udivmoddi4+0x2a6>
 80010c4:	45a9      	cmp	r9, r5
 80010c6:	d972      	bls.n	80011ae <__udivmoddi4+0x2a6>
 80010c8:	3902      	subs	r1, #2
 80010ca:	443d      	add	r5, r7
 80010cc:	eba5 0509 	sub.w	r5, r5, r9
 80010d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010d4:	e778      	b.n	8000fc8 <__udivmoddi4+0xc0>
 80010d6:	f1c1 0720 	rsb	r7, r1, #32
 80010da:	408b      	lsls	r3, r1
 80010dc:	fa22 fc07 	lsr.w	ip, r2, r7
 80010e0:	ea4c 0c03 	orr.w	ip, ip, r3
 80010e4:	fa25 f407 	lsr.w	r4, r5, r7
 80010e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010ec:	fbb4 f9fe 	udiv	r9, r4, lr
 80010f0:	fa1f f88c 	uxth.w	r8, ip
 80010f4:	fb0e 4419 	mls	r4, lr, r9, r4
 80010f8:	fa20 f307 	lsr.w	r3, r0, r7
 80010fc:	fb09 fa08 	mul.w	sl, r9, r8
 8001100:	408d      	lsls	r5, r1
 8001102:	431d      	orrs	r5, r3
 8001104:	0c2b      	lsrs	r3, r5, #16
 8001106:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800110a:	45a2      	cmp	sl, r4
 800110c:	fa02 f201 	lsl.w	r2, r2, r1
 8001110:	fa00 f301 	lsl.w	r3, r0, r1
 8001114:	d909      	bls.n	800112a <__udivmoddi4+0x222>
 8001116:	eb1c 0404 	adds.w	r4, ip, r4
 800111a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800111e:	d248      	bcs.n	80011b2 <__udivmoddi4+0x2aa>
 8001120:	45a2      	cmp	sl, r4
 8001122:	d946      	bls.n	80011b2 <__udivmoddi4+0x2aa>
 8001124:	f1a9 0902 	sub.w	r9, r9, #2
 8001128:	4464      	add	r4, ip
 800112a:	eba4 040a 	sub.w	r4, r4, sl
 800112e:	fbb4 f0fe 	udiv	r0, r4, lr
 8001132:	fb0e 4410 	mls	r4, lr, r0, r4
 8001136:	fb00 fa08 	mul.w	sl, r0, r8
 800113a:	b2ad      	uxth	r5, r5
 800113c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001140:	45a2      	cmp	sl, r4
 8001142:	d908      	bls.n	8001156 <__udivmoddi4+0x24e>
 8001144:	eb1c 0404 	adds.w	r4, ip, r4
 8001148:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800114c:	d22d      	bcs.n	80011aa <__udivmoddi4+0x2a2>
 800114e:	45a2      	cmp	sl, r4
 8001150:	d92b      	bls.n	80011aa <__udivmoddi4+0x2a2>
 8001152:	3802      	subs	r0, #2
 8001154:	4464      	add	r4, ip
 8001156:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800115a:	fba0 8902 	umull	r8, r9, r0, r2
 800115e:	eba4 040a 	sub.w	r4, r4, sl
 8001162:	454c      	cmp	r4, r9
 8001164:	46c6      	mov	lr, r8
 8001166:	464d      	mov	r5, r9
 8001168:	d319      	bcc.n	800119e <__udivmoddi4+0x296>
 800116a:	d016      	beq.n	800119a <__udivmoddi4+0x292>
 800116c:	b15e      	cbz	r6, 8001186 <__udivmoddi4+0x27e>
 800116e:	ebb3 020e 	subs.w	r2, r3, lr
 8001172:	eb64 0405 	sbc.w	r4, r4, r5
 8001176:	fa04 f707 	lsl.w	r7, r4, r7
 800117a:	fa22 f301 	lsr.w	r3, r2, r1
 800117e:	431f      	orrs	r7, r3
 8001180:	40cc      	lsrs	r4, r1
 8001182:	e9c6 7400 	strd	r7, r4, [r6]
 8001186:	2100      	movs	r1, #0
 8001188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118c:	4631      	mov	r1, r6
 800118e:	4630      	mov	r0, r6
 8001190:	e70c      	b.n	8000fac <__udivmoddi4+0xa4>
 8001192:	468c      	mov	ip, r1
 8001194:	e6eb      	b.n	8000f6e <__udivmoddi4+0x66>
 8001196:	4610      	mov	r0, r2
 8001198:	e6ff      	b.n	8000f9a <__udivmoddi4+0x92>
 800119a:	4543      	cmp	r3, r8
 800119c:	d2e6      	bcs.n	800116c <__udivmoddi4+0x264>
 800119e:	ebb8 0e02 	subs.w	lr, r8, r2
 80011a2:	eb69 050c 	sbc.w	r5, r9, ip
 80011a6:	3801      	subs	r0, #1
 80011a8:	e7e0      	b.n	800116c <__udivmoddi4+0x264>
 80011aa:	4628      	mov	r0, r5
 80011ac:	e7d3      	b.n	8001156 <__udivmoddi4+0x24e>
 80011ae:	4611      	mov	r1, r2
 80011b0:	e78c      	b.n	80010cc <__udivmoddi4+0x1c4>
 80011b2:	4681      	mov	r9, r0
 80011b4:	e7b9      	b.n	800112a <__udivmoddi4+0x222>
 80011b6:	4608      	mov	r0, r1
 80011b8:	e773      	b.n	80010a2 <__udivmoddi4+0x19a>
 80011ba:	4608      	mov	r0, r1
 80011bc:	e749      	b.n	8001052 <__udivmoddi4+0x14a>
 80011be:	f1ac 0c02 	sub.w	ip, ip, #2
 80011c2:	443d      	add	r5, r7
 80011c4:	e713      	b.n	8000fee <__udivmoddi4+0xe6>
 80011c6:	3802      	subs	r0, #2
 80011c8:	443c      	add	r4, r7
 80011ca:	e724      	b.n	8001016 <__udivmoddi4+0x10e>

080011cc <__aeabi_idiv0>:
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	3301      	adds	r3, #1
 80011e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011e6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d007      	beq.n	8001202 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	79f9      	ldrb	r1, [r7, #7]
 80011fa:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d013      	beq.n	8001256 <Uart_isr+0x4a>
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <Uart_isr+0xac>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffbe 	bl	80011d0 <store_char>
        return;
 8001254:	e02c      	b.n	80012b0 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125c:	2b00      	cmp	r3, #0
 800125e:	d027      	beq.n	80012b0 <Uart_isr+0xa4>
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	2b00      	cmp	r3, #0
 8001268:	d022      	beq.n	80012b0 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <Uart_isr+0xb0>)
 800126c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <Uart_isr+0xb0>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	429a      	cmp	r2, r3
 8001274:	d108      	bne.n	8001288 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001284:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001286:	e012      	b.n	80012ae <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <Uart_isr+0xb0>)
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <Uart_isr+0xb0>)
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <Uart_isr+0xb0>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	3301      	adds	r3, #1
 8001298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <Uart_isr+0xb0>)
 800129e:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	7bba      	ldrb	r2, [r7, #14]
 80012ac:	605a      	str	r2, [r3, #4]
    	return;
 80012ae:	bf00      	nop
    }
}
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200008b8 	.word	0x200008b8
 80012bc:	20000210 	.word	0x20000210

080012c0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2203      	movs	r2, #3
 80012cc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2203      	movs	r2, #3
 80012d8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	715a      	strb	r2, [r3, #5]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b08a      	sub	sp, #40	; 0x28
 80012fa:	af04      	add	r7, sp, #16
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	460b      	mov	r3, r1
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8af9      	ldrh	r1, [r7, #22]
 8001316:	f241 3388 	movw	r3, #5000	; 0x1388
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	2302      	movs	r3, #2
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	f003 ffac 	bl	8005284 <HAL_I2C_Mem_Read>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10b      	bne.n	800134a <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001332:	7d7b      	ldrb	r3, [r7, #21]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	7d3b      	ldrb	r3, [r7, #20]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	801a      	strh	r2, [r3, #0]
		return true;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <read_register16+0x56>
	} else
		return false;
 800134a:	2300      	movs	r3, #0

}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af04      	add	r7, sp, #16
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	461a      	mov	r2, r3
 8001360:	460b      	mov	r3, r1
 8001362:	72fb      	strb	r3, [r7, #11]
 8001364:	4613      	mov	r3, r2
 8001366:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001374:	7afb      	ldrb	r3, [r7, #11]
 8001376:	b29a      	uxth	r2, r3
 8001378:	7abb      	ldrb	r3, [r7, #10]
 800137a:	b29b      	uxth	r3, r3
 800137c:	8af9      	ldrh	r1, [r7, #22]
 800137e:	f241 3488 	movw	r4, #5000	; 0x1388
 8001382:	9402      	str	r4, [sp, #8]
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	f003 ff7a 	bl	8005284 <HAL_I2C_Mem_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <read_data+0x46>
		return 0;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <read_data+0x48>
	else
		return 1;
 800139a:	2301      	movs	r3, #1

}
 800139c:	4618      	mov	r0, r3
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd90      	pop	{r4, r7, pc}

080013a4 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	461a      	mov	r2, r3
 80013b0:	2188      	movs	r1, #136	; 0x88
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff9f 	bl	80012f6 <read_register16>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d06f      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3302      	adds	r3, #2
 80013c2:	461a      	mov	r2, r3
 80013c4:	218a      	movs	r1, #138	; 0x8a
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff95 	bl	80012f6 <read_register16>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d065      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	461a      	mov	r2, r3
 80013d8:	218c      	movs	r1, #140	; 0x8c
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff8b 	bl	80012f6 <read_register16>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d05b      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3306      	adds	r3, #6
 80013ea:	461a      	mov	r2, r3
 80013ec:	218e      	movs	r1, #142	; 0x8e
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff81 	bl	80012f6 <read_register16>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d051      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3308      	adds	r3, #8
 80013fe:	461a      	mov	r2, r3
 8001400:	2190      	movs	r1, #144	; 0x90
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff77 	bl	80012f6 <read_register16>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d047      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	330a      	adds	r3, #10
 8001412:	461a      	mov	r2, r3
 8001414:	2192      	movs	r1, #146	; 0x92
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff6d 	bl	80012f6 <read_register16>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d03d      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	330c      	adds	r3, #12
 8001426:	461a      	mov	r2, r3
 8001428:	2194      	movs	r1, #148	; 0x94
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff63 	bl	80012f6 <read_register16>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d033      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	330e      	adds	r3, #14
 800143a:	461a      	mov	r2, r3
 800143c:	2196      	movs	r1, #150	; 0x96
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff59 	bl	80012f6 <read_register16>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d029      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3310      	adds	r3, #16
 800144e:	461a      	mov	r2, r3
 8001450:	2198      	movs	r1, #152	; 0x98
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff4f 	bl	80012f6 <read_register16>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d01f      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3312      	adds	r3, #18
 8001462:	461a      	mov	r2, r3
 8001464:	219a      	movs	r1, #154	; 0x9a
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff45 	bl	80012f6 <read_register16>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3314      	adds	r3, #20
 8001476:	461a      	mov	r2, r3
 8001478:	219c      	movs	r1, #156	; 0x9c
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff3b 	bl	80012f6 <read_register16>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800148a:	461a      	mov	r2, r3
 800148c:	219e      	movs	r1, #158	; 0x9e
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff31 	bl	80012f6 <read_register16>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <read_calibration_data+0xfa>

		return true;
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <read_calibration_data+0xfc>
	}

	return false;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f103 0218 	add.w	r2, r3, #24
 80014b6:	2301      	movs	r3, #1
 80014b8:	21a1      	movs	r1, #161	; 0xa1
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff4a 	bl	8001354 <read_data>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d14b      	bne.n	800155e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	331a      	adds	r3, #26
 80014ca:	461a      	mov	r2, r3
 80014cc:	21e1      	movs	r1, #225	; 0xe1
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ff11 	bl	80012f6 <read_register16>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d041      	beq.n	800155e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f103 021c 	add.w	r2, r3, #28
 80014e0:	2301      	movs	r3, #1
 80014e2:	21e3      	movs	r1, #227	; 0xe3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff35 	bl	8001354 <read_data>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d136      	bne.n	800155e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80014f0:	f107 030e 	add.w	r3, r7, #14
 80014f4:	461a      	mov	r2, r3
 80014f6:	21e4      	movs	r1, #228	; 0xe4
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fefc 	bl	80012f6 <read_register16>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d02c      	beq.n	800155e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	461a      	mov	r2, r3
 800150a:	21e5      	movs	r1, #229	; 0xe5
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fef2 	bl	80012f6 <read_register16>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d022      	beq.n	800155e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800151e:	2301      	movs	r3, #1
 8001520:	21e7      	movs	r1, #231	; 0xe7
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff16 	bl	8001354 <read_data>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d117      	bne.n	800155e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	b21b      	sxth	r3, r3
 8001534:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001538:	b21a      	sxth	r2, r3
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	121b      	asrs	r3, r3, #8
 800153e:	b21b      	sxth	r3, r3
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800154e:	89bb      	ldrh	r3, [r7, #12]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	b29b      	uxth	r3, r3
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	841a      	strh	r2, [r3, #32]

		return true;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <read_hum_calibration_data+0xb8>
	}

	return false;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af04      	add	r7, sp, #16
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
 8001574:	4613      	mov	r3, r2
 8001576:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	b29a      	uxth	r2, r3
 8001588:	89f9      	ldrh	r1, [r7, #14]
 800158a:	f242 7310 	movw	r3, #10000	; 0x2710
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	2301      	movs	r3, #1
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	1cbb      	adds	r3, r7, #2
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	f003 fd79 	bl	8005090 <HAL_I2C_Mem_Write>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <write_register8+0x40>
		return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e000      	b.n	80015aa <write_register8+0x42>
	else
		return true;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015c0:	2b76      	cmp	r3, #118	; 0x76
 80015c2:	d005      	beq.n	80015d0 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015c8:	2b77      	cmp	r3, #119	; 0x77
 80015ca:	d001      	beq.n	80015d0 <bmp280_init+0x1e>

		return false;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e099      	b.n	8001704 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80015d6:	2301      	movs	r3, #1
 80015d8:	21d0      	movs	r1, #208	; 0xd0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff feba 	bl	8001354 <read_data>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <bmp280_init+0x38>
		return false;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e08c      	b.n	8001704 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015f0:	2b58      	cmp	r3, #88	; 0x58
 80015f2:	d006      	beq.n	8001602 <bmp280_init+0x50>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015fa:	2b60      	cmp	r3, #96	; 0x60
 80015fc:	d001      	beq.n	8001602 <bmp280_init+0x50>

		return false;
 80015fe:	2300      	movs	r3, #0
 8001600:	e080      	b.n	8001704 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001602:	22b6      	movs	r2, #182	; 0xb6
 8001604:	21e0      	movs	r1, #224	; 0xe0
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffae 	bl	8001568 <write_register8>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <bmp280_init+0x64>
		return false;
 8001612:	2300      	movs	r3, #0
 8001614:	e076      	b.n	8001704 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001616:	f107 020c 	add.w	r2, r7, #12
 800161a:	2301      	movs	r3, #1
 800161c:	21f3      	movs	r1, #243	; 0xf3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fe98 	bl	8001354 <read_data>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f5      	bne.n	8001616 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800162a:	7b3b      	ldrb	r3, [r7, #12]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff feb5 	bl	80013a4 <read_calibration_data>
 800163a:	4603      	mov	r3, r0
 800163c:	f083 0301 	eor.w	r3, r3, #1
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d100      	bne.n	8001648 <bmp280_init+0x96>
 8001646:	e001      	b.n	800164c <bmp280_init+0x9a>
		return false;
 8001648:	2300      	movs	r3, #0
 800164a:	e05b      	b.n	8001704 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001652:	2b60      	cmp	r3, #96	; 0x60
 8001654:	d10a      	bne.n	800166c <bmp280_init+0xba>
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff26 	bl	80014a8 <read_hum_calibration_data>
 800165c:	4603      	mov	r3, r0
 800165e:	f083 0301 	eor.w	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <bmp280_init+0xba>
		return false;
 8001668:	2300      	movs	r3, #0
 800166a:	e04b      	b.n	8001704 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	015b      	lsls	r3, r3, #5
 8001672:	b25a      	sxtb	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	785b      	ldrb	r3, [r3, #1]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	461a      	mov	r2, r3
 8001686:	21f5      	movs	r1, #245	; 0xf5
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff6d 	bl	8001568 <write_register8>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <bmp280_init+0xe6>
		return false;
 8001694:	2300      	movs	r3, #0
 8001696:	e035      	b.n	8001704 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d102      	bne.n	80016a6 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	78db      	ldrb	r3, [r3, #3]
 80016aa:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80016c4:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016cc:	2b60      	cmp	r3, #96	; 0x60
 80016ce:	d10d      	bne.n	80016ec <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	791b      	ldrb	r3, [r3, #4]
 80016d4:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80016d6:	7b7b      	ldrb	r3, [r7, #13]
 80016d8:	461a      	mov	r2, r3
 80016da:	21f2      	movs	r1, #242	; 0xf2
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff43 	bl	8001568 <write_register8>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <bmp280_init+0x13a>
			return false;
 80016e8:	2300      	movs	r3, #0
 80016ea:	e00b      	b.n	8001704 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	461a      	mov	r2, r3
 80016f0:	21f4      	movs	r1, #244	; 0xf4
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ff38 	bl	8001568 <write_register8>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <bmp280_init+0x150>
		return false;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <bmp280_init+0x152>
	}

	return true;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	10da      	asrs	r2, r3, #3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800172a:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800172e:	12db      	asrs	r3, r3, #11
 8001730:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	111b      	asrs	r3, r3, #4
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	1112      	asrs	r2, r2, #4
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	8809      	ldrh	r1, [r1, #0]
 8001744:	1a52      	subs	r2, r2, r1
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001752:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001756:	139b      	asrs	r3, r3, #14
 8001758:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	441a      	add	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3380      	adds	r3, #128	; 0x80
 8001770:	121b      	asrs	r3, r3, #8
}
 8001772:	4618      	mov	r0, r3
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b09c      	sub	sp, #112	; 0x70
 8001782:	af00      	add	r7, sp, #0
 8001784:	6578      	str	r0, [r7, #84]	; 0x54
 8001786:	6539      	str	r1, [r7, #80]	; 0x50
 8001788:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800178a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178c:	461a      	mov	r2, r3
 800178e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001792:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001796:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 800179a:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800179e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80017a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017a2:	fb03 f102 	mul.w	r1, r3, r2
 80017a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80017a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017aa:	fb03 f302 	mul.w	r3, r3, r2
 80017ae:	18ca      	adds	r2, r1, r3
 80017b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017b2:	fba3 4503 	umull	r4, r5, r3, r3
 80017b6:	1953      	adds	r3, r2, r5
 80017b8:	461d      	mov	r5, r3
 80017ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017c6:	fb02 f005 	mul.w	r0, r2, r5
 80017ca:	fb04 f103 	mul.w	r1, r4, r3
 80017ce:	4401      	add	r1, r0
 80017d0:	fba4 2302 	umull	r2, r3, r4, r2
 80017d4:	4419      	add	r1, r3
 80017d6:	460b      	mov	r3, r1
 80017d8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80017dc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80017e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80017ee:	fb03 f001 	mul.w	r0, r3, r1
 80017f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80017f4:	fb02 f101 	mul.w	r1, r2, r1
 80017f8:	4408      	add	r0, r1
 80017fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80017fc:	fba1 2302 	umull	r2, r3, r1, r2
 8001800:	18c1      	adds	r1, r0, r3
 8001802:	460b      	mov	r3, r1
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	0459      	lsls	r1, r3, #17
 800180e:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001812:	0450      	lsls	r0, r2, #17
 8001814:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001818:	eb12 0800 	adds.w	r8, r2, r0
 800181c:	eb43 0901 	adc.w	r9, r3, r1
 8001820:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001826:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800182a:	b21a      	sxth	r2, r3
 800182c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	00d1      	lsls	r1, r2, #3
 800183a:	2000      	movs	r0, #0
 800183c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001840:	1814      	adds	r4, r2, r0
 8001842:	61bc      	str	r4, [r7, #24]
 8001844:	414b      	adcs	r3, r1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800184c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001854:	fb03 f102 	mul.w	r1, r3, r2
 8001858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800185a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800185c:	fb03 f302 	mul.w	r3, r3, r2
 8001860:	18ca      	adds	r2, r1, r3
 8001862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001864:	fba3 4503 	umull	r4, r5, r3, r3
 8001868:	1953      	adds	r3, r2, r5
 800186a:	461d      	mov	r5, r3
 800186c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001872:	b21a      	sxth	r2, r3
 8001874:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001878:	fb02 f005 	mul.w	r0, r2, r5
 800187c:	fb04 f103 	mul.w	r1, r4, r3
 8001880:	4401      	add	r1, r0
 8001882:	fba4 2302 	umull	r2, r3, r4, r2
 8001886:	4419      	add	r1, r3
 8001888:	460b      	mov	r3, r1
 800188a:	f04f 0800 	mov.w	r8, #0
 800188e:	f04f 0900 	mov.w	r9, #0
 8001892:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001896:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 800189a:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80018aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80018ac:	fb03 f001 	mul.w	r0, r3, r1
 80018b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80018b2:	fb02 f101 	mul.w	r1, r2, r1
 80018b6:	1844      	adds	r4, r0, r1
 80018b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80018ba:	fba1 0102 	umull	r0, r1, r1, r2
 80018be:	1863      	adds	r3, r4, r1
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	030b      	lsls	r3, r1, #12
 80018cc:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80018d0:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80018d2:	eb18 0102 	adds.w	r1, r8, r2
 80018d6:	6139      	str	r1, [r7, #16]
 80018d8:	eb49 0303 	adc.w	r3, r9, r3
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018e2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80018e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018ea:	1c11      	adds	r1, r2, #0
 80018ec:	6439      	str	r1, [r7, #64]	; 0x40
 80018ee:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	88db      	ldrh	r3, [r3, #6]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001902:	4629      	mov	r1, r5
 8001904:	fb02 f001 	mul.w	r0, r2, r1
 8001908:	4621      	mov	r1, r4
 800190a:	fb01 f103 	mul.w	r1, r1, r3
 800190e:	4401      	add	r1, r0
 8001910:	4620      	mov	r0, r4
 8001912:	fba0 2302 	umull	r2, r3, r0, r2
 8001916:	4419      	add	r1, r3
 8001918:	460b      	mov	r3, r1
 800191a:	f04f 0000 	mov.w	r0, #0
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	1058      	asrs	r0, r3, #1
 8001924:	17d9      	asrs	r1, r3, #31
 8001926:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 800192a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800192e:	4313      	orrs	r3, r2
 8001930:	d101      	bne.n	8001936 <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8001932:	2300      	movs	r3, #0
 8001934:	e0e1      	b.n	8001afa <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8001936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001938:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800193c:	461a      	mov	r2, r3
 800193e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001942:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8001946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001948:	105b      	asrs	r3, r3, #1
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800194c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800194e:	07db      	lsls	r3, r3, #31
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
 8001952:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001956:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800195a:	4621      	mov	r1, r4
 800195c:	ebb1 0a02 	subs.w	sl, r1, r2
 8001960:	4629      	mov	r1, r5
 8001962:	eb61 0b03 	sbc.w	fp, r1, r3
 8001966:	4652      	mov	r2, sl
 8001968:	465b      	mov	r3, fp
 800196a:	1891      	adds	r1, r2, r2
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	415b      	adcs	r3, r3
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001976:	eb12 020a 	adds.w	r2, r2, sl
 800197a:	eb43 030b 	adc.w	r3, r3, fp
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0199      	lsls	r1, r3, #6
 8001988:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800198c:	0190      	lsls	r0, r2, #6
 800198e:	1812      	adds	r2, r2, r0
 8001990:	eb41 0303 	adc.w	r3, r1, r3
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	0099      	lsls	r1, r3, #2
 800199e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019a2:	0090      	lsls	r0, r2, #2
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	eb12 020a 	adds.w	r2, r2, sl
 80019ac:	eb43 030b 	adc.w	r3, r3, fp
 80019b0:	f04f 0000 	mov.w	r0, #0
 80019b4:	f04f 0100 	mov.w	r1, #0
 80019b8:	0099      	lsls	r1, r3, #2
 80019ba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80019be:	0090      	lsls	r0, r2, #2
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	eb12 010a 	adds.w	r1, r2, sl
 80019c8:	6339      	str	r1, [r7, #48]	; 0x30
 80019ca:	eb43 030b 	adc.w	r3, r3, fp
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
 80019d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80019d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019d8:	f7ff fa46 	bl	8000e68 <__aeabi_ldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80019e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80019ea:	b218      	sxth	r0, r3
 80019ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80019f0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	0b62      	lsrs	r2, r4, #13
 80019fe:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001a02:	136b      	asrs	r3, r5, #13
 8001a04:	fb02 f501 	mul.w	r5, r2, r1
 8001a08:	fb00 f403 	mul.w	r4, r0, r3
 8001a0c:	442c      	add	r4, r5
 8001a0e:	fba0 0102 	umull	r0, r1, r0, r2
 8001a12:	1863      	adds	r3, r4, r1
 8001a14:	4619      	mov	r1, r3
 8001a16:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	0b62      	lsrs	r2, r4, #13
 8001a24:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001a28:	136b      	asrs	r3, r5, #13
 8001a2a:	fb02 f501 	mul.w	r5, r2, r1
 8001a2e:	fb00 f403 	mul.w	r4, r0, r3
 8001a32:	442c      	add	r4, r5
 8001a34:	fba0 0102 	umull	r0, r1, r0, r2
 8001a38:	1863      	adds	r3, r4, r1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	0e42      	lsrs	r2, r0, #25
 8001a46:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a4a:	164b      	asrs	r3, r1, #25
 8001a4c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a5e:	fb03 f001 	mul.w	r0, r3, r1
 8001a62:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001a64:	fb02 f101 	mul.w	r1, r2, r1
 8001a68:	1844      	adds	r4, r0, r1
 8001a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001a6c:	fba1 0102 	umull	r0, r1, r1, r2
 8001a70:	1863      	adds	r3, r4, r1
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	0cc2      	lsrs	r2, r0, #19
 8001a7e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a82:	14cb      	asrs	r3, r1, #19
 8001a84:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001a88:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a90:	1884      	adds	r4, r0, r2
 8001a92:	62bc      	str	r4, [r7, #40]	; 0x28
 8001a94:	eb41 0303 	adc.w	r3, r1, r3
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a9a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a9e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	1889      	adds	r1, r1, r2
 8001aa6:	6239      	str	r1, [r7, #32]
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	eb43 0101 	adc.w	r1, r3, r1
 8001aae:	6279      	str	r1, [r7, #36]	; 0x24
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001abc:	4623      	mov	r3, r4
 8001abe:	0a18      	lsrs	r0, r3, #8
 8001ac0:	462b      	mov	r3, r5
 8001ac2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	1219      	asrs	r1, r3, #8
 8001aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001acc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ad0:	b21c      	sxth	r4, r3
 8001ad2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	012b      	lsls	r3, r5, #4
 8001ae0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ae4:	0122      	lsls	r2, r4, #4
 8001ae6:	1884      	adds	r4, r0, r2
 8001ae8:	603c      	str	r4, [r7, #0]
 8001aea:	eb41 0303 	adc.w	r3, r1, r3
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001af4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8001af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3770      	adds	r7, #112	; 0x70
 8001afe:	46bd      	mov	sp, r7
 8001b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b04 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b16:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	039a      	lsls	r2, r3, #14
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b22:	051b      	lsls	r3, r3, #20
 8001b24:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fb03 f301 	mul.w	r3, r3, r1
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b3a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001b42:	4611      	mov	r1, r2
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	fb02 f201 	mul.w	r2, r2, r1
 8001b4a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	7f09      	ldrb	r1, [r1, #28]
 8001b50:	4608      	mov	r0, r1
 8001b52:	6979      	ldr	r1, [r7, #20]
 8001b54:	fb01 f100 	mul.w	r1, r1, r0
 8001b58:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b5a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b5e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b62:	1292      	asrs	r2, r2, #10
 8001b64:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001b6e:	fb01 f202 	mul.w	r2, r1, r2
 8001b72:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b76:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b78:	fb02 f303 	mul.w	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	13db      	asrs	r3, r3, #15
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	13d2      	asrs	r2, r2, #15
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	7e12      	ldrb	r2, [r2, #24]
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ba2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001baa:	bfa8      	it	ge
 8001bac:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bb0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	131b      	asrs	r3, r3, #12
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001bd4:	2b60      	cmp	r3, #96	; 0x60
 8001bd6:	d007      	beq.n	8001be8 <bmp280_read_fixed+0x28>
		if (humidity)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <bmp280_read_fixed+0x32>
 8001bee:	2308      	movs	r3, #8
 8001bf0:	e000      	b.n	8001bf4 <bmp280_read_fixed+0x34>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f107 0218 	add.w	r2, r7, #24
 8001bfe:	21f7      	movs	r1, #247	; 0xf7
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fba7 	bl	8001354 <read_data>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <bmp280_read_fixed+0x50>
		return false;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e038      	b.n	8001c82 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001c10:	7e3b      	ldrb	r3, [r7, #24]
 8001c12:	031a      	lsls	r2, r3, #12
 8001c14:	7e7b      	ldrb	r3, [r7, #25]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	7eba      	ldrb	r2, [r7, #26]
 8001c1c:	0912      	lsrs	r2, r2, #4
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	4313      	orrs	r3, r2
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001c24:	7efb      	ldrb	r3, [r7, #27]
 8001c26:	031a      	lsls	r2, r3, #12
 8001c28:	7f3b      	ldrb	r3, [r7, #28]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	7f7a      	ldrb	r2, [r7, #29]
 8001c30:	0912      	lsrs	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	4313      	orrs	r3, r2
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f7ff fd63 	bl	800170c <compensate_temperature>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff fd92 	bl	800177c <compensate_pressure>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001c64:	7fbb      	ldrb	r3, [r7, #30]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	7ffa      	ldrb	r2, [r7, #31]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	461a      	mov	r2, r3
 8001c72:	6a39      	ldr	r1, [r7, #32]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff ff45 	bl	8001b04 <compensate_humidity>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3730      	adds	r7, #48	; 0x30
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <bmp280_read_float+0x1a>
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	e000      	b.n	8001ca8 <bmp280_read_float+0x1c>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f107 0218 	add.w	r2, r7, #24
 8001cac:	f107 011c 	add.w	r1, r7, #28
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff ff85 	bl	8001bc0 <bmp280_read_fixed>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d02d      	beq.n	8001d18 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe ff08 	bl	8000ad4 <__aeabi_i2f>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4917      	ldr	r1, [pc, #92]	; (8001d24 <bmp280_read_float+0x98>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff f80b 	bl	8000ce4 <__aeabi_fdiv>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fef7 	bl	8000acc <__aeabi_ui2f>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fffd 	bl	8000ce4 <__aeabi_fdiv>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fee6 	bl	8000acc <__aeabi_ui2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe ffec 	bl	8000ce4 <__aeabi_fdiv>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	601a      	str	r2, [r3, #0]
		return true;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <bmp280_read_float+0x8e>
	}

	return false;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	42c80000 	.word	0x42c80000

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2c:	f001 fac8 	bl	80032c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d30:	f000 f83c 	bl	8001dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d34:	f000 fade 	bl	80022f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d38:	f000 fabe 	bl	80022b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001d3c:	f000 f894 	bl	8001e68 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d40:	f000 f8e0 	bl	8001f04 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d44:	f000 f90c 	bl	8001f60 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001d48:	f000 f938 	bl	8001fbc <MX_SPI1_Init>
  MX_FATFS_Init();
 8001d4c:	f00a fa86 	bl	800c25c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001d50:	f00b feb0 	bl	800dab4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001d54:	f000 f968 	bl	8002028 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d58:	f000 f9dc 	bl	8002114 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001d5c:	f000 fa82 	bl	8002264 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001d60:	f000 fa32 	bl	80021c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8001d64:	f000 fde8 	bl	8002938 <SSD1306_Init>
  SSD1306_Clear();
 8001d68:	f000 ff06 	bl	8002b78 <SSD1306_Clear>
  bmp280_init_default_params(&bmp280.params);
 8001d6c:	480b      	ldr	r0, [pc, #44]	; (8001d9c <main+0x74>)
 8001d6e:	f7ff faa7 	bl	80012c0 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <main+0x78>)
 8001d74:	2276      	movs	r2, #118	; 0x76
 8001d76:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c2;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <main+0x78>)
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <main+0x7c>)
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
  bmp280_init(&bmp280, &bmp280.params);
 8001d7e:	4907      	ldr	r1, [pc, #28]	; (8001d9c <main+0x74>)
 8001d80:	4807      	ldr	r0, [pc, #28]	; (8001da0 <main+0x78>)
 8001d82:	f7ff fc16 	bl	80015b2 <bmp280_init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001d86:	4808      	ldr	r0, [pc, #32]	; (8001da8 <main+0x80>)
 8001d88:	f001 feec 	bl	8003b64 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  polsens();
 8001d8c:	f000 fc3c 	bl	8002608 <polsens>
	  usbwork();
 8001d90:	f000 fb08 	bl	80023a4 <usbwork>
	  displaywork();
 8001d94:	f000 fca6 	bl	80026e4 <displaywork>
	  polsens();
 8001d98:	e7f8      	b.n	8001d8c <main+0x64>
 8001d9a:	bf00      	nop
 8001d9c:	20000e8c 	.word	0x20000e8c
 8001da0:	20000e60 	.word	0x20000e60
 8001da4:	20000c68 	.word	0x20000c68
 8001da8:	20000d24 	.word	0x20000d24

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b094      	sub	sp, #80	; 0x50
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	2228      	movs	r2, #40	; 0x28
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00c fb4e 	bl	800e45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dea:	2301      	movs	r3, #1
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dee:	2302      	movs	r3, #2
 8001df0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001df8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 ff44 	bl	8007c90 <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e0e:	f000 fcc7 	bl	80027a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e12:	230f      	movs	r3, #15
 8001e14:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e22:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f006 f9ae 	bl	8008190 <HAL_RCC_ClockConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001e3a:	f000 fcb1 	bl	80027a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e46:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f006 fb38 	bl	80084c4 <HAL_RCCEx_PeriphCLKConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001e5a:	f000 fca1 	bl	80027a0 <Error_Handler>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3750      	adds	r7, #80	; 0x50
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <MX_ADC1_Init+0x94>)
 8001e7a:	4a21      	ldr	r2, [pc, #132]	; (8001f00 <MX_ADC1_Init+0x98>)
 8001e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <MX_ADC1_Init+0x94>)
 8001e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_ADC1_Init+0x94>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <MX_ADC1_Init+0x94>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <MX_ADC1_Init+0x94>)
 8001e94:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <MX_ADC1_Init+0x94>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <MX_ADC1_Init+0x94>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ea6:	4815      	ldr	r0, [pc, #84]	; (8001efc <MX_ADC1_Init+0x94>)
 8001ea8:	f001 fa90 	bl	80033cc <HAL_ADC_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001eb2:	f000 fc75 	bl	80027a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480d      	ldr	r0, [pc, #52]	; (8001efc <MX_ADC1_Init+0x94>)
 8001ec8:	f001 fc52 	bl	8003770 <HAL_ADC_ConfigChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ed2:	f000 fc65 	bl	80027a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001ed6:	2309      	movs	r3, #9
 8001ed8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001eda:	2302      	movs	r3, #2
 8001edc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4806      	ldr	r0, [pc, #24]	; (8001efc <MX_ADC1_Init+0x94>)
 8001ee4:	f001 fc44 	bl	8003770 <HAL_ADC_ConfigChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001eee:	f000 fc57 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000d24 	.word	0x20000d24
 8001f00:	40012400 	.word	0x40012400

08001f04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <MX_I2C1_Init+0x54>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <MX_I2C1_Init+0x58>)
 8001f12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	; (8001f54 <MX_I2C1_Init+0x50>)
 8001f42:	f002 fc03 	bl	800474c <HAL_I2C_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f4c:	f000 fc28 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000c14 	.word	0x20000c14
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	00061a80 	.word	0x00061a80

08001f60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <MX_I2C2_Init+0x54>)
 8001f68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <MX_I2C2_Init+0x58>)
 8001f6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <MX_I2C2_Init+0x50>)
 8001f9e:	f002 fbd5 	bl	800474c <HAL_I2C_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001fa8:	f000 fbfa 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000c68 	.word	0x20000c68
 8001fb4:	40005800 	.word	0x40005800
 8001fb8:	000186a0 	.word	0x000186a0

08001fbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fc2:	4a18      	ldr	r2, [pc, #96]	; (8002024 <MX_SPI1_Init+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ff0:	2230      	movs	r2, #48	; 0x30
 8001ff2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <MX_SPI1_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_SPI1_Init+0x64>)
 8002008:	220a      	movs	r2, #10
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <MX_SPI1_Init+0x64>)
 800200e:	f006 fbd3 	bl	80087b8 <HAL_SPI_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002018:	f000 fbc2 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000dc0 	.word	0x20000dc0
 8002024:	40013000 	.word	0x40013000

08002028 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	; 0x38
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
 8002054:	615a      	str	r2, [r3, #20]
 8002056:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <MX_TIM2_Init+0xe8>)
 800205a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800205e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <MX_TIM2_Init+0xe8>)
 8002062:	2200      	movs	r2, #0
 8002064:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <MX_TIM2_Init+0xe8>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <MX_TIM2_Init+0xe8>)
 800206e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002072:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <MX_TIM2_Init+0xe8>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <MX_TIM2_Init+0xe8>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002080:	4823      	ldr	r0, [pc, #140]	; (8002110 <MX_TIM2_Init+0xe8>)
 8002082:	f006 fc1d 	bl	80088c0 <HAL_TIM_Base_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800208c:	f000 fb88 	bl	80027a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209a:	4619      	mov	r1, r3
 800209c:	481c      	ldr	r0, [pc, #112]	; (8002110 <MX_TIM2_Init+0xe8>)
 800209e:	f006 fe73 	bl	8008d88 <HAL_TIM_ConfigClockSource>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020a8:	f000 fb7a 	bl	80027a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020ac:	4818      	ldr	r0, [pc, #96]	; (8002110 <MX_TIM2_Init+0xe8>)
 80020ae:	f006 fc56 	bl	800895e <HAL_TIM_PWM_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020b8:	f000 fb72 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c4:	f107 0320 	add.w	r3, r7, #32
 80020c8:	4619      	mov	r1, r3
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_TIM2_Init+0xe8>)
 80020cc:	f007 f9ce 	bl	800946c <HAL_TIMEx_MasterConfigSynchronization>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020d6:	f000 fb63 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020da:	2360      	movs	r3, #96	; 0x60
 80020dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM2_Init+0xe8>)
 80020f2:	f006 fd8b 	bl	8008c0c <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020fc:	f000 fb50 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM2_Init+0xe8>)
 8002102:	f000 ff63 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 8002106:	bf00      	nop
 8002108:	3738      	adds	r7, #56	; 0x38
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000e18 	.word	0x20000e18

08002114 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211a:	f107 0320 	add.w	r3, r7, #32
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]
 8002132:	615a      	str	r2, [r3, #20]
 8002134:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <MX_TIM3_Init+0xac>)
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <MX_TIM3_Init+0xb0>)
 800213a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <MX_TIM3_Init+0xac>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <MX_TIM3_Init+0xac>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <MX_TIM3_Init+0xac>)
 800214a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <MX_TIM3_Init+0xac>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <MX_TIM3_Init+0xac>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800215c:	4818      	ldr	r0, [pc, #96]	; (80021c0 <MX_TIM3_Init+0xac>)
 800215e:	f006 fbfe 	bl	800895e <HAL_TIM_PWM_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002168:	f000 fb1a 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002174:	f107 0320 	add.w	r3, r7, #32
 8002178:	4619      	mov	r1, r3
 800217a:	4811      	ldr	r0, [pc, #68]	; (80021c0 <MX_TIM3_Init+0xac>)
 800217c:	f007 f976 	bl	800946c <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002186:	f000 fb0b 	bl	80027a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218a:	2360      	movs	r3, #96	; 0x60
 800218c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2204      	movs	r2, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_TIM3_Init+0xac>)
 80021a2:	f006 fd33 	bl	8008c0c <HAL_TIM_PWM_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021ac:	f000 faf8 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <MX_TIM3_Init+0xac>)
 80021b2:	f000 ff0b 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000cd8 	.word	0x20000cd8
 80021c4:	40000400 	.word	0x40000400

080021c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021dc:	463b      	mov	r3, r7
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <MX_TIM4_Init+0x94>)
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <MX_TIM4_Init+0x98>)
 80021e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (72*2*10)-1;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	; (800225c <MX_TIM4_Init+0x94>)
 80021ec:	f240 529f 	movw	r2, #1439	; 0x59f
 80021f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <MX_TIM4_Init+0x94>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <MX_TIM4_Init+0x94>)
 80021fa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80021fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_TIM4_Init+0x94>)
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <MX_TIM4_Init+0x94>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220c:	4813      	ldr	r0, [pc, #76]	; (800225c <MX_TIM4_Init+0x94>)
 800220e:	f006 fb57 	bl	80088c0 <HAL_TIM_Base_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002218:	f000 fac2 	bl	80027a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800221c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	4619      	mov	r1, r3
 8002228:	480c      	ldr	r0, [pc, #48]	; (800225c <MX_TIM4_Init+0x94>)
 800222a:	f006 fdad 	bl	8008d88 <HAL_TIM_ConfigClockSource>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002234:	f000 fab4 	bl	80027a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002240:	463b      	mov	r3, r7
 8002242:	4619      	mov	r1, r3
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_TIM4_Init+0x94>)
 8002246:	f007 f911 	bl	800946c <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002250:	f000 faa6 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000bcc 	.word	0x20000bcc
 8002260:	40000800 	.word	0x40000800

08002264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <MX_USART2_UART_Init+0x50>)
 800226c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <MX_USART2_UART_Init+0x4c>)
 800229c:	f007 f956 	bl	800954c <HAL_UART_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022a6:	f000 fa7b 	bl	80027a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200008bc 	.word	0x200008bc
 80022b4:	40004400 	.word	0x40004400

080022b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_DMA_Init+0x38>)
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <MX_DMA_Init+0x38>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6153      	str	r3, [r2, #20]
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_DMA_Init+0x38>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	200b      	movs	r0, #11
 80022dc:	f001 fdc5 	bl	8003e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022e0:	200b      	movs	r0, #11
 80022e2:	f001 fdde 	bl	8003ea2 <HAL_NVIC_EnableIRQ>

}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000

080022f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <MX_GPIO_Init+0xa8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a23      	ldr	r2, [pc, #140]	; (800239c <MX_GPIO_Init+0xa8>)
 800230e:	f043 0320 	orr.w	r3, r3, #32
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <MX_GPIO_Init+0xa8>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <MX_GPIO_Init+0xa8>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <MX_GPIO_Init+0xa8>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <MX_GPIO_Init+0xa8>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <MX_GPIO_Init+0xa8>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a17      	ldr	r2, [pc, #92]	; (800239c <MX_GPIO_Init+0xa8>)
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	6193      	str	r3, [r2, #24]
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <MX_GPIO_Init+0xa8>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 4121 	mov.w	r1, #41216	; 0xa100
 8002356:	4812      	ldr	r0, [pc, #72]	; (80023a0 <MX_GPIO_Init+0xac>)
 8002358:	f002 f9e0 	bl	800471c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB15 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_8;
 800235c:	f44f 4321 	mov.w	r3, #41216	; 0xa100
 8002360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2302      	movs	r3, #2
 800236c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4619      	mov	r1, r3
 8002374:	480a      	ldr	r0, [pc, #40]	; (80023a0 <MX_GPIO_Init+0xac>)
 8002376:	f002 f84d 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800237a:	2318      	movs	r3, #24
 800237c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4619      	mov	r1, r3
 800238c:	4804      	ldr	r0, [pc, #16]	; (80023a0 <MX_GPIO_Init+0xac>)
 800238e:	f002 f841 	bl	8004414 <HAL_GPIO_Init>

}
 8002392:	bf00      	nop
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010c00 	.word	0x40010c00

080023a4 <usbwork>:

/* USER CODE BEGIN 4 */
void usbwork()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	if (strcmp(strRX,"")!=0) //Если входящее сообщение не пустое
 80023a8:	4b75      	ldr	r3, [pc, #468]	; (8002580 <usbwork+0x1dc>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80e5 	beq.w	800257c <usbwork+0x1d8>
	{
		strcpy(bufferRX,strRX);
 80023b2:	4973      	ldr	r1, [pc, #460]	; (8002580 <usbwork+0x1dc>)
 80023b4:	4873      	ldr	r0, [pc, #460]	; (8002584 <usbwork+0x1e0>)
 80023b6:	f00c f879 	bl	800e4ac <strcpy>
		if (strcmp(strRX,"getpar")==0) //Возврат параметров
 80023ba:	4973      	ldr	r1, [pc, #460]	; (8002588 <usbwork+0x1e4>)
 80023bc:	4870      	ldr	r0, [pc, #448]	; (8002580 <usbwork+0x1dc>)
 80023be:	f7fd fec7 	bl	8000150 <strcmp>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f040 80b2 	bne.w	800252e <usbwork+0x18a>
		{
			sprintf((char*)UserTxBufferFS,"paramds"); //Отправка
 80023ca:	4970      	ldr	r1, [pc, #448]	; (800258c <usbwork+0x1e8>)
 80023cc:	4870      	ldr	r0, [pc, #448]	; (8002590 <usbwork+0x1ec>)
 80023ce:	f00c f84d 	bl	800e46c <siprintf>
			while (waittx()); //Ожидание свободы USB порта
 80023d2:	bf00      	nop
 80023d4:	f000 f902 	bl	80025dc <waittx>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1fa      	bne.n	80023d4 <usbwork+0x30>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS)); //Отправка данных на порт
 80023de:	486c      	ldr	r0, [pc, #432]	; (8002590 <usbwork+0x1ec>)
 80023e0:	f7fd fec0 	bl	8000164 <strlen>
 80023e4:	4603      	mov	r3, r0
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	4869      	ldr	r0, [pc, #420]	; (8002590 <usbwork+0x1ec>)
 80023ec:	f00b fc2e 	bl	800dc4c <CDC_Transmit_FS>
			sprintf((char*)UserTxBufferFS,"temp1:%d",temp1); //Заполнение буфера
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <usbwork+0x1f0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4968      	ldr	r1, [pc, #416]	; (8002598 <usbwork+0x1f4>)
 80023f8:	4865      	ldr	r0, [pc, #404]	; (8002590 <usbwork+0x1ec>)
 80023fa:	f00c f837 	bl	800e46c <siprintf>
			while (waittx());
 80023fe:	bf00      	nop
 8002400:	f000 f8ec 	bl	80025dc <waittx>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1fa      	bne.n	8002400 <usbwork+0x5c>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS));
 800240a:	4861      	ldr	r0, [pc, #388]	; (8002590 <usbwork+0x1ec>)
 800240c:	f7fd feaa 	bl	8000164 <strlen>
 8002410:	4603      	mov	r3, r0
 8002412:	b29b      	uxth	r3, r3
 8002414:	4619      	mov	r1, r3
 8002416:	485e      	ldr	r0, [pc, #376]	; (8002590 <usbwork+0x1ec>)
 8002418:	f00b fc18 	bl	800dc4c <CDC_Transmit_FS>
			temp2=(int)temperature;
 800241c:	4b5f      	ldr	r3, [pc, #380]	; (800259c <usbwork+0x1f8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fcfb 	bl	8000e1c <__aeabi_f2iz>
 8002426:	4603      	mov	r3, r0
 8002428:	4a5d      	ldr	r2, [pc, #372]	; (80025a0 <usbwork+0x1fc>)
 800242a:	6013      	str	r3, [r2, #0]
			sprintf((char*)UserTxBufferFS,"temp2:%d",temp2); //Отправка
 800242c:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <usbwork+0x1fc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	495c      	ldr	r1, [pc, #368]	; (80025a4 <usbwork+0x200>)
 8002434:	4856      	ldr	r0, [pc, #344]	; (8002590 <usbwork+0x1ec>)
 8002436:	f00c f819 	bl	800e46c <siprintf>
			while (waittx());
 800243a:	bf00      	nop
 800243c:	f000 f8ce 	bl	80025dc <waittx>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1fa      	bne.n	800243c <usbwork+0x98>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS));
 8002446:	4852      	ldr	r0, [pc, #328]	; (8002590 <usbwork+0x1ec>)
 8002448:	f7fd fe8c 	bl	8000164 <strlen>
 800244c:	4603      	mov	r3, r0
 800244e:	b29b      	uxth	r3, r3
 8002450:	4619      	mov	r1, r3
 8002452:	484f      	ldr	r0, [pc, #316]	; (8002590 <usbwork+0x1ec>)
 8002454:	f00b fbfa 	bl	800dc4c <CDC_Transmit_FS>
			sprintf((char*)UserTxBufferFS,"humidair:%d",humidair); //Отправка
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <usbwork+0x204>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4953      	ldr	r1, [pc, #332]	; (80025ac <usbwork+0x208>)
 8002460:	484b      	ldr	r0, [pc, #300]	; (8002590 <usbwork+0x1ec>)
 8002462:	f00c f803 	bl	800e46c <siprintf>
			while (waittx());
 8002466:	bf00      	nop
 8002468:	f000 f8b8 	bl	80025dc <waittx>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1fa      	bne.n	8002468 <usbwork+0xc4>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS));
 8002472:	4847      	ldr	r0, [pc, #284]	; (8002590 <usbwork+0x1ec>)
 8002474:	f7fd fe76 	bl	8000164 <strlen>
 8002478:	4603      	mov	r3, r0
 800247a:	b29b      	uxth	r3, r3
 800247c:	4619      	mov	r1, r3
 800247e:	4844      	ldr	r0, [pc, #272]	; (8002590 <usbwork+0x1ec>)
 8002480:	f00b fbe4 	bl	800dc4c <CDC_Transmit_FS>
			sprintf((char*)UserTxBufferFS,"humidearth:%d",humidearth); //Отправка
 8002484:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <usbwork+0x20c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	494a      	ldr	r1, [pc, #296]	; (80025b4 <usbwork+0x210>)
 800248c:	4840      	ldr	r0, [pc, #256]	; (8002590 <usbwork+0x1ec>)
 800248e:	f00b ffed 	bl	800e46c <siprintf>
			while (waittx());
 8002492:	bf00      	nop
 8002494:	f000 f8a2 	bl	80025dc <waittx>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1fa      	bne.n	8002494 <usbwork+0xf0>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS));
 800249e:	483c      	ldr	r0, [pc, #240]	; (8002590 <usbwork+0x1ec>)
 80024a0:	f7fd fe60 	bl	8000164 <strlen>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	4839      	ldr	r0, [pc, #228]	; (8002590 <usbwork+0x1ec>)
 80024ac:	f00b fbce 	bl	800dc4c <CDC_Transmit_FS>
			sprintf((char*)UserTxBufferFS,"gasq:%d",gasq); //Отправка
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <usbwork+0x214>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4941      	ldr	r1, [pc, #260]	; (80025bc <usbwork+0x218>)
 80024b8:	4835      	ldr	r0, [pc, #212]	; (8002590 <usbwork+0x1ec>)
 80024ba:	f00b ffd7 	bl	800e46c <siprintf>
			while (waittx());
 80024be:	bf00      	nop
 80024c0:	f000 f88c 	bl	80025dc <waittx>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1fa      	bne.n	80024c0 <usbwork+0x11c>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS));
 80024ca:	4831      	ldr	r0, [pc, #196]	; (8002590 <usbwork+0x1ec>)
 80024cc:	f7fd fe4a 	bl	8000164 <strlen>
 80024d0:	4603      	mov	r3, r0
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	482e      	ldr	r0, [pc, #184]	; (8002590 <usbwork+0x1ec>)
 80024d8:	f00b fbb8 	bl	800dc4c <CDC_Transmit_FS>
			sprintf((char*)UserTxBufferFS,"psimmhg:%d",psi); //Отправка
 80024dc:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <usbwork+0x21c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4938      	ldr	r1, [pc, #224]	; (80025c4 <usbwork+0x220>)
 80024e4:	482a      	ldr	r0, [pc, #168]	; (8002590 <usbwork+0x1ec>)
 80024e6:	f00b ffc1 	bl	800e46c <siprintf>
			while (waittx());
 80024ea:	bf00      	nop
 80024ec:	f000 f876 	bl	80025dc <waittx>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1fa      	bne.n	80024ec <usbwork+0x148>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS));
 80024f6:	4826      	ldr	r0, [pc, #152]	; (8002590 <usbwork+0x1ec>)
 80024f8:	f7fd fe34 	bl	8000164 <strlen>
 80024fc:	4603      	mov	r3, r0
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4619      	mov	r1, r3
 8002502:	4823      	ldr	r0, [pc, #140]	; (8002590 <usbwork+0x1ec>)
 8002504:	f00b fba2 	bl	800dc4c <CDC_Transmit_FS>
			sprintf((char*)UserTxBufferFS,"paramde"); //Отправка
 8002508:	492f      	ldr	r1, [pc, #188]	; (80025c8 <usbwork+0x224>)
 800250a:	4821      	ldr	r0, [pc, #132]	; (8002590 <usbwork+0x1ec>)
 800250c:	f00b ffae 	bl	800e46c <siprintf>
			while (waittx());
 8002510:	bf00      	nop
 8002512:	f000 f863 	bl	80025dc <waittx>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1fa      	bne.n	8002512 <usbwork+0x16e>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS));
 800251c:	481c      	ldr	r0, [pc, #112]	; (8002590 <usbwork+0x1ec>)
 800251e:	f7fd fe21 	bl	8000164 <strlen>
 8002522:	4603      	mov	r3, r0
 8002524:	b29b      	uxth	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	4819      	ldr	r0, [pc, #100]	; (8002590 <usbwork+0x1ec>)
 800252a:	f00b fb8f 	bl	800dc4c <CDC_Transmit_FS>
			}
		if (strcmp(strRX,"checkcon")==0) //Возврат параметров
 800252e:	4927      	ldr	r1, [pc, #156]	; (80025cc <usbwork+0x228>)
 8002530:	4813      	ldr	r0, [pc, #76]	; (8002580 <usbwork+0x1dc>)
 8002532:	f7fd fe0d 	bl	8000150 <strcmp>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d112      	bne.n	8002562 <usbwork+0x1be>
				{
			sprintf((char*)UserTxBufferFS,"gut"); //Отправка
 800253c:	4924      	ldr	r1, [pc, #144]	; (80025d0 <usbwork+0x22c>)
 800253e:	4814      	ldr	r0, [pc, #80]	; (8002590 <usbwork+0x1ec>)
 8002540:	f00b ff94 	bl	800e46c <siprintf>
			while (waittx());
 8002544:	bf00      	nop
 8002546:	f000 f849 	bl	80025dc <waittx>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1fa      	bne.n	8002546 <usbwork+0x1a2>
			CDC_Transmit_FS(UserTxBufferFS,strlen(UserTxBufferFS));
 8002550:	480f      	ldr	r0, [pc, #60]	; (8002590 <usbwork+0x1ec>)
 8002552:	f7fd fe07 	bl	8000164 <strlen>
 8002556:	4603      	mov	r3, r0
 8002558:	b29b      	uxth	r3, r3
 800255a:	4619      	mov	r1, r3
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <usbwork+0x1ec>)
 800255e:	f00b fb75 	bl	800dc4c <CDC_Transmit_FS>
				}
		if (strcmp(strRX,"wifion")==0){
 8002562:	491c      	ldr	r1, [pc, #112]	; (80025d4 <usbwork+0x230>)
 8002564:	4806      	ldr	r0, [pc, #24]	; (8002580 <usbwork+0x1dc>)
 8002566:	f7fd fdf3 	bl	8000150 <strcmp>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <usbwork+0x1d2>
			//wifiinit();
			wifiint=1;
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <usbwork+0x234>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
		}
	strcpy(strRX,"");
 8002576:	4b02      	ldr	r3, [pc, #8]	; (8002580 <usbwork+0x1dc>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
	}
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000cbc 	.word	0x20000cbc
 8002584:	20000da0 	.word	0x20000da0
 8002588:	0800ed2c 	.word	0x0800ed2c
 800258c:	0800ed34 	.word	0x0800ed34
 8002590:	200016f4 	.word	0x200016f4
 8002594:	2000025c 	.word	0x2000025c
 8002598:	0800ed3c 	.word	0x0800ed3c
 800259c:	20000cd4 	.word	0x20000cd4
 80025a0:	20000bc8 	.word	0x20000bc8
 80025a4:	0800ed48 	.word	0x0800ed48
 80025a8:	20000258 	.word	0x20000258
 80025ac:	0800ed54 	.word	0x0800ed54
 80025b0:	20000dbc 	.word	0x20000dbc
 80025b4:	0800ed60 	.word	0x0800ed60
 80025b8:	20000e98 	.word	0x20000e98
 80025bc:	0800ed70 	.word	0x0800ed70
 80025c0:	20000bc4 	.word	0x20000bc4
 80025c4:	0800ed78 	.word	0x0800ed78
 80025c8:	0800ed84 	.word	0x0800ed84
 80025cc:	0800ed8c 	.word	0x0800ed8c
 80025d0:	0800ed98 	.word	0x0800ed98
 80025d4:	0800ed9c 	.word	0x0800ed9c
 80025d8:	20000260 	.word	0x20000260

080025dc <waittx>:
int waittx(){ //Ожидание освобождения порта
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <waittx+0x28>)
 80025e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80025e8:	607b      	str	r3, [r7, #4]
	 if (hcdc->TxState != 0){ //Если никаких действий по отправке не происходит то всё ок
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <waittx+0x1c>
		 return 1;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <waittx+0x1e>
	 }
	 else return 0;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000900 	.word	0x20000900

08002608 <polsens>:

void polsens(){ //Функция чтения и преобразования данных с датчиков
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0

	  humidair = si7021_measure_humidity(&hi2c2); //Читаем уровень влажности
 800260e:	4828      	ldr	r0, [pc, #160]	; (80026b0 <polsens+0xa8>)
 8002610:	f000 f930 	bl	8002874 <si7021_measure_humidity>
 8002614:	4603      	mov	r3, r0
 8002616:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <polsens+0xac>)
 8002618:	6013      	str	r3, [r2, #0]
	  if (humidair == SI7021_MEASURE_FAILED) {
	  }
	  temp1 = si7021_measure_temperature(&hi2c2);//Читаем температуру 1
 800261a:	4825      	ldr	r0, [pc, #148]	; (80026b0 <polsens+0xa8>)
 800261c:	f000 f969 	bl	80028f2 <si7021_measure_temperature>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <polsens+0xb0>)
 8002626:	601a      	str	r2, [r3, #0]
	  if (humidair == SI7021_MEASURE_FAILED) {
	  }
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)){} //Читаем температуру 2, и атмосферное давление, читаем в пустую переменную влажности (особенности регистров констроллера)
 8002628:	bf00      	nop
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <polsens+0xb4>)
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <polsens+0xb8>)
 800262e:	4925      	ldr	r1, [pc, #148]	; (80026c4 <polsens+0xbc>)
 8002630:	4825      	ldr	r0, [pc, #148]	; (80026c8 <polsens+0xc0>)
 8002632:	f7ff fb2b 	bl	8001c8c <bmp280_read_float>
 8002636:	4603      	mov	r3, r0
 8002638:	f083 0301 	eor.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f3      	bne.n	800262a <polsens+0x22>
	  HAL_ADC_Start_DMA(&hadc1, adcval,2); //Запускаем АЦП на DMA
 8002642:	2202      	movs	r2, #2
 8002644:	4921      	ldr	r1, [pc, #132]	; (80026cc <polsens+0xc4>)
 8002646:	4822      	ldr	r0, [pc, #136]	; (80026d0 <polsens+0xc8>)
 8002648:	f000 ff98 	bl	800357c <HAL_ADC_Start_DMA>
	  int hum;
	  hum=adcval[1]; //Читаем сырое значение влажности
 800264c:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <polsens+0xc4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	607b      	str	r3, [r7, #4]
	  humidearth=((4096-hum))*100/2100; //Переводим в проценты
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002658:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <polsens+0xcc>)
 800265a:	fb82 1203 	smull	r1, r2, r2, r3
 800265e:	1092      	asrs	r2, r2, #2
 8002660:	17db      	asrs	r3, r3, #31
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <polsens+0xd0>)
 8002666:	6013      	str	r3, [r2, #0]
	  gasq=adcval[0]; //Читаем показатели датчика газа
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <polsens+0xc4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <polsens+0xd4>)
 8002670:	601a      	str	r2, [r3, #0]
	  psi=(int)pressure/133.322; //Переводим атмосферное давление из паскалей в мм рт ст (нам так привычние)
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <polsens+0xb8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fbd0 	bl	8000e1c <__aeabi_f2iz>
 800267c:	4603      	mov	r3, r0
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd feca 	bl	8000418 <__aeabi_i2d>
 8002684:	a308      	add	r3, pc, #32	; (adr r3, 80026a8 <polsens+0xa0>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	f7fe f859 	bl	8000740 <__aeabi_ddiv>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe f93b 	bl	8000910 <__aeabi_d2iz>
 800269a:	4603      	mov	r3, r0
 800269c:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <polsens+0xd8>)
 800269e:	6013      	str	r3, [r2, #0]

}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80026ac:	4060aa4d 	.word	0x4060aa4d
 80026b0:	20000c68 	.word	0x20000c68
 80026b4:	20000258 	.word	0x20000258
 80026b8:	2000025c 	.word	0x2000025c
 80026bc:	20000d54 	.word	0x20000d54
 80026c0:	20000d20 	.word	0x20000d20
 80026c4:	20000cd4 	.word	0x20000cd4
 80026c8:	20000e60 	.word	0x20000e60
 80026cc:	20000e9c 	.word	0x20000e9c
 80026d0:	20000d24 	.word	0x20000d24
 80026d4:	30c30c31 	.word	0x30c30c31
 80026d8:	20000dbc 	.word	0x20000dbc
 80026dc:	20000e98 	.word	0x20000e98
 80026e0:	20000bc4 	.word	0x20000bc4

080026e4 <displaywork>:
int wifiinit(){
	ESP_Init("Ermos", "ermil1999");
	return 0;
}
void displaywork(){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	if (timer_val >=3){
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <displaywork+0xb4>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d907      	bls.n	8002700 <displaywork+0x1c>
		nowscreen++;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <displaywork+0xb8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <displaywork+0xb8>)
 80026f8:	6013      	str	r3, [r2, #0]
		timer_val=0;
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <displaywork+0xb4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	801a      	strh	r2, [r3, #0]
	};

	switch (nowscreen){
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <displaywork+0xb8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d845      	bhi.n	8002794 <displaywork+0xb0>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <displaywork+0x2c>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002729 	.word	0x08002729
 8002714:	0800273b 	.word	0x0800273b
 8002718:	0800274d 	.word	0x0800274d
 800271c:	0800275f 	.word	0x0800275f
 8002720:	08002771 	.word	0x08002771
 8002724:	08002783 	.word	0x08002783
	case 0:
		SSD1306_Clear();
 8002728:	f000 fa26 	bl	8002b78 <SSD1306_Clear>
		//SSD1306_Puts ("temp", &Font_11x18, 1);
		SSD1306_GotoXY (10, 30);
 800272c:	211e      	movs	r1, #30
 800272e:	200a      	movs	r0, #10
 8002730:	f000 fa0c 	bl	8002b4c <SSD1306_GotoXY>
		//SSD1306_Puts ((char*)temp2, &Font_11x18, 1);
		SSD1306_UpdateScreen();
 8002734:	f000 f9c4 	bl	8002ac0 <SSD1306_UpdateScreen>
	break;
 8002738:	e02c      	b.n	8002794 <displaywork+0xb0>
	case 1:
		SSD1306_Clear();
 800273a:	f000 fa1d 	bl	8002b78 <SSD1306_Clear>
		//SSD1306_Puts ("humid", &Font_11x18, 1);
		SSD1306_GotoXY (10, 30);
 800273e:	211e      	movs	r1, #30
 8002740:	200a      	movs	r0, #10
 8002742:	f000 fa03 	bl	8002b4c <SSD1306_GotoXY>
		//SSD1306_Puts ((char*)humidair, &Font_11x18, 1);
		SSD1306_UpdateScreen();
 8002746:	f000 f9bb 	bl	8002ac0 <SSD1306_UpdateScreen>
	break;
 800274a:	e023      	b.n	8002794 <displaywork+0xb0>
	case 2:
		SSD1306_Clear();
 800274c:	f000 fa14 	bl	8002b78 <SSD1306_Clear>
		//SSD1306_Puts ("humid earth %", &Font_11x18, 1);
		SSD1306_GotoXY (10, 30);
 8002750:	211e      	movs	r1, #30
 8002752:	200a      	movs	r0, #10
 8002754:	f000 f9fa 	bl	8002b4c <SSD1306_GotoXY>
		//SSD1306_Puts ((char*)humidearth, &Font_11x18, 1);
		SSD1306_UpdateScreen();
 8002758:	f000 f9b2 	bl	8002ac0 <SSD1306_UpdateScreen>
	break;
 800275c:	e01a      	b.n	8002794 <displaywork+0xb0>
	case 3:
		SSD1306_Clear();
 800275e:	f000 fa0b 	bl	8002b78 <SSD1306_Clear>
		//SSD1306_Puts ("CO2 ppn", &Font_11x18, 1);
		SSD1306_GotoXY (10, 30);
 8002762:	211e      	movs	r1, #30
 8002764:	200a      	movs	r0, #10
 8002766:	f000 f9f1 	bl	8002b4c <SSD1306_GotoXY>
		//SSD1306_Puts ((char*)gasq, &Font_11x18, 1);
		SSD1306_UpdateScreen();
 800276a:	f000 f9a9 	bl	8002ac0 <SSD1306_UpdateScreen>
	break;
 800276e:	e011      	b.n	8002794 <displaywork+0xb0>
	case 4:
		SSD1306_Clear();
 8002770:	f000 fa02 	bl	8002b78 <SSD1306_Clear>
		//SSD1306_Puts ("psi", &Font_11x18, 1);
		SSD1306_GotoXY (10, 30);
 8002774:	211e      	movs	r1, #30
 8002776:	200a      	movs	r0, #10
 8002778:	f000 f9e8 	bl	8002b4c <SSD1306_GotoXY>
		//SSD1306_Puts ((char*)psi, &Font_11x18, 1);
		SSD1306_UpdateScreen();
 800277c:	f000 f9a0 	bl	8002ac0 <SSD1306_UpdateScreen>
	break;
 8002780:	e008      	b.n	8002794 <displaywork+0xb0>
	case 5:
		SSD1306_Clear();
 8002782:	f000 f9f9 	bl	8002b78 <SSD1306_Clear>
		//SSD1306_Puts ("recive", &Font_11x18, 1);
		SSD1306_GotoXY (10, 30);
 8002786:	211e      	movs	r1, #30
 8002788:	200a      	movs	r0, #10
 800278a:	f000 f9df 	bl	8002b4c <SSD1306_GotoXY>
		//SSD1306_Puts (bufferRX, &Font_11x18, 1);
		SSD1306_UpdateScreen();
 800278e:	f000 f997 	bl	8002ac0 <SSD1306_UpdateScreen>
	break;
 8002792:	bf00      	nop

	}



}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000268 	.word	0x20000268
 800279c:	20000264 	.word	0x20000264

080027a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a4:	b672      	cpsid	i
}
 80027a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <Error_Handler+0x8>
	...

080027ac <_read_and_convert_temperature>:
  return id;
}

// Helper to read and convert temperature into uint format
static int32_t _read_and_convert_temperature(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b08c      	sub	sp, #48	; 0x30
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  int res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 80027b4:	f107 020c 	add.w	r2, r7, #12
 80027b8:	2364      	movs	r3, #100	; 0x64
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2302      	movs	r3, #2
 80027be:	2181      	movs	r1, #129	; 0x81
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f002 fa05 	bl	8004bd0 <HAL_I2C_Master_Receive>
 80027c6:	4603      	mov	r3, r0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24

  if (res != HAL_OK) {
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <_read_and_convert_temperature+0x2a>
    return SI7021_MEASURE_FAILED;
 80027d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d4:	e045      	b.n	8002862 <_read_and_convert_temperature+0xb6>
  }

  int64_t temp_code = (si7021_buf[0] << 8 | si7021_buf[1]) * 100;
 80027d6:	7b3b      	ldrb	r3, [r7, #12]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	7b7a      	ldrb	r2, [r7, #13]
 80027dc:	4313      	orrs	r3, r2
 80027de:	2264      	movs	r2, #100	; 0x64
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80027ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int64_t temp = 17572 * temp_code / 6553500 - 4685;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f244 42a4 	movw	r2, #17572	; 0x44a4
 80027f4:	fb02 f203 	mul.w	r2, r2, r3
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2100      	movs	r1, #0
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	f244 41a4 	movw	r1, #17572	; 0x44a4
 8002808:	fba2 0101 	umull	r0, r1, r2, r1
 800280c:	440b      	add	r3, r1
 800280e:	4619      	mov	r1, r3
 8002810:	4a16      	ldr	r2, [pc, #88]	; (800286c <_read_and_convert_temperature+0xc0>)
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	f7fe fb27 	bl	8000e68 <__aeabi_ldivmod>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	4a13      	ldr	r2, [pc, #76]	; (8002870 <_read_and_convert_temperature+0xc4>)
 8002824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002828:	1884      	adds	r4, r0, r2
 800282a:	eb41 0503 	adc.w	r5, r1, r3
 800282e:	e9c7 4504 	strd	r4, r5, [r7, #16]

  if (temp > 12500 || temp < -4000) {
 8002832:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002836:	f243 00d4 	movw	r0, #12500	; 0x30d4
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	4290      	cmp	r0, r2
 8002840:	eb71 0303 	sbcs.w	r3, r1, r3
 8002844:	db09      	blt.n	800285a <_read_and_convert_temperature+0xae>
 8002846:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800284a:	f46f 607a 	mvn.w	r0, #4000	; 0xfa0
 800284e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002852:	4290      	cmp	r0, r2
 8002854:	eb71 0303 	sbcs.w	r3, r1, r3
 8002858:	db02      	blt.n	8002860 <_read_and_convert_temperature+0xb4>
    return SI7021_MEASURE_FAILED;
 800285a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800285e:	e000      	b.n	8002862 <_read_and_convert_temperature+0xb6>
  }

  return (int32_t)temp;
 8002860:	693b      	ldr	r3, [r7, #16]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3728      	adds	r7, #40	; 0x28
 8002866:	46bd      	mov	sp, r7
 8002868:	bdb0      	pop	{r4, r5, r7, pc}
 800286a:	bf00      	nop
 800286c:	0063ff9c 	.word	0x0063ff9c
 8002870:	ffffedb3 	.word	0xffffedb3

08002874 <si7021_measure_humidity>:

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 2, 100);
}

uint32_t si7021_measure_humidity(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af02      	add	r7, sp, #8
 800287a:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_NOHOLD;
 800287c:	23f5      	movs	r3, #245	; 0xf5
 800287e:	723b      	strb	r3, [r7, #8]

  // Start measure
  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 1, 100);
 8002880:	f107 0208 	add.w	r2, r7, #8
 8002884:	2364      	movs	r3, #100	; 0x64
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2301      	movs	r3, #1
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f002 f8a1 	bl	80049d4 <HAL_I2C_Master_Transmit>
 8002892:	4603      	mov	r3, r0
 8002894:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <si7021_measure_humidity+0x2e>
    return SI7021_MEASURE_FAILED;
 800289c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a0:	e023      	b.n	80028ea <si7021_measure_humidity+0x76>
  }
  HAL_Delay(30);
 80028a2:	201e      	movs	r0, #30
 80028a4:	f000 fd6e 	bl	8003384 <HAL_Delay>

  // Read result
  res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 80028a8:	f107 0208 	add.w	r2, r7, #8
 80028ac:	2364      	movs	r3, #100	; 0x64
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2302      	movs	r3, #2
 80028b2:	2181      	movs	r1, #129	; 0x81
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f002 f98b 	bl	8004bd0 <HAL_I2C_Master_Receive>
 80028ba:	4603      	mov	r3, r0
 80028bc:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <si7021_measure_humidity+0x56>
    return SI7021_MEASURE_FAILED;
 80028c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028c8:	e00f      	b.n	80028ea <si7021_measure_humidity+0x76>
  }

  return (si7021_buf[0] << 8 | si7021_buf[1]) * 125 / 65536 - 6;
 80028ca:	7a3b      	ldrb	r3, [r7, #8]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	7a7a      	ldrb	r2, [r7, #9]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	4613      	mov	r3, r2
 80028d4:	015b      	lsls	r3, r3, #5
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	da02      	bge.n	80028e6 <si7021_measure_humidity+0x72>
 80028e0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80028e4:	33ff      	adds	r3, #255	; 0xff
 80028e6:	141b      	asrs	r3, r3, #16
 80028e8:	3b06      	subs	r3, #6
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <si7021_measure_temperature>:

int32_t si7021_measure_temperature(I2C_HandleTypeDef *hi2c)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_TEMP_HOLD;
 80028fa:	23e3      	movs	r3, #227	; 0xe3
 80028fc:	723b      	strb	r3, [r7, #8]

  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 1, 100);
 80028fe:	f107 0208 	add.w	r2, r7, #8
 8002902:	2364      	movs	r3, #100	; 0x64
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2301      	movs	r3, #1
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f002 f862 	bl	80049d4 <HAL_I2C_Master_Transmit>
 8002910:	4603      	mov	r3, r0
 8002912:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <si7021_measure_temperature+0x2e>
    return 856;
 800291a:	f44f 7356 	mov.w	r3, #856	; 0x358
 800291e:	e006      	b.n	800292e <si7021_measure_temperature+0x3c>
  }
  HAL_Delay(30);
 8002920:	201e      	movs	r0, #30
 8002922:	f000 fd2f 	bl	8003384 <HAL_Delay>

  return _read_and_convert_temperature(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ff40 	bl	80027ac <_read_and_convert_temperature>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800293e:	f000 f925 	bl	8002b8c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002942:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002946:	2201      	movs	r2, #1
 8002948:	2178      	movs	r1, #120	; 0x78
 800294a:	485b      	ldr	r0, [pc, #364]	; (8002ab8 <SSD1306_Init+0x180>)
 800294c:	f002 ff02 	bl	8005754 <HAL_I2C_IsDeviceReady>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002956:	2300      	movs	r3, #0
 8002958:	e0a9      	b.n	8002aae <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800295a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800295e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002960:	e002      	b.n	8002968 <SSD1306_Init+0x30>
		p--;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3b01      	subs	r3, #1
 8002966:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f9      	bne.n	8002962 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800296e:	22ae      	movs	r2, #174	; 0xae
 8002970:	2100      	movs	r1, #0
 8002972:	2078      	movs	r0, #120	; 0x78
 8002974:	f000 f966 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002978:	2220      	movs	r2, #32
 800297a:	2100      	movs	r1, #0
 800297c:	2078      	movs	r0, #120	; 0x78
 800297e:	f000 f961 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002982:	2210      	movs	r2, #16
 8002984:	2100      	movs	r1, #0
 8002986:	2078      	movs	r0, #120	; 0x78
 8002988:	f000 f95c 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800298c:	22b0      	movs	r2, #176	; 0xb0
 800298e:	2100      	movs	r1, #0
 8002990:	2078      	movs	r0, #120	; 0x78
 8002992:	f000 f957 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002996:	22c8      	movs	r2, #200	; 0xc8
 8002998:	2100      	movs	r1, #0
 800299a:	2078      	movs	r0, #120	; 0x78
 800299c:	f000 f952 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80029a0:	2200      	movs	r2, #0
 80029a2:	2100      	movs	r1, #0
 80029a4:	2078      	movs	r0, #120	; 0x78
 80029a6:	f000 f94d 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80029aa:	2210      	movs	r2, #16
 80029ac:	2100      	movs	r1, #0
 80029ae:	2078      	movs	r0, #120	; 0x78
 80029b0:	f000 f948 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	2100      	movs	r1, #0
 80029b8:	2078      	movs	r0, #120	; 0x78
 80029ba:	f000 f943 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80029be:	2281      	movs	r2, #129	; 0x81
 80029c0:	2100      	movs	r1, #0
 80029c2:	2078      	movs	r0, #120	; 0x78
 80029c4:	f000 f93e 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80029c8:	22ff      	movs	r2, #255	; 0xff
 80029ca:	2100      	movs	r1, #0
 80029cc:	2078      	movs	r0, #120	; 0x78
 80029ce:	f000 f939 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80029d2:	22a1      	movs	r2, #161	; 0xa1
 80029d4:	2100      	movs	r1, #0
 80029d6:	2078      	movs	r0, #120	; 0x78
 80029d8:	f000 f934 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80029dc:	22a6      	movs	r2, #166	; 0xa6
 80029de:	2100      	movs	r1, #0
 80029e0:	2078      	movs	r0, #120	; 0x78
 80029e2:	f000 f92f 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80029e6:	22a8      	movs	r2, #168	; 0xa8
 80029e8:	2100      	movs	r1, #0
 80029ea:	2078      	movs	r0, #120	; 0x78
 80029ec:	f000 f92a 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80029f0:	223f      	movs	r2, #63	; 0x3f
 80029f2:	2100      	movs	r1, #0
 80029f4:	2078      	movs	r0, #120	; 0x78
 80029f6:	f000 f925 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80029fa:	22a4      	movs	r2, #164	; 0xa4
 80029fc:	2100      	movs	r1, #0
 80029fe:	2078      	movs	r0, #120	; 0x78
 8002a00:	f000 f920 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002a04:	22d3      	movs	r2, #211	; 0xd3
 8002a06:	2100      	movs	r1, #0
 8002a08:	2078      	movs	r0, #120	; 0x78
 8002a0a:	f000 f91b 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	2078      	movs	r0, #120	; 0x78
 8002a14:	f000 f916 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a18:	22d5      	movs	r2, #213	; 0xd5
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2078      	movs	r0, #120	; 0x78
 8002a1e:	f000 f911 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002a22:	22f0      	movs	r2, #240	; 0xf0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2078      	movs	r0, #120	; 0x78
 8002a28:	f000 f90c 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002a2c:	22d9      	movs	r2, #217	; 0xd9
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2078      	movs	r0, #120	; 0x78
 8002a32:	f000 f907 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002a36:	2222      	movs	r2, #34	; 0x22
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2078      	movs	r0, #120	; 0x78
 8002a3c:	f000 f902 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002a40:	22da      	movs	r2, #218	; 0xda
 8002a42:	2100      	movs	r1, #0
 8002a44:	2078      	movs	r0, #120	; 0x78
 8002a46:	f000 f8fd 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002a4a:	2212      	movs	r2, #18
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2078      	movs	r0, #120	; 0x78
 8002a50:	f000 f8f8 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002a54:	22db      	movs	r2, #219	; 0xdb
 8002a56:	2100      	movs	r1, #0
 8002a58:	2078      	movs	r0, #120	; 0x78
 8002a5a:	f000 f8f3 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002a5e:	2220      	movs	r2, #32
 8002a60:	2100      	movs	r1, #0
 8002a62:	2078      	movs	r0, #120	; 0x78
 8002a64:	f000 f8ee 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002a68:	228d      	movs	r2, #141	; 0x8d
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2078      	movs	r0, #120	; 0x78
 8002a6e:	f000 f8e9 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002a72:	2214      	movs	r2, #20
 8002a74:	2100      	movs	r1, #0
 8002a76:	2078      	movs	r0, #120	; 0x78
 8002a78:	f000 f8e4 	bl	8002c44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002a7c:	22af      	movs	r2, #175	; 0xaf
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2078      	movs	r0, #120	; 0x78
 8002a82:	f000 f8df 	bl	8002c44 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002a86:	222e      	movs	r2, #46	; 0x2e
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2078      	movs	r0, #120	; 0x78
 8002a8c:	f000 f8da 	bl	8002c44 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f000 f843 	bl	8002b1c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002a96:	f000 f813 	bl	8002ac0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <SSD1306_Init+0x184>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <SSD1306_Init+0x184>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <SSD1306_Init+0x184>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000c14 	.word	0x20000c14
 8002abc:	20000670 	.word	0x20000670

08002ac0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	71fb      	strb	r3, [r7, #7]
 8002aca:	e01d      	b.n	8002b08 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	3b50      	subs	r3, #80	; 0x50
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2078      	movs	r0, #120	; 0x78
 8002ad8:	f000 f8b4 	bl	8002c44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2078      	movs	r0, #120	; 0x78
 8002ae2:	f000 f8af 	bl	8002c44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2078      	movs	r0, #120	; 0x78
 8002aec:	f000 f8aa 	bl	8002c44 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	01db      	lsls	r3, r3, #7
 8002af4:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <SSD1306_UpdateScreen+0x58>)
 8002af6:	441a      	add	r2, r3
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	2140      	movs	r1, #64	; 0x40
 8002afc:	2078      	movs	r0, #120	; 0x78
 8002afe:	f000 f859 	bl	8002bb4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	3301      	adds	r3, #1
 8002b06:	71fb      	strb	r3, [r7, #7]
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b07      	cmp	r3, #7
 8002b0c:	d9de      	bls.n	8002acc <SSD1306_UpdateScreen+0xc>
	}
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000270 	.word	0x20000270

08002b1c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <SSD1306_Fill+0x14>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <SSD1306_Fill+0x16>
 8002b30:	23ff      	movs	r3, #255	; 0xff
 8002b32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b36:	4619      	mov	r1, r3
 8002b38:	4803      	ldr	r0, [pc, #12]	; (8002b48 <SSD1306_Fill+0x2c>)
 8002b3a:	f00b fc8f 	bl	800e45c <memset>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000270 	.word	0x20000270

08002b4c <SSD1306_GotoXY>:
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	460a      	mov	r2, r1
 8002b56:	80fb      	strh	r3, [r7, #6]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002b5c:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <SSD1306_GotoXY+0x28>)
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <SSD1306_GotoXY+0x28>)
 8002b64:	88bb      	ldrh	r3, [r7, #4]
 8002b66:	8053      	strh	r3, [r2, #2]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000670 	.word	0x20000670

08002b78 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff ffcd 	bl	8002b1c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002b82:	f7ff ff9d 	bl	8002ac0 <SSD1306_UpdateScreen>
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <ssd1306_I2C_Init+0x24>)
 8002b94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b96:	e002      	b.n	8002b9e <ssd1306_I2C_Init+0x12>
		p--;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	0003d090 	.word	0x0003d090

08002bb4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b0c7      	sub	sp, #284	; 0x11c
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4639      	mov	r1, r7
 8002bc0:	600a      	str	r2, [r1, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	4622      	mov	r2, r4
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	1dbb      	adds	r3, r7, #6
 8002bcc:	4602      	mov	r2, r0
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	460a      	mov	r2, r1
 8002bd4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	1dba      	adds	r2, r7, #6
 8002bdc:	7812      	ldrb	r2, [r2, #0]
 8002bde:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002be6:	e010      	b.n	8002c0a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002be8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bec:	463a      	mov	r2, r7
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	441a      	add	r2, r3
 8002bf2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	7811      	ldrb	r1, [r2, #0]
 8002bfa:	f107 020c 	add.w	r2, r7, #12
 8002bfe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002c00:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c04:	3301      	adds	r3, #1
 8002c06:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002c0a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	1d3a      	adds	r2, r7, #4
 8002c12:	8812      	ldrh	r2, [r2, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d8e7      	bhi.n	8002be8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002c18:	1dfb      	adds	r3, r7, #7
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	b299      	uxth	r1, r3
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f107 020c 	add.w	r2, r7, #12
 8002c2a:	200a      	movs	r0, #10
 8002c2c:	9000      	str	r0, [sp, #0]
 8002c2e:	4804      	ldr	r0, [pc, #16]	; (8002c40 <ssd1306_I2C_WriteMulti+0x8c>)
 8002c30:	f001 fed0 	bl	80049d4 <HAL_I2C_Master_Transmit>
}
 8002c34:	bf00      	nop
 8002c36:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000c14 	.word	0x20000c14

08002c44 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	71bb      	strb	r3, [r7, #6]
 8002c52:	4613      	mov	r3, r2
 8002c54:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002c5a:	797b      	ldrb	r3, [r7, #5]
 8002c5c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	b299      	uxth	r1, r3
 8002c62:	f107 020c 	add.w	r2, r7, #12
 8002c66:	230a      	movs	r3, #10
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	4803      	ldr	r0, [pc, #12]	; (8002c7c <ssd1306_I2C_Write+0x38>)
 8002c6e:	f001 feb1 	bl	80049d4 <HAL_I2C_Master_Transmit>
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000c14 	.word	0x20000c14

08002c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_MspInit+0x5c>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <HAL_MspInit+0x5c>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6193      	str	r3, [r2, #24]
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_MspInit+0x5c>)
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_MspInit+0x5c>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_MspInit+0x5c>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	61d3      	str	r3, [r2, #28]
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_MspInit+0x5c>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_MspInit+0x60>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_MspInit+0x60>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000

08002ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <HAL_ADC_MspInit+0xbc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d149      	bne.n	8002d98 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_ADC_MspInit+0xc0>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_ADC_MspInit+0xc0>)
 8002d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0e:	6193      	str	r3, [r2, #24]
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_ADC_MspInit+0xc0>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_ADC_MspInit+0xc0>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a20      	ldr	r2, [pc, #128]	; (8002da4 <HAL_ADC_MspInit+0xc0>)
 8002d22:	f043 0308 	orr.w	r3, r3, #8
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <HAL_ADC_MspInit+0xc0>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d34:	2303      	movs	r3, #3
 8002d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3c:	f107 0310 	add.w	r3, r7, #16
 8002d40:	4619      	mov	r1, r3
 8002d42:	4819      	ldr	r0, [pc, #100]	; (8002da8 <HAL_ADC_MspInit+0xc4>)
 8002d44:	f001 fb66 	bl	8004414 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d4a:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_ADC_MspInit+0xcc>)
 8002d4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d5c:	2280      	movs	r2, #128	; 0x80
 8002d5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d72:	2220      	movs	r2, #32
 8002d74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d7c:	480b      	ldr	r0, [pc, #44]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d7e:	f001 f8ab 	bl	8003ed8 <HAL_DMA_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002d88:	f7ff fd0a 	bl	80027a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a07      	ldr	r2, [pc, #28]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d90:	621a      	str	r2, [r3, #32]
 8002d92:	4a06      	ldr	r2, [pc, #24]	; (8002dac <HAL_ADC_MspInit+0xc8>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d98:	bf00      	nop
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40012400 	.word	0x40012400
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010c00 	.word	0x40010c00
 8002dac:	20000d5c 	.word	0x20000d5c
 8002db0:	40020008 	.word	0x40020008

08002db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 0318 	add.w	r3, r7, #24
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2b      	ldr	r2, [pc, #172]	; (8002e7c <HAL_I2C_MspInit+0xc8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d124      	bne.n	8002e1e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002dda:	f043 0308 	orr.w	r3, r3, #8
 8002dde:	6193      	str	r3, [r2, #24]
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dec:	23c0      	movs	r3, #192	; 0xc0
 8002dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df0:	2312      	movs	r3, #18
 8002df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df8:	f107 0318 	add.w	r3, r7, #24
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4821      	ldr	r0, [pc, #132]	; (8002e84 <HAL_I2C_MspInit+0xd0>)
 8002e00:	f001 fb08 	bl	8004414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e0e:	61d3      	str	r3, [r2, #28]
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e1c:	e029      	b.n	8002e72 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_I2C_MspInit+0xd4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d124      	bne.n	8002e72 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e2e:	f043 0308 	orr.w	r3, r3, #8
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e46:	2312      	movs	r3, #18
 8002e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4e:	f107 0318 	add.w	r3, r7, #24
 8002e52:	4619      	mov	r1, r3
 8002e54:	480b      	ldr	r0, [pc, #44]	; (8002e84 <HAL_I2C_MspInit+0xd0>)
 8002e56:	f001 fadd 	bl	8004414 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e64:	61d3      	str	r3, [r2, #28]
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_I2C_MspInit+0xcc>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	; 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40005400 	.word	0x40005400
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40010c00 	.word	0x40010c00
 8002e88:	40005800 	.word	0x40005800

08002e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_SPI_MspInit+0x88>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d12f      	bne.n	8002f0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eb6:	6193      	str	r3, [r2, #24]
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6193      	str	r3, [r2, #24]
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_SPI_MspInit+0x8c>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SC_Pin|GPIO_PIN_7;
 8002edc:	23a0      	movs	r3, #160	; 0xa0
 8002ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	4619      	mov	r1, r3
 8002eee:	480b      	ldr	r0, [pc, #44]	; (8002f1c <HAL_SPI_MspInit+0x90>)
 8002ef0:	f001 fa90 	bl	8004414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	4619      	mov	r1, r3
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <HAL_SPI_MspInit+0x90>)
 8002f08:	f001 fa84 	bl	8004414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f0c:	bf00      	nop
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40013000 	.word	0x40013000
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40010800 	.word	0x40010800

08002f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d10c      	bne.n	8002f4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_TIM_Base_MspInit+0x68>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <HAL_TIM_Base_MspInit+0x68>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	61d3      	str	r3, [r2, #28]
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_TIM_Base_MspInit+0x68>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f4a:	e018      	b.n	8002f7e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0e      	ldr	r2, [pc, #56]	; (8002f8c <HAL_TIM_Base_MspInit+0x6c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d113      	bne.n	8002f7e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <HAL_TIM_Base_MspInit+0x68>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_TIM_Base_MspInit+0x68>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	61d3      	str	r3, [r2, #28]
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_TIM_Base_MspInit+0x68>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	201e      	movs	r0, #30
 8002f74:	f000 ff79 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f78:	201e      	movs	r0, #30
 8002f7a:	f000 ff92 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40000800 	.word	0x40000800

08002f90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <HAL_TIM_PWM_MspInit+0x34>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10b      	bne.n	8002fba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_TIM_PWM_MspInit+0x38>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4a08      	ldr	r2, [pc, #32]	; (8002fc8 <HAL_TIM_PWM_MspInit+0x38>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	61d3      	str	r3, [r2, #28]
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_TIM_PWM_MspInit+0x38>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d118      	bne.n	800301e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_TIM_MspPostInit+0xb8>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a24      	ldr	r2, [pc, #144]	; (8003084 <HAL_TIM_MspPostInit+0xb8>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_TIM_MspPostInit+0xb8>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003004:	2301      	movs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2302      	movs	r3, #2
 800300e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	481c      	ldr	r0, [pc, #112]	; (8003088 <HAL_TIM_MspPostInit+0xbc>)
 8003018:	f001 f9fc 	bl	8004414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800301c:	e02e      	b.n	800307c <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1a      	ldr	r2, [pc, #104]	; (800308c <HAL_TIM_MspPostInit+0xc0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d129      	bne.n	800307c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_TIM_MspPostInit+0xb8>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4a15      	ldr	r2, [pc, #84]	; (8003084 <HAL_TIM_MspPostInit+0xb8>)
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	6193      	str	r3, [r2, #24]
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_TIM_MspPostInit+0xb8>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003040:	2320      	movs	r3, #32
 8003042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003048:	2302      	movs	r3, #2
 800304a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4619      	mov	r1, r3
 8003052:	480f      	ldr	r0, [pc, #60]	; (8003090 <HAL_TIM_MspPostInit+0xc4>)
 8003054:	f001 f9de 	bl	8004414 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_TIM_MspPostInit+0xc8>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	4a07      	ldr	r2, [pc, #28]	; (8003094 <HAL_TIM_MspPostInit+0xc8>)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	6053      	str	r3, [r2, #4]
}
 800307c:	bf00      	nop
 800307e:	3728      	adds	r7, #40	; 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	40010800 	.word	0x40010800
 800308c:	40000400 	.word	0x40000400
 8003090:	40010c00 	.word	0x40010c00
 8003094:	40010000 	.word	0x40010000

08003098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_UART_MspInit+0x98>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d137      	bne.n	8003128 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030b8:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_UART_MspInit+0x9c>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <HAL_UART_MspInit+0x9c>)
 80030be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c2:	61d3      	str	r3, [r2, #28]
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <HAL_UART_MspInit+0x9c>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <HAL_UART_MspInit+0x9c>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a17      	ldr	r2, [pc, #92]	; (8003134 <HAL_UART_MspInit+0x9c>)
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_UART_MspInit+0x9c>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030e8:	2304      	movs	r3, #4
 80030ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	4619      	mov	r1, r3
 80030fa:	480f      	ldr	r0, [pc, #60]	; (8003138 <HAL_UART_MspInit+0xa0>)
 80030fc:	f001 f98a 	bl	8004414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003100:	2308      	movs	r3, #8
 8003102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	f107 0310 	add.w	r3, r7, #16
 8003110:	4619      	mov	r1, r3
 8003112:	4809      	ldr	r0, [pc, #36]	; (8003138 <HAL_UART_MspInit+0xa0>)
 8003114:	f001 f97e 	bl	8004414 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2100      	movs	r1, #0
 800311c:	2026      	movs	r0, #38	; 0x26
 800311e:	f000 fea4 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003122:	2026      	movs	r0, #38	; 0x26
 8003124:	f000 febd 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40004400 	.word	0x40004400
 8003134:	40021000 	.word	0x40021000
 8003138:	40010800 	.word	0x40010800

0800313c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <NMI_Handler+0x4>

08003142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003146:	e7fe      	b.n	8003146 <HardFault_Handler+0x4>

08003148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800314c:	e7fe      	b.n	800314c <MemManage_Handler+0x4>

0800314e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003152:	e7fe      	b.n	8003152 <BusFault_Handler+0x4>

08003154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003158:	e7fe      	b.n	8003158 <UsageFault_Handler+0x4>

0800315a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003182:	f000 f8e3 	bl	800334c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <DMA1_Channel1_IRQHandler+0x10>)
 8003192:	f001 f80b 	bl	80041ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000d5c 	.word	0x20000d5c

080031a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	//Uart_isr(&huart2);
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80031a6:	f003 f9de 	bl	8006566 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20001cdc 	.word	0x20001cdc

080031b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031b8:	4807      	ldr	r0, [pc, #28]	; (80031d8 <TIM4_IRQHandler+0x24>)
 80031ba:	f005 fc1f 	bl	80089fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  timer_val++;
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <TIM4_IRQHandler+0x28>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <TIM4_IRQHandler+0x28>)
 80031c8:	801a      	strh	r2, [r3, #0]
  time_work++;
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <TIM4_IRQHandler+0x2c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	4a03      	ldr	r2, [pc, #12]	; (80031e0 <TIM4_IRQHandler+0x2c>)
 80031d2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000bcc 	.word	0x20000bcc
 80031dc:	20000268 	.word	0x20000268
 80031e0:	2000026c 	.word	0x2000026c

080031e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 80031e8:	4803      	ldr	r0, [pc, #12]	; (80031f8 <USART2_IRQHandler+0x14>)
 80031ea:	f7fe f80f 	bl	800120c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031ee:	4802      	ldr	r0, [pc, #8]	; (80031f8 <USART2_IRQHandler+0x14>)
 80031f0:	f006 f9fa 	bl	80095e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200008bc 	.word	0x200008bc

080031fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <_sbrk+0x5c>)
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <_sbrk+0x60>)
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003210:	4b13      	ldr	r3, [pc, #76]	; (8003260 <_sbrk+0x64>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <_sbrk+0x64>)
 800321a:	4a12      	ldr	r2, [pc, #72]	; (8003264 <_sbrk+0x68>)
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <_sbrk+0x64>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	429a      	cmp	r2, r3
 800322a:	d207      	bcs.n	800323c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800322c:	f00b f8ec 	bl	800e408 <__errno>
 8003230:	4603      	mov	r3, r0
 8003232:	220c      	movs	r2, #12
 8003234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800323a:	e009      	b.n	8003250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800323c:	4b08      	ldr	r3, [pc, #32]	; (8003260 <_sbrk+0x64>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003242:	4b07      	ldr	r3, [pc, #28]	; (8003260 <_sbrk+0x64>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <_sbrk+0x64>)
 800324c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20005000 	.word	0x20005000
 800325c:	00000400 	.word	0x00000400
 8003260:	20000678 	.word	0x20000678
 8003264:	20001fd8 	.word	0x20001fd8

08003268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003274:	480c      	ldr	r0, [pc, #48]	; (80032a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003276:	490d      	ldr	r1, [pc, #52]	; (80032ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003278:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800327c:	e002      	b.n	8003284 <LoopCopyDataInit>

0800327e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800327e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003282:	3304      	adds	r3, #4

08003284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003288:	d3f9      	bcc.n	800327e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328a:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800328c:	4c0a      	ldr	r4, [pc, #40]	; (80032b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800328e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003290:	e001      	b.n	8003296 <LoopFillZerobss>

08003292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003294:	3204      	adds	r2, #4

08003296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003298:	d3fb      	bcc.n	8003292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800329a:	f7ff ffe5 	bl	8003268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800329e:	f00b f8b9 	bl	800e414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032a2:	f7fe fd41 	bl	8001d28 <main>
  bx lr
 80032a6:	4770      	bx	lr
  ldr r0, =_sdata
 80032a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032ac:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80032b0:	0800ee78 	.word	0x0800ee78
  ldr r2, =_sbss
 80032b4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80032b8:	20001fd8 	.word	0x20001fd8

080032bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032bc:	e7fe      	b.n	80032bc <ADC1_2_IRQHandler>
	...

080032c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_Init+0x28>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_Init+0x28>)
 80032ca:	f043 0310 	orr.w	r3, r3, #16
 80032ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d0:	2003      	movs	r0, #3
 80032d2:	f000 fdbf 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f000 f808 	bl	80032ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032dc:	f7ff fcd0 	bl	8002c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40022000 	.word	0x40022000

080032ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_InitTick+0x54>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_InitTick+0x58>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003302:	fbb3 f3f1 	udiv	r3, r3, r1
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fdd7 	bl	8003ebe <HAL_SYSTICK_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e00e      	b.n	8003338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b0f      	cmp	r3, #15
 800331e:	d80a      	bhi.n	8003336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003320:	2200      	movs	r2, #0
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003328:	f000 fd9f 	bl	8003e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800332c:	4a06      	ldr	r2, [pc, #24]	; (8003348 <HAL_InitTick+0x5c>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000000 	.word	0x20000000
 8003344:	20000008 	.word	0x20000008
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_IncTick+0x1c>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_IncTick+0x20>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4413      	add	r3, r2
 800335c:	4a03      	ldr	r2, [pc, #12]	; (800336c <HAL_IncTick+0x20>)
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	20000008 	.word	0x20000008
 800336c:	20000ea4 	.word	0x20000ea4

08003370 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  return uwTick;
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <HAL_GetTick+0x10>)
 8003376:	681b      	ldr	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	20000ea4 	.word	0x20000ea4

08003384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800338c:	f7ff fff0 	bl	8003370 <HAL_GetTick>
 8003390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800339c:	d005      	beq.n	80033aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_Delay+0x44>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033aa:	bf00      	nop
 80033ac:	f7ff ffe0 	bl	8003370 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d8f7      	bhi.n	80033ac <HAL_Delay+0x28>
  {
  }
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000008 	.word	0x20000008

080033cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0be      	b.n	800356c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff fc6a 	bl	8002ce4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 faff 	bl	8003a14 <ADC_ConversionStop_Disable>
 8003416:	4603      	mov	r3, r0
 8003418:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 8099 	bne.w	800355a <HAL_ADC_Init+0x18e>
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 8095 	bne.w	800355a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003438:	f023 0302 	bic.w	r3, r3, #2
 800343c:	f043 0202 	orr.w	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800344c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	7b1b      	ldrb	r3, [r3, #12]
 8003452:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003454:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	4313      	orrs	r3, r2
 800345a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003464:	d003      	beq.n	800346e <HAL_ADC_Init+0xa2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_ADC_Init+0xa8>
 800346e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003472:	e000      	b.n	8003476 <HAL_ADC_Init+0xaa>
 8003474:	2300      	movs	r3, #0
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7d1b      	ldrb	r3, [r3, #20]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d119      	bne.n	80034b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7b1b      	ldrb	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	3b01      	subs	r3, #1
 8003492:	035a      	lsls	r2, r3, #13
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	e00b      	b.n	80034b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <HAL_ADC_Init+0x1a8>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e8:	d003      	beq.n	80034f2 <HAL_ADC_Init+0x126>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d104      	bne.n	80034fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	051b      	lsls	r3, r3, #20
 80034fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	430a      	orrs	r2, r1
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <HAL_ADC_Init+0x1ac>)
 8003518:	4013      	ands	r3, r2
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d10b      	bne.n	8003538 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003536:	e018      	b.n	800356a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	f023 0312 	bic.w	r3, r3, #18
 8003540:	f043 0210 	orr.w	r2, r3, #16
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003558:	e007      	b.n	800356a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	ffe1f7fd 	.word	0xffe1f7fd
 8003578:	ff1f0efe 	.word	0xff1f0efe

0800357c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a64      	ldr	r2, [pc, #400]	; (8003724 <HAL_ADC_Start_DMA+0x1a8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_ADC_Start_DMA+0x24>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a63      	ldr	r2, [pc, #396]	; (8003728 <HAL_ADC_Start_DMA+0x1ac>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d106      	bne.n	80035ae <HAL_ADC_Start_DMA+0x32>
 80035a0:	4b60      	ldr	r3, [pc, #384]	; (8003724 <HAL_ADC_Start_DMA+0x1a8>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f040 80b3 	bne.w	8003714 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_Start_DMA+0x40>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e0ae      	b.n	800371a <HAL_ADC_Start_DMA+0x19e>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f9cb 	bl	8003960 <ADC_Enable>
 80035ca:	4603      	mov	r3, r0
 80035cc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 809a 	bne.w	800370a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a4e      	ldr	r2, [pc, #312]	; (8003728 <HAL_ADC_Start_DMA+0x1ac>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d105      	bne.n	8003600 <HAL_ADC_Start_DMA+0x84>
 80035f4:	4b4b      	ldr	r3, [pc, #300]	; (8003724 <HAL_ADC_Start_DMA+0x1a8>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d115      	bne.n	800362c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	2b00      	cmp	r3, #0
 8003618:	d026      	beq.n	8003668 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003622:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800362a:	e01d      	b.n	8003668 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a39      	ldr	r2, [pc, #228]	; (8003724 <HAL_ADC_Start_DMA+0x1a8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_ADC_Start_DMA+0xd0>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a38      	ldr	r2, [pc, #224]	; (8003728 <HAL_ADC_Start_DMA+0x1ac>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d10d      	bne.n	8003668 <HAL_ADC_Start_DMA+0xec>
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <HAL_ADC_Start_DMA+0x1a8>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003660:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d006      	beq.n	8003682 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f023 0206 	bic.w	r2, r3, #6
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003680:	e002      	b.n	8003688 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a25      	ldr	r2, [pc, #148]	; (800372c <HAL_ADC_Start_DMA+0x1b0>)
 8003696:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a24      	ldr	r2, [pc, #144]	; (8003730 <HAL_ADC_Start_DMA+0x1b4>)
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a23      	ldr	r2, [pc, #140]	; (8003734 <HAL_ADC_Start_DMA+0x1b8>)
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0202 	mvn.w	r2, #2
 80036b0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a18      	ldr	r0, [r3, #32]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	334c      	adds	r3, #76	; 0x4c
 80036cc:	4619      	mov	r1, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f000 fc5b 	bl	8003f8c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036e4:	d108      	bne.n	80036f8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80036f4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80036f6:	e00f      	b.n	8003718 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003706:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003708:	e006      	b.n	8003718 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003712:	e001      	b.n	8003718 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003718:	7dfb      	ldrb	r3, [r7, #23]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40012400 	.word	0x40012400
 8003728:	40012800 	.word	0x40012800
 800372c:	08003a97 	.word	0x08003a97
 8003730:	08003b13 	.word	0x08003b13
 8003734:	08003b2f 	.word	0x08003b2f

08003738 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
	...

08003770 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x20>
 800378c:	2302      	movs	r3, #2
 800378e:	e0dc      	b.n	800394a <HAL_ADC_ConfigChannel+0x1da>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b06      	cmp	r3, #6
 800379e:	d81c      	bhi.n	80037da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	3b05      	subs	r3, #5
 80037b2:	221f      	movs	r2, #31
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	4019      	ands	r1, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	3b05      	subs	r3, #5
 80037cc:	fa00 f203 	lsl.w	r2, r0, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	635a      	str	r2, [r3, #52]	; 0x34
 80037d8:	e03c      	b.n	8003854 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d81c      	bhi.n	800381c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	3b23      	subs	r3, #35	; 0x23
 80037f4:	221f      	movs	r2, #31
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	4019      	ands	r1, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	3b23      	subs	r3, #35	; 0x23
 800380e:	fa00 f203 	lsl.w	r2, r0, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
 800381a:	e01b      	b.n	8003854 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	3b41      	subs	r3, #65	; 0x41
 800382e:	221f      	movs	r2, #31
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	4019      	ands	r1, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	3b41      	subs	r3, #65	; 0x41
 8003848:	fa00 f203 	lsl.w	r2, r0, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b09      	cmp	r3, #9
 800385a:	d91c      	bls.n	8003896 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68d9      	ldr	r1, [r3, #12]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4413      	add	r3, r2
 800386c:	3b1e      	subs	r3, #30
 800386e:	2207      	movs	r2, #7
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	4019      	ands	r1, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6898      	ldr	r0, [r3, #8]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	3b1e      	subs	r3, #30
 8003888:	fa00 f203 	lsl.w	r2, r0, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	60da      	str	r2, [r3, #12]
 8003894:	e019      	b.n	80038ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6919      	ldr	r1, [r3, #16]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	2207      	movs	r2, #7
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	4019      	ands	r1, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6898      	ldr	r0, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	fa00 f203 	lsl.w	r2, r0, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d003      	beq.n	80038da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80038d6:	2b11      	cmp	r3, #17
 80038d8:	d132      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_ADC_ConfigChannel+0x1e4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d125      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d126      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003900:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b10      	cmp	r3, #16
 8003908:	d11a      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <HAL_ADC_ConfigChannel+0x1e8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a13      	ldr	r2, [pc, #76]	; (800395c <HAL_ADC_ConfigChannel+0x1ec>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	0c9a      	lsrs	r2, r3, #18
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003920:	e002      	b.n	8003928 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3b01      	subs	r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f9      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x1b2>
 800392e:	e007      	b.n	8003940 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	40012400 	.word	0x40012400
 8003958:	20000000 	.word	0x20000000
 800395c:	431bde83 	.word	0x431bde83

08003960 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d040      	beq.n	8003a00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800398e:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <ADC_Enable+0xac>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <ADC_Enable+0xb0>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	0c9b      	lsrs	r3, r3, #18
 800399a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800399c:	e002      	b.n	80039a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f9      	bne.n	800399e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039aa:	f7ff fce1 	bl	8003370 <HAL_GetTick>
 80039ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80039b0:	e01f      	b.n	80039f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039b2:	f7ff fcdd 	bl	8003370 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d918      	bls.n	80039f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d011      	beq.n	80039f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	f043 0210 	orr.w	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e007      	b.n	8003a02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d1d8      	bne.n	80039b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000000 	.word	0x20000000
 8003a10:	431bde83 	.word	0x431bde83

08003a14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d12e      	bne.n	8003a8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a3e:	f7ff fc97 	bl	8003370 <HAL_GetTick>
 8003a42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a44:	e01b      	b.n	8003a7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a46:	f7ff fc93 	bl	8003370 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d914      	bls.n	8003a7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10d      	bne.n	8003a7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	f043 0210 	orr.w	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e007      	b.n	8003a8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d0dc      	beq.n	8003a46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d127      	bne.n	8003b00 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ac6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003aca:	d115      	bne.n	8003af8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d111      	bne.n	8003af8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d105      	bne.n	8003af8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fe1d 	bl	8003738 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003afe:	e004      	b.n	8003b0a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff fe12 	bl	800374a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	f043 0204 	orr.w	r2, r3, #4
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7ff fe01 	bl	800375c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADCEx_Calibration_Start+0x1e>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e095      	b.n	8003cae <HAL_ADCEx_Calibration_Start+0x14a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ff42 	bl	8003a14 <ADC_ConversionStop_Disable>
 8003b90:	4603      	mov	r3, r0
 8003b92:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 8084 	bne.w	8003ca4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ba4:	f023 0302 	bic.w	r3, r3, #2
 8003ba8:	f043 0202 	orr.w	r2, r3, #2
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003bb0:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <HAL_ADCEx_Calibration_Start+0x154>)
 8003bb2:	681c      	ldr	r4, [r3, #0]
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f004 fd3b 	bl	8008630 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003bc0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003bc2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003bc4:	e002      	b.n	8003bcc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f9      	bne.n	8003bc6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fec4 	bl	8003960 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0208 	orr.w	r2, r2, #8
 8003be6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003be8:	f7ff fbc2 	bl	8003370 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003bee:	e01b      	b.n	8003c28 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003bf0:	f7ff fbbe 	bl	8003370 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b0a      	cmp	r3, #10
 8003bfc:	d914      	bls.n	8003c28 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	f023 0312 	bic.w	r3, r3, #18
 8003c14:	f043 0210 	orr.w	r2, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e042      	b.n	8003cae <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1dc      	bne.n	8003bf0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0204 	orr.w	r2, r2, #4
 8003c44:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003c46:	f7ff fb93 	bl	8003370 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003c4c:	e01b      	b.n	8003c86 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c4e:	f7ff fb8f 	bl	8003370 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b0a      	cmp	r3, #10
 8003c5a:	d914      	bls.n	8003c86 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	f023 0312 	bic.w	r3, r3, #18
 8003c72:	f043 0210 	orr.w	r2, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e013      	b.n	8003cae <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1dc      	bne.n	8003c4e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f023 0303 	bic.w	r3, r3, #3
 8003c9c:	f043 0201 	orr.w	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd90      	pop	{r4, r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000000 	.word	0x20000000

08003cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <__NVIC_SetPriorityGrouping+0x44>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	60d3      	str	r3, [r2, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <__NVIC_GetPriorityGrouping+0x18>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	f003 0307 	and.w	r3, r3, #7
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	db0b      	blt.n	8003d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	f003 021f 	and.w	r2, r3, #31
 8003d38:	4906      	ldr	r1, [pc, #24]	; (8003d54 <__NVIC_EnableIRQ+0x34>)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2001      	movs	r0, #1
 8003d42:	fa00 f202 	lsl.w	r2, r0, r2
 8003d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	e000e100 	.word	0xe000e100

08003d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	6039      	str	r1, [r7, #0]
 8003d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	db0a      	blt.n	8003d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	490c      	ldr	r1, [pc, #48]	; (8003da4 <__NVIC_SetPriority+0x4c>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	0112      	lsls	r2, r2, #4
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d80:	e00a      	b.n	8003d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4908      	ldr	r1, [pc, #32]	; (8003da8 <__NVIC_SetPriority+0x50>)
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	440b      	add	r3, r1
 8003d96:	761a      	strb	r2, [r3, #24]
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000e100 	.word	0xe000e100
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f1c3 0307 	rsb	r3, r3, #7
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	bf28      	it	cs
 8003dca:	2304      	movcs	r3, #4
 8003dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2b06      	cmp	r3, #6
 8003dd4:	d902      	bls.n	8003ddc <NVIC_EncodePriority+0x30>
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3b03      	subs	r3, #3
 8003dda:	e000      	b.n	8003dde <NVIC_EncodePriority+0x32>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43da      	mvns	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	401a      	ands	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	43d9      	mvns	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e04:	4313      	orrs	r3, r2
         );
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e20:	d301      	bcc.n	8003e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00f      	b.n	8003e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <SysTick_Config+0x40>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e2e:	210f      	movs	r1, #15
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e34:	f7ff ff90 	bl	8003d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <SysTick_Config+0x40>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <SysTick_Config+0x40>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010

08003e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff2d 	bl	8003cbc <__NVIC_SetPriorityGrouping>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e7c:	f7ff ff42 	bl	8003d04 <__NVIC_GetPriorityGrouping>
 8003e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff90 	bl	8003dac <NVIC_EncodePriority>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5f 	bl	8003d58 <__NVIC_SetPriority>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff35 	bl	8003d20 <__NVIC_EnableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ffa2 	bl	8003e10 <SysTick_Config>
 8003ecc:	4603      	mov	r3, r0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e043      	b.n	8003f76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <HAL_DMA_Init+0xa8>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <HAL_DMA_Init+0xac>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_DMA_Init+0xb0>)
 8003f0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	bffdfff8 	.word	0xbffdfff8
 8003f84:	cccccccd 	.word	0xcccccccd
 8003f88:	40020000 	.word	0x40020000

08003f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_DMA_Start_IT+0x20>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e04a      	b.n	8004042 <HAL_DMA_Start_IT+0xb6>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d13a      	bne.n	8004034 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f9e8 	bl	80043b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 020e 	orr.w	r2, r2, #14
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e00f      	b.n	8004022 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0204 	bic.w	r2, r2, #4
 8004010:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 020a 	orr.w	r2, r2, #10
 8004020:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e005      	b.n	8004040 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800403c:	2302      	movs	r3, #2
 800403e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800405c:	2b02      	cmp	r3, #2
 800405e:	d008      	beq.n	8004072 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2204      	movs	r2, #4
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e020      	b.n	80040b4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 020e 	bic.w	r2, r2, #14
 8004080:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	2101      	movs	r1, #1
 800409c:	fa01 f202 	lsl.w	r2, r1, r2
 80040a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d005      	beq.n	80040e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2204      	movs	r2, #4
 80040da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	e051      	b.n	8004186 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 020e 	bic.w	r2, r2, #14
 80040f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a22      	ldr	r2, [pc, #136]	; (8004190 <HAL_DMA_Abort_IT+0xd0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d029      	beq.n	8004160 <HAL_DMA_Abort_IT+0xa0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a20      	ldr	r2, [pc, #128]	; (8004194 <HAL_DMA_Abort_IT+0xd4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMA_Abort_IT+0x9c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1f      	ldr	r2, [pc, #124]	; (8004198 <HAL_DMA_Abort_IT+0xd8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01a      	beq.n	8004156 <HAL_DMA_Abort_IT+0x96>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1d      	ldr	r2, [pc, #116]	; (800419c <HAL_DMA_Abort_IT+0xdc>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d012      	beq.n	8004150 <HAL_DMA_Abort_IT+0x90>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <HAL_DMA_Abort_IT+0xe0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00a      	beq.n	800414a <HAL_DMA_Abort_IT+0x8a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1a      	ldr	r2, [pc, #104]	; (80041a4 <HAL_DMA_Abort_IT+0xe4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d102      	bne.n	8004144 <HAL_DMA_Abort_IT+0x84>
 800413e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004142:	e00e      	b.n	8004162 <HAL_DMA_Abort_IT+0xa2>
 8004144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004148:	e00b      	b.n	8004162 <HAL_DMA_Abort_IT+0xa2>
 800414a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800414e:	e008      	b.n	8004162 <HAL_DMA_Abort_IT+0xa2>
 8004150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004154:	e005      	b.n	8004162 <HAL_DMA_Abort_IT+0xa2>
 8004156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800415a:	e002      	b.n	8004162 <HAL_DMA_Abort_IT+0xa2>
 800415c:	2310      	movs	r3, #16
 800415e:	e000      	b.n	8004162 <HAL_DMA_Abort_IT+0xa2>
 8004160:	2301      	movs	r3, #1
 8004162:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <HAL_DMA_Abort_IT+0xe8>)
 8004164:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
    } 
  }
  return status;
 8004186:	7bfb      	ldrb	r3, [r7, #15]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40020008 	.word	0x40020008
 8004194:	4002001c 	.word	0x4002001c
 8004198:	40020030 	.word	0x40020030
 800419c:	40020044 	.word	0x40020044
 80041a0:	40020058 	.word	0x40020058
 80041a4:	4002006c 	.word	0x4002006c
 80041a8:	40020000 	.word	0x40020000

080041ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	2204      	movs	r2, #4
 80041ca:	409a      	lsls	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d04f      	beq.n	8004274 <HAL_DMA_IRQHandler+0xc8>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d04a      	beq.n	8004274 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0204 	bic.w	r2, r2, #4
 80041fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a66      	ldr	r2, [pc, #408]	; (800439c <HAL_DMA_IRQHandler+0x1f0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d029      	beq.n	800425a <HAL_DMA_IRQHandler+0xae>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a65      	ldr	r2, [pc, #404]	; (80043a0 <HAL_DMA_IRQHandler+0x1f4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_DMA_IRQHandler+0xaa>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a63      	ldr	r2, [pc, #396]	; (80043a4 <HAL_DMA_IRQHandler+0x1f8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01a      	beq.n	8004250 <HAL_DMA_IRQHandler+0xa4>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a62      	ldr	r2, [pc, #392]	; (80043a8 <HAL_DMA_IRQHandler+0x1fc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d012      	beq.n	800424a <HAL_DMA_IRQHandler+0x9e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a60      	ldr	r2, [pc, #384]	; (80043ac <HAL_DMA_IRQHandler+0x200>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00a      	beq.n	8004244 <HAL_DMA_IRQHandler+0x98>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a5f      	ldr	r2, [pc, #380]	; (80043b0 <HAL_DMA_IRQHandler+0x204>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d102      	bne.n	800423e <HAL_DMA_IRQHandler+0x92>
 8004238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800423c:	e00e      	b.n	800425c <HAL_DMA_IRQHandler+0xb0>
 800423e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004242:	e00b      	b.n	800425c <HAL_DMA_IRQHandler+0xb0>
 8004244:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004248:	e008      	b.n	800425c <HAL_DMA_IRQHandler+0xb0>
 800424a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800424e:	e005      	b.n	800425c <HAL_DMA_IRQHandler+0xb0>
 8004250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004254:	e002      	b.n	800425c <HAL_DMA_IRQHandler+0xb0>
 8004256:	2340      	movs	r3, #64	; 0x40
 8004258:	e000      	b.n	800425c <HAL_DMA_IRQHandler+0xb0>
 800425a:	2304      	movs	r3, #4
 800425c:	4a55      	ldr	r2, [pc, #340]	; (80043b4 <HAL_DMA_IRQHandler+0x208>)
 800425e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8094 	beq.w	8004392 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004272:	e08e      	b.n	8004392 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2202      	movs	r2, #2
 800427a:	409a      	lsls	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d056      	beq.n	8004332 <HAL_DMA_IRQHandler+0x186>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d051      	beq.n	8004332 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 020a 	bic.w	r2, r2, #10
 80042aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a38      	ldr	r2, [pc, #224]	; (800439c <HAL_DMA_IRQHandler+0x1f0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d029      	beq.n	8004312 <HAL_DMA_IRQHandler+0x166>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a37      	ldr	r2, [pc, #220]	; (80043a0 <HAL_DMA_IRQHandler+0x1f4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_DMA_IRQHandler+0x162>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a35      	ldr	r2, [pc, #212]	; (80043a4 <HAL_DMA_IRQHandler+0x1f8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01a      	beq.n	8004308 <HAL_DMA_IRQHandler+0x15c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a34      	ldr	r2, [pc, #208]	; (80043a8 <HAL_DMA_IRQHandler+0x1fc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d012      	beq.n	8004302 <HAL_DMA_IRQHandler+0x156>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a32      	ldr	r2, [pc, #200]	; (80043ac <HAL_DMA_IRQHandler+0x200>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00a      	beq.n	80042fc <HAL_DMA_IRQHandler+0x150>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a31      	ldr	r2, [pc, #196]	; (80043b0 <HAL_DMA_IRQHandler+0x204>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d102      	bne.n	80042f6 <HAL_DMA_IRQHandler+0x14a>
 80042f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042f4:	e00e      	b.n	8004314 <HAL_DMA_IRQHandler+0x168>
 80042f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042fa:	e00b      	b.n	8004314 <HAL_DMA_IRQHandler+0x168>
 80042fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004300:	e008      	b.n	8004314 <HAL_DMA_IRQHandler+0x168>
 8004302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004306:	e005      	b.n	8004314 <HAL_DMA_IRQHandler+0x168>
 8004308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800430c:	e002      	b.n	8004314 <HAL_DMA_IRQHandler+0x168>
 800430e:	2320      	movs	r3, #32
 8004310:	e000      	b.n	8004314 <HAL_DMA_IRQHandler+0x168>
 8004312:	2302      	movs	r3, #2
 8004314:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <HAL_DMA_IRQHandler+0x208>)
 8004316:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	d034      	beq.n	8004392 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004330:	e02f      	b.n	8004392 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2208      	movs	r2, #8
 8004338:	409a      	lsls	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4013      	ands	r3, r2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d028      	beq.n	8004394 <HAL_DMA_IRQHandler+0x1e8>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d023      	beq.n	8004394 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 020e 	bic.w	r2, r2, #14
 800435a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f202 	lsl.w	r2, r1, r2
 800436a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
    }
  }
  return;
 8004392:	bf00      	nop
 8004394:	bf00      	nop
}
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40020008 	.word	0x40020008
 80043a0:	4002001c 	.word	0x4002001c
 80043a4:	40020030 	.word	0x40020030
 80043a8:	40020044 	.word	0x40020044
 80043ac:	40020058 	.word	0x40020058
 80043b0:	4002006c 	.word	0x4002006c
 80043b4:	40020000 	.word	0x40020000

080043b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	2101      	movs	r1, #1
 80043d0:	fa01 f202 	lsl.w	r2, r1, r2
 80043d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d108      	bne.n	80043f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043f6:	e007      	b.n	8004408 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
	...

08004414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004414:	b480      	push	{r7}
 8004416:	b08b      	sub	sp, #44	; 0x2c
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004422:	2300      	movs	r3, #0
 8004424:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004426:	e169      	b.n	80046fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004428:	2201      	movs	r2, #1
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	429a      	cmp	r2, r3
 8004442:	f040 8158 	bne.w	80046f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4a9a      	ldr	r2, [pc, #616]	; (80046b4 <HAL_GPIO_Init+0x2a0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d05e      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 8004450:	4a98      	ldr	r2, [pc, #608]	; (80046b4 <HAL_GPIO_Init+0x2a0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d875      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 8004456:	4a98      	ldr	r2, [pc, #608]	; (80046b8 <HAL_GPIO_Init+0x2a4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d058      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 800445c:	4a96      	ldr	r2, [pc, #600]	; (80046b8 <HAL_GPIO_Init+0x2a4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d86f      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 8004462:	4a96      	ldr	r2, [pc, #600]	; (80046bc <HAL_GPIO_Init+0x2a8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d052      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 8004468:	4a94      	ldr	r2, [pc, #592]	; (80046bc <HAL_GPIO_Init+0x2a8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d869      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 800446e:	4a94      	ldr	r2, [pc, #592]	; (80046c0 <HAL_GPIO_Init+0x2ac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d04c      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 8004474:	4a92      	ldr	r2, [pc, #584]	; (80046c0 <HAL_GPIO_Init+0x2ac>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d863      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 800447a:	4a92      	ldr	r2, [pc, #584]	; (80046c4 <HAL_GPIO_Init+0x2b0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d046      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 8004480:	4a90      	ldr	r2, [pc, #576]	; (80046c4 <HAL_GPIO_Init+0x2b0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d85d      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 8004486:	2b12      	cmp	r3, #18
 8004488:	d82a      	bhi.n	80044e0 <HAL_GPIO_Init+0xcc>
 800448a:	2b12      	cmp	r3, #18
 800448c:	d859      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_GPIO_Init+0x80>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	0800450f 	.word	0x0800450f
 8004498:	080044e9 	.word	0x080044e9
 800449c:	080044fb 	.word	0x080044fb
 80044a0:	0800453d 	.word	0x0800453d
 80044a4:	08004543 	.word	0x08004543
 80044a8:	08004543 	.word	0x08004543
 80044ac:	08004543 	.word	0x08004543
 80044b0:	08004543 	.word	0x08004543
 80044b4:	08004543 	.word	0x08004543
 80044b8:	08004543 	.word	0x08004543
 80044bc:	08004543 	.word	0x08004543
 80044c0:	08004543 	.word	0x08004543
 80044c4:	08004543 	.word	0x08004543
 80044c8:	08004543 	.word	0x08004543
 80044cc:	08004543 	.word	0x08004543
 80044d0:	08004543 	.word	0x08004543
 80044d4:	08004543 	.word	0x08004543
 80044d8:	080044f1 	.word	0x080044f1
 80044dc:	08004505 	.word	0x08004505
 80044e0:	4a79      	ldr	r2, [pc, #484]	; (80046c8 <HAL_GPIO_Init+0x2b4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044e6:	e02c      	b.n	8004542 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	623b      	str	r3, [r7, #32]
          break;
 80044ee:	e029      	b.n	8004544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	3304      	adds	r3, #4
 80044f6:	623b      	str	r3, [r7, #32]
          break;
 80044f8:	e024      	b.n	8004544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	3308      	adds	r3, #8
 8004500:	623b      	str	r3, [r7, #32]
          break;
 8004502:	e01f      	b.n	8004544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	330c      	adds	r3, #12
 800450a:	623b      	str	r3, [r7, #32]
          break;
 800450c:	e01a      	b.n	8004544 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004516:	2304      	movs	r3, #4
 8004518:	623b      	str	r3, [r7, #32]
          break;
 800451a:	e013      	b.n	8004544 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d105      	bne.n	8004530 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004524:	2308      	movs	r3, #8
 8004526:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	611a      	str	r2, [r3, #16]
          break;
 800452e:	e009      	b.n	8004544 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004530:	2308      	movs	r3, #8
 8004532:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	615a      	str	r2, [r3, #20]
          break;
 800453a:	e003      	b.n	8004544 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
          break;
 8004540:	e000      	b.n	8004544 <HAL_GPIO_Init+0x130>
          break;
 8004542:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2bff      	cmp	r3, #255	; 0xff
 8004548:	d801      	bhi.n	800454e <HAL_GPIO_Init+0x13a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	e001      	b.n	8004552 <HAL_GPIO_Init+0x13e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2bff      	cmp	r3, #255	; 0xff
 8004558:	d802      	bhi.n	8004560 <HAL_GPIO_Init+0x14c>
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	e002      	b.n	8004566 <HAL_GPIO_Init+0x152>
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	3b08      	subs	r3, #8
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	210f      	movs	r1, #15
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	6a39      	ldr	r1, [r7, #32]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80b1 	beq.w	80046f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004594:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <HAL_GPIO_Init+0x2b8>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	4a4c      	ldr	r2, [pc, #304]	; (80046cc <HAL_GPIO_Init+0x2b8>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6193      	str	r3, [r2, #24]
 80045a0:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_GPIO_Init+0x2b8>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045ac:	4a48      	ldr	r2, [pc, #288]	; (80046d0 <HAL_GPIO_Init+0x2bc>)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	089b      	lsrs	r3, r3, #2
 80045b2:	3302      	adds	r3, #2
 80045b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	220f      	movs	r2, #15
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a40      	ldr	r2, [pc, #256]	; (80046d4 <HAL_GPIO_Init+0x2c0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <HAL_GPIO_Init+0x1ec>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <HAL_GPIO_Init+0x2c4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00d      	beq.n	80045fc <HAL_GPIO_Init+0x1e8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3e      	ldr	r2, [pc, #248]	; (80046dc <HAL_GPIO_Init+0x2c8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <HAL_GPIO_Init+0x1e4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3d      	ldr	r2, [pc, #244]	; (80046e0 <HAL_GPIO_Init+0x2cc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <HAL_GPIO_Init+0x1e0>
 80045f0:	2303      	movs	r3, #3
 80045f2:	e006      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045f4:	2304      	movs	r3, #4
 80045f6:	e004      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e002      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 8004600:	2300      	movs	r3, #0
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	f002 0203 	and.w	r2, r2, #3
 8004608:	0092      	lsls	r2, r2, #2
 800460a:	4093      	lsls	r3, r2
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004612:	492f      	ldr	r1, [pc, #188]	; (80046d0 <HAL_GPIO_Init+0x2bc>)
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	3302      	adds	r3, #2
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800462c:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	492c      	ldr	r1, [pc, #176]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]
 8004638:	e006      	b.n	8004648 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800463a:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	43db      	mvns	r3, r3
 8004642:	4928      	ldr	r1, [pc, #160]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004644:	4013      	ands	r3, r2
 8004646:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	4922      	ldr	r1, [pc, #136]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
 8004660:	e006      	b.n	8004670 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	43db      	mvns	r3, r3
 800466a:	491e      	ldr	r1, [pc, #120]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800466c:	4013      	ands	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d006      	beq.n	800468a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	4918      	ldr	r1, [pc, #96]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	608b      	str	r3, [r1, #8]
 8004688:	e006      	b.n	8004698 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800468a:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	43db      	mvns	r3, r3
 8004692:	4914      	ldr	r1, [pc, #80]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004694:	4013      	ands	r3, r2
 8004696:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d021      	beq.n	80046e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	490e      	ldr	r1, [pc, #56]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60cb      	str	r3, [r1, #12]
 80046b0:	e021      	b.n	80046f6 <HAL_GPIO_Init+0x2e2>
 80046b2:	bf00      	nop
 80046b4:	10320000 	.word	0x10320000
 80046b8:	10310000 	.word	0x10310000
 80046bc:	10220000 	.word	0x10220000
 80046c0:	10210000 	.word	0x10210000
 80046c4:	10120000 	.word	0x10120000
 80046c8:	10110000 	.word	0x10110000
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40010800 	.word	0x40010800
 80046d8:	40010c00 	.word	0x40010c00
 80046dc:	40011000 	.word	0x40011000
 80046e0:	40011400 	.word	0x40011400
 80046e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_GPIO_Init+0x304>)
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	4909      	ldr	r1, [pc, #36]	; (8004718 <HAL_GPIO_Init+0x304>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	3301      	adds	r3, #1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	f47f ae8e 	bne.w	8004428 <HAL_GPIO_Init+0x14>
  }
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	372c      	adds	r7, #44	; 0x2c
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	40010400 	.word	0x40010400

0800471c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
 8004728:	4613      	mov	r3, r2
 800472a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800472c:	787b      	ldrb	r3, [r7, #1]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004738:	e003      	b.n	8004742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	041a      	lsls	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	611a      	str	r2, [r3, #16]
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e12b      	b.n	80049b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fe fb1e 	bl	8002db4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	; 0x24
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047b0:	f003 fe42 	bl	8008438 <HAL_RCC_GetPCLK1Freq>
 80047b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4a81      	ldr	r2, [pc, #516]	; (80049c0 <HAL_I2C_Init+0x274>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d807      	bhi.n	80047d0 <HAL_I2C_Init+0x84>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a80      	ldr	r2, [pc, #512]	; (80049c4 <HAL_I2C_Init+0x278>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bf94      	ite	ls
 80047c8:	2301      	movls	r3, #1
 80047ca:	2300      	movhi	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e006      	b.n	80047de <HAL_I2C_Init+0x92>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a7d      	ldr	r2, [pc, #500]	; (80049c8 <HAL_I2C_Init+0x27c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bf94      	ite	ls
 80047d8:	2301      	movls	r3, #1
 80047da:	2300      	movhi	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0e7      	b.n	80049b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a78      	ldr	r2, [pc, #480]	; (80049cc <HAL_I2C_Init+0x280>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0c9b      	lsrs	r3, r3, #18
 80047f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a6a      	ldr	r2, [pc, #424]	; (80049c0 <HAL_I2C_Init+0x274>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d802      	bhi.n	8004820 <HAL_I2C_Init+0xd4>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3301      	adds	r3, #1
 800481e:	e009      	b.n	8004834 <HAL_I2C_Init+0xe8>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	4a69      	ldr	r2, [pc, #420]	; (80049d0 <HAL_I2C_Init+0x284>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	3301      	adds	r3, #1
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	430b      	orrs	r3, r1
 800483a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004846:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	495c      	ldr	r1, [pc, #368]	; (80049c0 <HAL_I2C_Init+0x274>)
 8004850:	428b      	cmp	r3, r1
 8004852:	d819      	bhi.n	8004888 <HAL_I2C_Init+0x13c>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1e59      	subs	r1, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004862:	1c59      	adds	r1, r3, #1
 8004864:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004868:	400b      	ands	r3, r1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_I2C_Init+0x138>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1e59      	subs	r1, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	fbb1 f3f3 	udiv	r3, r1, r3
 800487c:	3301      	adds	r3, #1
 800487e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004882:	e051      	b.n	8004928 <HAL_I2C_Init+0x1dc>
 8004884:	2304      	movs	r3, #4
 8004886:	e04f      	b.n	8004928 <HAL_I2C_Init+0x1dc>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d111      	bne.n	80048b4 <HAL_I2C_Init+0x168>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e58      	subs	r0, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	440b      	add	r3, r1
 800489e:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a2:	3301      	adds	r3, #1
 80048a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e012      	b.n	80048da <HAL_I2C_Init+0x18e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1e58      	subs	r0, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	0099      	lsls	r1, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_Init+0x196>
 80048de:	2301      	movs	r3, #1
 80048e0:	e022      	b.n	8004928 <HAL_I2C_Init+0x1dc>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10e      	bne.n	8004908 <HAL_I2C_Init+0x1bc>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1e58      	subs	r0, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6859      	ldr	r1, [r3, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	440b      	add	r3, r1
 80048f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004906:	e00f      	b.n	8004928 <HAL_I2C_Init+0x1dc>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1e58      	subs	r0, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6859      	ldr	r1, [r3, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	0099      	lsls	r1, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	fbb0 f3f3 	udiv	r3, r0, r3
 800491e:	3301      	adds	r3, #1
 8004920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	6809      	ldr	r1, [r1, #0]
 800492c:	4313      	orrs	r3, r2
 800492e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6911      	ldr	r1, [r2, #16]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	4311      	orrs	r1, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	430b      	orrs	r3, r1
 800496a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	000186a0 	.word	0x000186a0
 80049c4:	001e847f 	.word	0x001e847f
 80049c8:	003d08ff 	.word	0x003d08ff
 80049cc:	431bde83 	.word	0x431bde83
 80049d0:	10624dd3 	.word	0x10624dd3

080049d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	461a      	mov	r2, r3
 80049e0:	460b      	mov	r3, r1
 80049e2:	817b      	strh	r3, [r7, #10]
 80049e4:	4613      	mov	r3, r2
 80049e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049e8:	f7fe fcc2 	bl	8003370 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	f040 80e0 	bne.w	8004bbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	2319      	movs	r3, #25
 8004a02:	2201      	movs	r2, #1
 8004a04:	4970      	ldr	r1, [pc, #448]	; (8004bc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f001 faa0 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
 8004a14:	e0d3      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_I2C_Master_Transmit+0x50>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0cc      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d007      	beq.n	8004a4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2221      	movs	r2, #33	; 0x21
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2210      	movs	r2, #16
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	893a      	ldrh	r2, [r7, #8]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4a50      	ldr	r2, [pc, #320]	; (8004bcc <HAL_I2C_Master_Transmit+0x1f8>)
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a8c:	8979      	ldrh	r1, [r7, #10]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 ff8c 	bl	80059b0 <I2C_MasterRequestWrite>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e08d      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ab8:	e066      	b.n	8004b88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	6a39      	ldr	r1, [r7, #32]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f001 fb1a 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d107      	bne.n	8004ae2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06b      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	781a      	ldrb	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d11b      	bne.n	8004b5c <HAL_I2C_Master_Transmit+0x188>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d017      	beq.n	8004b5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	781a      	ldrb	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	6a39      	ldr	r1, [r7, #32]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f001 fb0a 	bl	800617a <I2C_WaitOnBTFFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00d      	beq.n	8004b88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d107      	bne.n	8004b84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e01a      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d194      	bne.n	8004aba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	00100002 	.word	0x00100002
 8004bcc:	ffff0000 	.word	0xffff0000

08004bd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	460b      	mov	r3, r1
 8004bde:	817b      	strh	r3, [r7, #10]
 8004be0:	4613      	mov	r3, r2
 8004be2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be8:	f7fe fbc2 	bl	8003370 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	f040 823f 	bne.w	800507a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2319      	movs	r3, #25
 8004c02:	2201      	movs	r2, #1
 8004c04:	497f      	ldr	r1, [pc, #508]	; (8004e04 <HAL_I2C_Master_Receive+0x234>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f001 f9a0 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
 8004c14:	e232      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_I2C_Master_Receive+0x54>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e22b      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d007      	beq.n	8004c4a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2222      	movs	r2, #34	; 0x22
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2210      	movs	r2, #16
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	893a      	ldrh	r2, [r7, #8]
 8004c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a5f      	ldr	r2, [pc, #380]	; (8004e08 <HAL_I2C_Master_Receive+0x238>)
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c8c:	8979      	ldrh	r1, [r7, #10]
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 ff0e 	bl	8005ab4 <I2C_MasterRequestRead>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e1ec      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d113      	bne.n	8004cd2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e1c0      	b.n	8005054 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d11e      	bne.n	8004d18 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cea:	b672      	cpsid	i
}
 8004cec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d14:	b662      	cpsie	i
}
 8004d16:	e035      	b.n	8004d84 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d11e      	bne.n	8004d5e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d30:	b672      	cpsid	i
}
 8004d32:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d5a:	b662      	cpsie	i
}
 8004d5c:	e012      	b.n	8004d84 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d84:	e166      	b.n	8005054 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	f200 811f 	bhi.w	8004fce <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d123      	bne.n	8004de0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f001 fa2d 	bl	80061fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e167      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dde:	e139      	b.n	8005054 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d152      	bne.n	8004e8e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	2200      	movs	r2, #0
 8004df0:	4906      	ldr	r1, [pc, #24]	; (8004e0c <HAL_I2C_Master_Receive+0x23c>)
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f001 f8aa 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e13c      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
 8004e02:	bf00      	nop
 8004e04:	00100002 	.word	0x00100002
 8004e08:	ffff0000 	.word	0xffff0000
 8004e0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004e10:	b672      	cpsid	i
}
 8004e12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e56:	b662      	cpsie	i
}
 8004e58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e8c:	e0e2      	b.n	8005054 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	2200      	movs	r2, #0
 8004e96:	497b      	ldr	r1, [pc, #492]	; (8005084 <HAL_I2C_Master_Receive+0x4b4>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f001 f857 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0e9      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb8:	b672      	cpsid	i
}
 8004eba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004eee:	4b66      	ldr	r3, [pc, #408]	; (8005088 <HAL_I2C_Master_Receive+0x4b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	08db      	lsrs	r3, r3, #3
 8004ef4:	4a65      	ldr	r2, [pc, #404]	; (800508c <HAL_I2C_Master_Receive+0x4bc>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0a1a      	lsrs	r2, r3, #8
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	00da      	lsls	r2, r3, #3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d118      	bne.n	8004f46 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f043 0220 	orr.w	r2, r3, #32
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004f36:	b662      	cpsie	i
}
 8004f38:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e09a      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d1d9      	bne.n	8004f08 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f96:	b662      	cpsie	i
}
 8004f98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fcc:	e042      	b.n	8005054 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f001 f912 	bl	80061fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e04c      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d118      	bne.n	8005054 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	f47f ae94 	bne.w	8004d86 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e000      	b.n	800507c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800507a:	2302      	movs	r3, #2
  }
}
 800507c:	4618      	mov	r0, r3
 800507e:	3728      	adds	r7, #40	; 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	00010004 	.word	0x00010004
 8005088:	20000000 	.word	0x20000000
 800508c:	14f8b589 	.word	0x14f8b589

08005090 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	817b      	strh	r3, [r7, #10]
 80050a2:	460b      	mov	r3, r1
 80050a4:	813b      	strh	r3, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050aa:	f7fe f961 	bl	8003370 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	f040 80d9 	bne.w	8005270 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	2319      	movs	r3, #25
 80050c4:	2201      	movs	r2, #1
 80050c6:	496d      	ldr	r1, [pc, #436]	; (800527c <HAL_I2C_Mem_Write+0x1ec>)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 ff3f 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
 80050d6:	e0cc      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_I2C_Mem_Write+0x56>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e0c5      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d007      	beq.n	800510c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800511a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2221      	movs	r2, #33	; 0x21
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2240      	movs	r2, #64	; 0x40
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a3a      	ldr	r2, [r7, #32]
 8005136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800513c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a4d      	ldr	r2, [pc, #308]	; (8005280 <HAL_I2C_Mem_Write+0x1f0>)
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800514e:	88f8      	ldrh	r0, [r7, #6]
 8005150:	893a      	ldrh	r2, [r7, #8]
 8005152:	8979      	ldrh	r1, [r7, #10]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4603      	mov	r3, r0
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fd76 	bl	8005c50 <I2C_RequestMemoryWrite>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d052      	beq.n	8005210 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e081      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 ffc0 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b04      	cmp	r3, #4
 8005184:	d107      	bne.n	8005196 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e06b      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d11b      	bne.n	8005210 <HAL_I2C_Mem_Write+0x180>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d017      	beq.n	8005210 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1aa      	bne.n	800516e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 ffac 	bl	800617a <I2C_WaitOnBTFFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	2b04      	cmp	r3, #4
 800522e:	d107      	bne.n	8005240 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e016      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	e000      	b.n	8005272 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005270:	2302      	movs	r3, #2
  }
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	00100002 	.word	0x00100002
 8005280:	ffff0000 	.word	0xffff0000

08005284 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	; 0x30
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	4608      	mov	r0, r1
 800528e:	4611      	mov	r1, r2
 8005290:	461a      	mov	r2, r3
 8005292:	4603      	mov	r3, r0
 8005294:	817b      	strh	r3, [r7, #10]
 8005296:	460b      	mov	r3, r1
 8005298:	813b      	strh	r3, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052a2:	f7fe f865 	bl	8003370 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	f040 8244 	bne.w	800573e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	2319      	movs	r3, #25
 80052bc:	2201      	movs	r2, #1
 80052be:	4982      	ldr	r1, [pc, #520]	; (80054c8 <HAL_I2C_Mem_Read+0x244>)
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 fe43 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
 80052ce:	e237      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_I2C_Mem_Read+0x5a>
 80052da:	2302      	movs	r3, #2
 80052dc:	e230      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d007      	beq.n	8005304 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005312:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2222      	movs	r2, #34	; 0x22
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2240      	movs	r2, #64	; 0x40
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005334:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a62      	ldr	r2, [pc, #392]	; (80054cc <HAL_I2C_Mem_Read+0x248>)
 8005344:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005346:	88f8      	ldrh	r0, [r7, #6]
 8005348:	893a      	ldrh	r2, [r7, #8]
 800534a:	8979      	ldrh	r1, [r7, #10]
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	4603      	mov	r3, r0
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fd10 	bl	8005d7c <I2C_RequestMemoryRead>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e1ec      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536a:	2b00      	cmp	r3, #0
 800536c:	d113      	bne.n	8005396 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e1c0      	b.n	8005718 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539a:	2b01      	cmp	r3, #1
 800539c:	d11e      	bne.n	80053dc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053ae:	b672      	cpsid	i
}
 80053b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053d8:	b662      	cpsie	i
}
 80053da:	e035      	b.n	8005448 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d11e      	bne.n	8005422 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053f4:	b672      	cpsid	i
}
 80053f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f8:	2300      	movs	r3, #0
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800541e:	b662      	cpsie	i
}
 8005420:	e012      	b.n	8005448 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005430:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005448:	e166      	b.n	8005718 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544e:	2b03      	cmp	r3, #3
 8005450:	f200 811f 	bhi.w	8005692 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	2b01      	cmp	r3, #1
 800545a:	d123      	bne.n	80054a4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800545c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fecb 	bl	80061fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e167      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054a2:	e139      	b.n	8005718 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d152      	bne.n	8005552 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	2200      	movs	r2, #0
 80054b4:	4906      	ldr	r1, [pc, #24]	; (80054d0 <HAL_I2C_Mem_Read+0x24c>)
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fd48 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e13c      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
 80054c6:	bf00      	nop
 80054c8:	00100002 	.word	0x00100002
 80054cc:	ffff0000 	.word	0xffff0000
 80054d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80054d4:	b672      	cpsid	i
}
 80054d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800551a:	b662      	cpsie	i
}
 800551c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005546:	b29b      	uxth	r3, r3
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005550:	e0e2      	b.n	8005718 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2200      	movs	r2, #0
 800555a:	497b      	ldr	r1, [pc, #492]	; (8005748 <HAL_I2C_Mem_Read+0x4c4>)
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fcf5 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0e9      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800557c:	b672      	cpsid	i
}
 800557e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055b2:	4b66      	ldr	r3, [pc, #408]	; (800574c <HAL_I2C_Mem_Read+0x4c8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	08db      	lsrs	r3, r3, #3
 80055b8:	4a65      	ldr	r2, [pc, #404]	; (8005750 <HAL_I2C_Mem_Read+0x4cc>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	0a1a      	lsrs	r2, r3, #8
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	00da      	lsls	r2, r3, #3
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d118      	bne.n	800560a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80055fa:	b662      	cpsie	i
}
 80055fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e09a      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b04      	cmp	r3, #4
 8005616:	d1d9      	bne.n	80055cc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800565a:	b662      	cpsie	i
}
 800565c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005690:	e042      	b.n	8005718 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005694:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fdb0 	bl	80061fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e04c      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d118      	bne.n	8005718 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570e:	b29b      	uxth	r3, r3
 8005710:	3b01      	subs	r3, #1
 8005712:	b29a      	uxth	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571c:	2b00      	cmp	r3, #0
 800571e:	f47f ae94 	bne.w	800544a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e000      	b.n	8005740 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	3728      	adds	r7, #40	; 0x28
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	00010004 	.word	0x00010004
 800574c:	20000000 	.word	0x20000000
 8005750:	14f8b589 	.word	0x14f8b589

08005754 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	460b      	mov	r3, r1
 8005762:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005764:	f7fd fe04 	bl	8003370 <HAL_GetTick>
 8005768:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800576a:	2301      	movs	r3, #1
 800576c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b20      	cmp	r3, #32
 8005778:	f040 8111 	bne.w	800599e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	2319      	movs	r3, #25
 8005782:	2201      	movs	r2, #1
 8005784:	4988      	ldr	r1, [pc, #544]	; (80059a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fbe0 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005792:	2302      	movs	r3, #2
 8005794:	e104      	b.n	80059a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_I2C_IsDeviceReady+0x50>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e0fd      	b.n	80059a0 <HAL_I2C_IsDeviceReady+0x24c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d007      	beq.n	80057ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2224      	movs	r2, #36	; 0x24
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4a70      	ldr	r2, [pc, #448]	; (80059ac <HAL_I2C_IsDeviceReady+0x258>)
 80057ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2200      	movs	r2, #0
 8005806:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fb9e 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005824:	d103      	bne.n	800582e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e0b6      	b.n	80059a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005832:	897b      	ldrh	r3, [r7, #10]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005840:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005842:	f7fd fd95 	bl	8003370 <HAL_GetTick>
 8005846:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b02      	cmp	r3, #2
 8005854:	bf0c      	ite	eq
 8005856:	2301      	moveq	r3, #1
 8005858:	2300      	movne	r3, #0
 800585a:	b2db      	uxtb	r3, r3
 800585c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005876:	e025      	b.n	80058c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005878:	f7fd fd7a 	bl	8003370 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d302      	bcc.n	800588e <HAL_I2C_IsDeviceReady+0x13a>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	22a0      	movs	r2, #160	; 0xa0
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ba:	bf0c      	ite	eq
 80058bc:	2301      	moveq	r3, #1
 80058be:	2300      	movne	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2ba0      	cmp	r3, #160	; 0xa0
 80058ce:	d005      	beq.n	80058dc <HAL_I2C_IsDeviceReady+0x188>
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <HAL_I2C_IsDeviceReady+0x188>
 80058d6:	7dbb      	ldrb	r3, [r7, #22]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0cd      	beq.n	8005878 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d129      	bne.n	8005946 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005900:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005902:	2300      	movs	r3, #0
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	613b      	str	r3, [r7, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2319      	movs	r3, #25
 800591e:	2201      	movs	r2, #1
 8005920:	4921      	ldr	r1, [pc, #132]	; (80059a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fb12 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e036      	b.n	80059a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e02c      	b.n	80059a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005954:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800595e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2319      	movs	r3, #25
 8005966:	2201      	movs	r2, #1
 8005968:	490f      	ldr	r1, [pc, #60]	; (80059a8 <HAL_I2C_IsDeviceReady+0x254>)
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 faee 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e012      	b.n	80059a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	3301      	adds	r3, #1
 800597e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	f4ff af32 	bcc.w	80057ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	00100002 	.word	0x00100002
 80059ac:	ffff0000 	.word	0xffff0000

080059b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	607a      	str	r2, [r7, #4]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	460b      	mov	r3, r1
 80059be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d006      	beq.n	80059da <I2C_MasterRequestWrite+0x2a>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d003      	beq.n	80059da <I2C_MasterRequestWrite+0x2a>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059d8:	d108      	bne.n	80059ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e00b      	b.n	8005a04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	2b12      	cmp	r3, #18
 80059f2:	d107      	bne.n	8005a04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fa9b 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2a:	d103      	bne.n	8005a34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e035      	b.n	8005aa4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a40:	d108      	bne.n	8005a54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a42:	897b      	ldrh	r3, [r7, #10]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a50:	611a      	str	r2, [r3, #16]
 8005a52:	e01b      	b.n	8005a8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a54:	897b      	ldrh	r3, [r7, #10]
 8005a56:	11db      	asrs	r3, r3, #7
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f003 0306 	and.w	r3, r3, #6
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f063 030f 	orn	r3, r3, #15
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	490e      	ldr	r1, [pc, #56]	; (8005aac <I2C_MasterRequestWrite+0xfc>)
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fac1 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e010      	b.n	8005aa4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a82:	897b      	ldrh	r3, [r7, #10]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4907      	ldr	r1, [pc, #28]	; (8005ab0 <I2C_MasterRequestWrite+0x100>)
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fab1 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	00010008 	.word	0x00010008
 8005ab0:	00010002 	.word	0x00010002

08005ab4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d006      	beq.n	8005aee <I2C_MasterRequestRead+0x3a>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d003      	beq.n	8005aee <I2C_MasterRequestRead+0x3a>
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005aec:	d108      	bne.n	8005b00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e00b      	b.n	8005b18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	2b11      	cmp	r3, #17
 8005b06:	d107      	bne.n	8005b18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fa11 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00d      	beq.n	8005b4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3e:	d103      	bne.n	8005b48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e079      	b.n	8005c40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b54:	d108      	bne.n	8005b68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	611a      	str	r2, [r3, #16]
 8005b66:	e05f      	b.n	8005c28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b68:	897b      	ldrh	r3, [r7, #10]
 8005b6a:	11db      	asrs	r3, r3, #7
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f003 0306 	and.w	r3, r3, #6
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f063 030f 	orn	r3, r3, #15
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4930      	ldr	r1, [pc, #192]	; (8005c48 <I2C_MasterRequestRead+0x194>)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fa37 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e054      	b.n	8005c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b96:	897b      	ldrh	r3, [r7, #10]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	4929      	ldr	r1, [pc, #164]	; (8005c4c <I2C_MasterRequestRead+0x198>)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fa27 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e044      	b.n	8005c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f9af 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c02:	d103      	bne.n	8005c0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e017      	b.n	8005c40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c10:	897b      	ldrh	r3, [r7, #10]
 8005c12:	11db      	asrs	r3, r3, #7
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 0306 	and.w	r3, r3, #6
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f063 030e 	orn	r3, r3, #14
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4907      	ldr	r1, [pc, #28]	; (8005c4c <I2C_MasterRequestRead+0x198>)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f9e3 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	00010008 	.word	0x00010008
 8005c4c:	00010002 	.word	0x00010002

08005c50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f960 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca0:	d103      	bne.n	8005caa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e05f      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	492d      	ldr	r1, [pc, #180]	; (8005d78 <I2C_RequestMemoryWrite+0x128>)
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f998 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e04c      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cec:	6a39      	ldr	r1, [r7, #32]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fa02 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d107      	bne.n	8005d12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e02b      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d105      	bne.n	8005d28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d1c:	893b      	ldrh	r3, [r7, #8]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	e021      	b.n	8005d6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f9dc 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d107      	bne.n	8005d5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e005      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d62:	893b      	ldrh	r3, [r7, #8]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	00010002 	.word	0x00010002

08005d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	813b      	strh	r3, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f8c2 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ddc:	d103      	bne.n	8005de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0aa      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	4952      	ldr	r1, [pc, #328]	; (8005f48 <I2C_RequestMemoryRead+0x1cc>)
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f8fa 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e097      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e28:	6a39      	ldr	r1, [r7, #32]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f964 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d107      	bne.n	8005e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e076      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d105      	bne.n	8005e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e58:	893b      	ldrh	r3, [r7, #8]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]
 8005e62:	e021      	b.n	8005ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e64:	893b      	ldrh	r3, [r7, #8]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e74:	6a39      	ldr	r1, [r7, #32]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f93e 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d107      	bne.n	8005e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e050      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e9e:	893b      	ldrh	r3, [r7, #8]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	6a39      	ldr	r1, [r7, #32]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f923 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00d      	beq.n	8005ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d107      	bne.n	8005ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e035      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f82b 	bl	8005f4c <I2C_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00d      	beq.n	8005f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0a:	d103      	bne.n	8005f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e013      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f18:	897b      	ldrh	r3, [r7, #10]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <I2C_RequestMemoryRead+0x1cc>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f863 	bl	8005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	00010002 	.word	0x00010002

08005f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f5c:	e025      	b.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f64:	d021      	beq.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f66:	f7fd fa03 	bl	8003370 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d302      	bcc.n	8005f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d116      	bne.n	8005faa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e023      	b.n	8005ff2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d10d      	bne.n	8005fd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	43da      	mvns	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bf0c      	ite	eq
 8005fc6:	2301      	moveq	r3, #1
 8005fc8:	2300      	movne	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	e00c      	b.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf0c      	ite	eq
 8005fe2:	2301      	moveq	r3, #1
 8005fe4:	2300      	movne	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d0b6      	beq.n	8005f5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006008:	e051      	b.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006018:	d123      	bne.n	8006062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006028:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006032:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	f043 0204 	orr.w	r2, r3, #4
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e046      	b.n	80060f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006068:	d021      	beq.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606a:	f7fd f981 	bl	8003370 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d302      	bcc.n	8006080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d116      	bne.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f043 0220 	orr.w	r2, r3, #32
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e020      	b.n	80060f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	0c1b      	lsrs	r3, r3, #16
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d10c      	bne.n	80060d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	43da      	mvns	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4013      	ands	r3, r2
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bf14      	ite	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	2300      	moveq	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	e00b      	b.n	80060ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	43da      	mvns	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	4013      	ands	r3, r2
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d18d      	bne.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006104:	e02d      	b.n	8006162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f8ce 	bl	80062a8 <I2C_IsAcknowledgeFailed>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e02d      	b.n	8006172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800611c:	d021      	beq.n	8006162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611e:	f7fd f927 	bl	8003370 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	d302      	bcc.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d116      	bne.n	8006162 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e007      	b.n	8006172 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d1ca      	bne.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006186:	e02d      	b.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f88d 	bl	80062a8 <I2C_IsAcknowledgeFailed>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e02d      	b.n	80061f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800619e:	d021      	beq.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a0:	f7fd f8e6 	bl	8003370 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d116      	bne.n	80061e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	f043 0220 	orr.w	r2, r3, #32
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e007      	b.n	80061f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d1ca      	bne.n	8006188 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006208:	e042      	b.n	8006290 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b10      	cmp	r3, #16
 8006216:	d119      	bne.n	800624c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0210 	mvn.w	r2, #16
 8006220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e029      	b.n	80062a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800624c:	f7fd f890 	bl	8003370 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	d302      	bcc.n	8006262 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d116      	bne.n	8006290 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	f043 0220 	orr.w	r2, r3, #32
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e007      	b.n	80062a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d1b5      	bne.n	800620a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062be:	d11b      	bne.n	80062f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	f043 0204 	orr.w	r2, r3, #4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006306:	b08b      	sub	sp, #44	; 0x2c
 8006308:	af06      	add	r7, sp, #24
 800630a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e0fd      	b.n	8006512 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f007 fdc2 	bl	800deb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2203      	movs	r2, #3
 8006334:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4618      	mov	r0, r3
 800633e:	f003 fd27 	bl	8009d90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	687e      	ldr	r6, [r7, #4]
 800634a:	466d      	mov	r5, sp
 800634c:	f106 0410 	add.w	r4, r6, #16
 8006350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	1d33      	adds	r3, r6, #4
 800635a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800635c:	6838      	ldr	r0, [r7, #0]
 800635e:	f003 fcf1 	bl	8009d44 <USB_CoreInit>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0ce      	b.n	8006512 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f003 fd22 	bl	8009dc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e04c      	b.n	8006420 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	440b      	add	r3, r1
 8006396:	3301      	adds	r3, #1
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	440b      	add	r3, r1
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	b298      	uxth	r0, r3
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	440b      	add	r3, r1
 80063c2:	3336      	adds	r3, #54	; 0x36
 80063c4:	4602      	mov	r2, r0
 80063c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	440b      	add	r3, r1
 80063d8:	3303      	adds	r3, #3
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063de:	7bfa      	ldrb	r2, [r7, #15]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	440b      	add	r3, r1
 80063ec:	3338      	adds	r3, #56	; 0x38
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063f2:	7bfa      	ldrb	r2, [r7, #15]
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	440b      	add	r3, r1
 8006400:	333c      	adds	r3, #60	; 0x3c
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	440b      	add	r3, r1
 8006414:	3340      	adds	r3, #64	; 0x40
 8006416:	2200      	movs	r2, #0
 8006418:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	3301      	adds	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
 8006420:	7bfa      	ldrb	r2, [r7, #15]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d3ad      	bcc.n	8006386 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
 800642e:	e044      	b.n	80064ba <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006430:	7bfa      	ldrb	r2, [r7, #15]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	440b      	add	r3, r1
 800643e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006446:	7bfa      	ldrb	r2, [r7, #15]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	440b      	add	r3, r1
 8006454:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006458:	7bfa      	ldrb	r2, [r7, #15]
 800645a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800645c:	7bfa      	ldrb	r2, [r7, #15]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	440b      	add	r3, r1
 800646a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800646e:	2200      	movs	r2, #0
 8006470:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006472:	7bfa      	ldrb	r2, [r7, #15]
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	440b      	add	r3, r1
 8006480:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006488:	7bfa      	ldrb	r2, [r7, #15]
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	440b      	add	r3, r1
 8006496:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800649e:	7bfa      	ldrb	r2, [r7, #15]
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	440b      	add	r3, r1
 80064ac:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	3301      	adds	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
 80064ba:	7bfa      	ldrb	r2, [r7, #15]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d3b5      	bcc.n	8006430 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	687e      	ldr	r6, [r7, #4]
 80064cc:	466d      	mov	r5, sp
 80064ce:	f106 0410 	add.w	r4, r6, #16
 80064d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	602b      	str	r3, [r5, #0]
 80064da:	1d33      	adds	r3, r6, #4
 80064dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064de:	6838      	ldr	r0, [r7, #0]
 80064e0:	f003 fc7c 	bl	8009ddc <USB_DevInit>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2202      	movs	r2, #2
 80064ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e00d      	b.n	8006512 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f005 fded 	bl	800c0ea <USB_DevDisconnect>

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800651a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_PCD_Start+0x16>
 800652c:	2302      	movs	r3, #2
 800652e:	e016      	b.n	800655e <HAL_PCD_Start+0x44>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f003 fc11 	bl	8009d64 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006542:	2101      	movs	r1, #1
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f007 ff28 	bl	800e39a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f005 fdc1 	bl	800c0d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b088      	sub	sp, #32
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f005 fdc3 	bl	800c0fe <USB_ReadInterrupts>
 8006578:	4603      	mov	r3, r0
 800657a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006582:	d102      	bne.n	800658a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb61 	bl	8006c4c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f005 fdb5 	bl	800c0fe <USB_ReadInterrupts>
 8006594:	4603      	mov	r3, r0
 8006596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659e:	d112      	bne.n	80065c6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b2:	b292      	uxth	r2, r2
 80065b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f007 fcf6 	bl	800dfaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80065be:	2100      	movs	r1, #0
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f925 	bl	8006810 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f005 fd97 	bl	800c0fe <USB_ReadInterrupts>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065da:	d10b      	bne.n	80065f4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065ee:	b292      	uxth	r2, r2
 80065f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f005 fd80 	bl	800c0fe <USB_ReadInterrupts>
 80065fe:	4603      	mov	r3, r0
 8006600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006608:	d10b      	bne.n	8006622 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006612:	b29a      	uxth	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800661c:	b292      	uxth	r2, r2
 800661e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f005 fd69 	bl	800c0fe <USB_ReadInterrupts>
 800662c:	4603      	mov	r3, r0
 800662e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	d126      	bne.n	8006686 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	b292      	uxth	r2, r2
 800664c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006658:	b29a      	uxth	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0208 	bic.w	r2, r2, #8
 8006662:	b292      	uxth	r2, r2
 8006664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f007 fcd7 	bl	800e01c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006676:	b29a      	uxth	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006680:	b292      	uxth	r2, r2
 8006682:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f005 fd37 	bl	800c0fe <USB_ReadInterrupts>
 8006690:	4603      	mov	r3, r0
 8006692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800669a:	f040 8084 	bne.w	80067a6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800669e:	2300      	movs	r3, #0
 80066a0:	77fb      	strb	r3, [r7, #31]
 80066a2:	e011      	b.n	80066c8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	7ffb      	ldrb	r3, [r7, #31]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	441a      	add	r2, r3
 80066b0:	7ffb      	ldrb	r3, [r7, #31]
 80066b2:	8812      	ldrh	r2, [r2, #0]
 80066b4:	b292      	uxth	r2, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	f107 0120 	add.w	r1, r7, #32
 80066bc:	440b      	add	r3, r1
 80066be:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80066c2:	7ffb      	ldrb	r3, [r7, #31]
 80066c4:	3301      	adds	r3, #1
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	7ffb      	ldrb	r3, [r7, #31]
 80066ca:	2b07      	cmp	r3, #7
 80066cc:	d9ea      	bls.n	80066a4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	b292      	uxth	r2, r2
 80066e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	b292      	uxth	r2, r2
 80066fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80066fe:	bf00      	nop
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006708:	b29b      	uxth	r3, r3
 800670a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f6      	beq.n	8006700 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006724:	b292      	uxth	r2, r2
 8006726:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800672a:	2300      	movs	r3, #0
 800672c:	77fb      	strb	r3, [r7, #31]
 800672e:	e010      	b.n	8006752 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006730:	7ffb      	ldrb	r3, [r7, #31]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6812      	ldr	r2, [r2, #0]
 8006736:	4611      	mov	r1, r2
 8006738:	7ffa      	ldrb	r2, [r7, #31]
 800673a:	0092      	lsls	r2, r2, #2
 800673c:	440a      	add	r2, r1
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	f107 0120 	add.w	r1, r7, #32
 8006744:	440b      	add	r3, r1
 8006746:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800674a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800674c:	7ffb      	ldrb	r3, [r7, #31]
 800674e:	3301      	adds	r3, #1
 8006750:	77fb      	strb	r3, [r7, #31]
 8006752:	7ffb      	ldrb	r3, [r7, #31]
 8006754:	2b07      	cmp	r3, #7
 8006756:	d9eb      	bls.n	8006730 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0208 	orr.w	r2, r2, #8
 800676a:	b292      	uxth	r2, r2
 800676c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006782:	b292      	uxth	r2, r2
 8006784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006790:	b29a      	uxth	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0204 	orr.w	r2, r2, #4
 800679a:	b292      	uxth	r2, r2
 800679c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f007 fc21 	bl	800dfe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f005 fca7 	bl	800c0fe <USB_ReadInterrupts>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ba:	d10e      	bne.n	80067da <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067ce:	b292      	uxth	r2, r2
 80067d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f007 fbda 	bl	800df8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f005 fc8d 	bl	800c0fe <USB_ReadInterrupts>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ee:	d10b      	bne.n	8006808 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006802:	b292      	uxth	r2, r2
 8006804:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006808:	bf00      	nop
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_PCD_SetAddress+0x1a>
 8006826:	2302      	movs	r3, #2
 8006828:	e013      	b.n	8006852 <HAL_PCD_SetAddress+0x42>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f005 fc34 	bl	800c0b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	4608      	mov	r0, r1
 8006864:	4611      	mov	r1, r2
 8006866:	461a      	mov	r2, r3
 8006868:	4603      	mov	r3, r0
 800686a:	70fb      	strb	r3, [r7, #3]
 800686c:	460b      	mov	r3, r1
 800686e:	803b      	strh	r3, [r7, #0]
 8006870:	4613      	mov	r3, r2
 8006872:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800687c:	2b00      	cmp	r3, #0
 800687e:	da0e      	bge.n	800689e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	4413      	add	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2201      	movs	r2, #1
 800689a:	705a      	strb	r2, [r3, #1]
 800689c:	e00e      	b.n	80068bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	f003 0207 	and.w	r2, r3, #7
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	4413      	add	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80068c8:	883a      	ldrh	r2, [r7, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	78ba      	ldrb	r2, [r7, #2]
 80068d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068e6:	78bb      	ldrb	r3, [r7, #2]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d102      	bne.n	80068f2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_PCD_EP_Open+0xa6>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e00e      	b.n	800691e <HAL_PCD_EP_Open+0xc4>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68f9      	ldr	r1, [r7, #12]
 800690e:	4618      	mov	r0, r3
 8006910:	f003 fa84 	bl	8009e1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800691c:	7afb      	ldrb	r3, [r7, #11]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006936:	2b00      	cmp	r3, #0
 8006938:	da0e      	bge.n	8006958 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	00db      	lsls	r3, r3, #3
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	705a      	strb	r2, [r3, #1]
 8006956:	e00e      	b.n	8006976 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	f003 0207 	and.w	r2, r3, #7
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4413      	add	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_PCD_EP_Close+0x6a>
 800698c:	2302      	movs	r3, #2
 800698e:	e00e      	b.n	80069ae <HAL_PCD_EP_Close+0x88>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68f9      	ldr	r1, [r7, #12]
 800699e:	4618      	mov	r0, r3
 80069a0:	f003 fda6 	bl	800a4f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b086      	sub	sp, #24
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	460b      	mov	r3, r1
 80069c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	f003 0207 	and.w	r2, r3, #7
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2200      	movs	r2, #0
 80069ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2200      	movs	r2, #0
 80069f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6979      	ldr	r1, [r7, #20]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f003 ff58 	bl	800a8c8 <USB_EPStartXfer>
 8006a18:	e005      	b.n	8006a26 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6979      	ldr	r1, [r7, #20]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f003 ff51 	bl	800a8c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	f003 0207 	and.w	r2, r3, #7
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006a52:	681b      	ldr	r3, [r3, #0]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f003 fefe 	bl	800a8c8 <USB_EPStartXfer>
 8006acc:	e005      	b.n	8006ada <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6979      	ldr	r1, [r7, #20]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f003 fef7 	bl	800a8c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	f003 0207 	and.w	r2, r3, #7
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d901      	bls.n	8006b02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e04c      	b.n	8006b9c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	da0e      	bge.n	8006b28 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	705a      	strb	r2, [r3, #1]
 8006b26:	e00c      	b.n	8006b42 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b28:	78fa      	ldrb	r2, [r7, #3]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_PCD_EP_SetStall+0x7e>
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e01c      	b.n	8006b9c <HAL_PCD_EP_SetStall+0xb8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f005 f9a0 	bl	800beb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d108      	bne.n	8006b92 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f005 fac5 	bl	800c11c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d901      	bls.n	8006bc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e040      	b.n	8006c44 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	da0e      	bge.n	8006be8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	4413      	add	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	705a      	strb	r2, [r3, #1]
 8006be6:	e00e      	b.n	8006c06 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	f003 0207 	and.w	r2, r3, #7
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	f003 0307 	and.w	r3, r3, #7
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_PCD_EP_ClrStall+0x82>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e00e      	b.n	8006c44 <HAL_PCD_EP_ClrStall+0xa0>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f005 f98e 	bl	800bf56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c54:	e2ec      	b.n	8007230 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006c60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006c6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 8161 	bne.w	8006f38 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006c76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d152      	bne.n	8006d26 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	81fb      	strh	r3, [r7, #14]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	89fb      	ldrh	r3, [r7, #14]
 8006c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3328      	adds	r3, #40	; 0x28
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	3302      	adds	r3, #2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	695a      	ldr	r2, [r3, #20]
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	441a      	add	r2, r3
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f007 f937 	bl	800df5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 829b 	beq.w	8007230 <PCD_EP_ISR_Handler+0x5e4>
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f040 8296 	bne.w	8007230 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	b292      	uxth	r2, r2
 8006d18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006d24:	e284      	b.n	8007230 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006d36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d034      	beq.n	8006daa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	4413      	add	r3, r2
 8006d54:	3306      	adds	r3, #6
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6818      	ldr	r0, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f005 fa1c 	bl	800c1bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006d90:	4013      	ands	r3, r2
 8006d92:	823b      	strh	r3, [r7, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	8a3a      	ldrh	r2, [r7, #16]
 8006d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f007 f8ac 	bl	800df00 <HAL_PCD_SetupStageCallback>
 8006da8:	e242      	b.n	8007230 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006daa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f280 823e 	bge.w	8007230 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	83bb      	strh	r3, [r7, #28]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	8bba      	ldrh	r2, [r7, #28]
 8006dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dce:	b292      	uxth	r2, r2
 8006dd0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	4413      	add	r3, r2
 8006de6:	3306      	adds	r3, #6
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006df4:	881b      	ldrh	r3, [r3, #0]
 8006df6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d019      	beq.n	8006e3a <PCD_EP_ISR_Handler+0x1ee>
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d015      	beq.n	8006e3a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	6959      	ldr	r1, [r3, #20]
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f005 f9cc 	bl	800c1bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	695a      	ldr	r2, [r3, #20]
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	441a      	add	r2, r3
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006e32:	2100      	movs	r1, #0
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f007 f875 	bl	800df24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 81f2 	bne.w	8007230 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	4413      	add	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d112      	bne.n	8006e9a <PCD_EP_ISR_Handler+0x24e>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	e02f      	b.n	8006efa <PCD_EP_ISR_Handler+0x2ae>
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea0:	d813      	bhi.n	8006eca <PCD_EP_ISR_Handler+0x27e>
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <PCD_EP_ISR_Handler+0x270>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	3301      	adds	r3, #1
 8006eba:	633b      	str	r3, [r7, #48]	; 0x30
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	801a      	strh	r2, [r3, #0]
 8006ec8:	e017      	b.n	8006efa <PCD_EP_ISR_Handler+0x2ae>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <PCD_EP_ISR_Handler+0x298>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	029b      	lsls	r3, r3, #10
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	827b      	strh	r3, [r7, #18]
 8006f0c:	8a7b      	ldrh	r3, [r7, #18]
 8006f0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f12:	827b      	strh	r3, [r7, #18]
 8006f14:	8a7b      	ldrh	r3, [r7, #18]
 8006f16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f1a:	827b      	strh	r3, [r7, #18]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	8a7b      	ldrh	r3, [r7, #18]
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]
 8006f36:	e17b      	b.n	8007230 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f4a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f280 80ea 	bge.w	8007128 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f82:	b292      	uxth	r2, r2
 8006f84:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006f86:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	4413      	add	r3, r2
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	7b1b      	ldrb	r3, [r3, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d122      	bne.n	8006fea <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3306      	adds	r3, #6
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fcc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006fce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8087 	beq.w	80070e4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	6959      	ldr	r1, [r3, #20]
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	88da      	ldrh	r2, [r3, #6]
 8006fe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fe4:	f005 f8ea 	bl	800c1bc <USB_ReadPMA>
 8006fe8:	e07c      	b.n	80070e4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	78db      	ldrb	r3, [r3, #3]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d108      	bne.n	8007004 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006ff2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f927 	bl	800724c <HAL_PCD_EP_DB_Receive>
 8006ffe:	4603      	mov	r3, r0
 8007000:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007002:	e06f      	b.n	80070e4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	441a      	add	r2, r3
 800702e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007040:	b29b      	uxth	r3, r3
 8007042:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d021      	beq.n	80070a2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007066:	b29b      	uxth	r3, r3
 8007068:	461a      	mov	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4413      	add	r3, r2
 8007072:	3302      	adds	r3, #2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007086:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8007088:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800708a:	2b00      	cmp	r3, #0
 800708c:	d02a      	beq.n	80070e4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	6959      	ldr	r1, [r3, #20]
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	891a      	ldrh	r2, [r3, #8]
 800709a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800709c:	f005 f88e 	bl	800c1bc <USB_ReadPMA>
 80070a0:	e020      	b.n	80070e4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	4413      	add	r3, r2
 80070b6:	3306      	adds	r3, #6
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80070cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d008      	beq.n	80070e4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	6959      	ldr	r1, [r3, #20]
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	895a      	ldrh	r2, [r3, #10]
 80070de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070e0:	f005 f86c 	bl	800c1bc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070ea:	441a      	add	r2, r3
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	695a      	ldr	r2, [r3, #20]
 80070f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070f6:	441a      	add	r2, r3
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <PCD_EP_ISR_Handler+0x4c2>
 8007104:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	429a      	cmp	r2, r3
 800710c:	d206      	bcs.n	800711c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f006 ff05 	bl	800df24 <HAL_PCD_DataOutStageCallback>
 800711a:	e005      	b.n	8007128 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007122:	4618      	mov	r0, r3
 8007124:	f003 fbd0 	bl	800a8c8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007128:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	2b00      	cmp	r3, #0
 8007130:	d07e      	beq.n	8007230 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8007132:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	4413      	add	r3, r2
 8007144:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800715c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007160:	843b      	strh	r3, [r7, #32]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	441a      	add	r2, r3
 8007170:	8c3b      	ldrh	r3, [r7, #32]
 8007172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717a:	b29b      	uxth	r3, r3
 800717c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	78db      	ldrb	r3, [r3, #3]
 8007182:	2b03      	cmp	r3, #3
 8007184:	d00c      	beq.n	80071a0 <PCD_EP_ISR_Handler+0x554>
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	78db      	ldrb	r3, [r3, #3]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d008      	beq.n	80071a0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007192:	2b02      	cmp	r3, #2
 8007194:	d146      	bne.n	8007224 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007196:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d141      	bne.n	8007224 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	4413      	add	r3, r2
 80071b4:	3302      	adds	r3, #2
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	6812      	ldr	r2, [r2, #0]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071c8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	8bfb      	ldrh	r3, [r7, #30]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d906      	bls.n	80071e2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	8bfb      	ldrh	r3, [r7, #30]
 80071da:	1ad2      	subs	r2, r2, r3
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	619a      	str	r2, [r3, #24]
 80071e0:	e002      	b.n	80071e8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	2200      	movs	r2, #0
 80071e6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d106      	bne.n	80071fe <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f006 feaf 	bl	800df5a <HAL_PCD_DataInStageCallback>
 80071fc:	e018      	b.n	8007230 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	695a      	ldr	r2, [r3, #20]
 8007202:	8bfb      	ldrh	r3, [r7, #30]
 8007204:	441a      	add	r2, r3
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	8bfb      	ldrh	r3, [r7, #30]
 8007210:	441a      	add	r2, r3
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800721c:	4618      	mov	r0, r3
 800721e:	f003 fb53 	bl	800a8c8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8007222:	e005      	b.n	8007230 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007224:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007226:	461a      	mov	r2, r3
 8007228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f91b 	bl	8007466 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007238:	b29b      	uxth	r3, r3
 800723a:	b21b      	sxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	f6ff ad0a 	blt.w	8006c56 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3738      	adds	r7, #56	; 0x38
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d07e      	beq.n	8007362 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800726c:	b29b      	uxth	r3, r3
 800726e:	461a      	mov	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	4413      	add	r3, r2
 8007278:	3302      	adds	r3, #2
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800728c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	8b7b      	ldrh	r3, [r7, #26]
 8007294:	429a      	cmp	r2, r3
 8007296:	d306      	bcc.n	80072a6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	8b7b      	ldrh	r3, [r7, #26]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	619a      	str	r2, [r3, #24]
 80072a4:	e002      	b.n	80072ac <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2200      	movs	r2, #0
 80072aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d123      	bne.n	80072fc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	833b      	strh	r3, [r7, #24]
 80072d0:	8b3b      	ldrh	r3, [r7, #24]
 80072d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072d6:	833b      	strh	r3, [r7, #24]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	441a      	add	r2, r3
 80072e6:	8b3b      	ldrh	r3, [r7, #24]
 80072e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80072fc:	88fb      	ldrh	r3, [r7, #6]
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01f      	beq.n	8007346 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007320:	82fb      	strh	r3, [r7, #22]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	441a      	add	r2, r3
 8007330:	8afb      	ldrh	r3, [r7, #22]
 8007332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800733a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800733e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007342:	b29b      	uxth	r3, r3
 8007344:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007346:	8b7b      	ldrh	r3, [r7, #26]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 8087 	beq.w	800745c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	6959      	ldr	r1, [r3, #20]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	891a      	ldrh	r2, [r3, #8]
 800735a:	8b7b      	ldrh	r3, [r7, #26]
 800735c:	f004 ff2e 	bl	800c1bc <USB_ReadPMA>
 8007360:	e07c      	b.n	800745c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	4413      	add	r3, r2
 8007376:	3306      	adds	r3, #6
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800738a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	699a      	ldr	r2, [r3, #24]
 8007390:	8b7b      	ldrh	r3, [r7, #26]
 8007392:	429a      	cmp	r2, r3
 8007394:	d306      	bcc.n	80073a4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	8b7b      	ldrh	r3, [r7, #26]
 800739c:	1ad2      	subs	r2, r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	619a      	str	r2, [r3, #24]
 80073a2:	e002      	b.n	80073aa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2200      	movs	r2, #0
 80073a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d123      	bne.n	80073fa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073cc:	83fb      	strh	r3, [r7, #30]
 80073ce:	8bfb      	ldrh	r3, [r7, #30]
 80073d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073d4:	83fb      	strh	r3, [r7, #30]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	8bfb      	ldrh	r3, [r7, #30]
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d11f      	bne.n	8007444 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741e:	83bb      	strh	r3, [r7, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	441a      	add	r2, r3
 800742e:	8bbb      	ldrh	r3, [r7, #28]
 8007430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800743c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007440:	b29b      	uxth	r3, r3
 8007442:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007444:	8b7b      	ldrh	r3, [r7, #26]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d008      	beq.n	800745c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6959      	ldr	r1, [r3, #20]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	895a      	ldrh	r2, [r3, #10]
 8007456:	8b7b      	ldrh	r3, [r7, #26]
 8007458:	f004 feb0 	bl	800c1bc <USB_ReadPMA>
    }
  }

  return count;
 800745c:	8b7b      	ldrh	r3, [r7, #26]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3720      	adds	r7, #32
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b0a2      	sub	sp, #136	; 0x88
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	4613      	mov	r3, r2
 8007472:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 81c7 	beq.w	800780e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007488:	b29b      	uxth	r3, r3
 800748a:	461a      	mov	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4413      	add	r3, r2
 8007494:	3302      	adds	r3, #2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d907      	bls.n	80074c8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	699a      	ldr	r2, [r3, #24]
 80074bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074c0:	1ad2      	subs	r2, r2, r3
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	619a      	str	r2, [r3, #24]
 80074c6:	e002      	b.n	80074ce <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2200      	movs	r2, #0
 80074cc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f040 80b9 	bne.w	800764a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d126      	bne.n	800752e <HAL_PCD_EP_DB_Transmit+0xc8>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	4413      	add	r3, r2
 80074f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	011a      	lsls	r2, r3, #4
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	4413      	add	r3, r2
 8007502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007512:	b29a      	uxth	r2, r3
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	801a      	strh	r2, [r3, #0]
 800752c:	e01a      	b.n	8007564 <HAL_PCD_EP_DB_Transmit+0xfe>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	785b      	ldrb	r3, [r3, #1]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d116      	bne.n	8007564 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007544:	b29b      	uxth	r3, r3
 8007546:	461a      	mov	r2, r3
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	4413      	add	r3, r2
 800754c:	633b      	str	r3, [r7, #48]	; 0x30
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	011a      	lsls	r2, r3, #4
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	4413      	add	r3, r2
 8007558:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	2200      	movs	r2, #0
 8007562:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	623b      	str	r3, [r7, #32]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d126      	bne.n	80075c0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007580:	b29b      	uxth	r3, r3
 8007582:	461a      	mov	r2, r3
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	4413      	add	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	011a      	lsls	r2, r3, #4
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	4413      	add	r3, r2
 8007594:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	e017      	b.n	80075f0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d113      	bne.n	80075f0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	4413      	add	r3, r2
 80075d8:	623b      	str	r3, [r7, #32]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	011a      	lsls	r2, r3, #4
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	4413      	add	r3, r2
 80075e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075e8:	61fb      	str	r3, [r7, #28]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	2200      	movs	r2, #0
 80075ee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	4619      	mov	r1, r3
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f006 fcaf 	bl	800df5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 82d4 	beq.w	8007bb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007622:	827b      	strh	r3, [r7, #18]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	441a      	add	r2, r3
 8007632:	8a7b      	ldrh	r3, [r7, #18]
 8007634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007644:	b29b      	uxth	r3, r3
 8007646:	8013      	strh	r3, [r2, #0]
 8007648:	e2b2      	b.n	8007bb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d021      	beq.n	8007698 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	441a      	add	r2, r3
 8007680:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007684:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007688:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	b29b      	uxth	r3, r3
 8007696:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800769e:	2b01      	cmp	r3, #1
 80076a0:	f040 8286 	bne.w	8007bb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	695a      	ldr	r2, [r3, #20]
 80076a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076ac:	441a      	add	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076ba:	441a      	add	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	6a1a      	ldr	r2, [r3, #32]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d309      	bcc.n	80076e0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6a1a      	ldr	r2, [r3, #32]
 80076d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d8:	1ad2      	subs	r2, r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	621a      	str	r2, [r3, #32]
 80076de:	e015      	b.n	800770c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d107      	bne.n	80076f8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80076e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80076f6:	e009      	b.n	800770c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2200      	movs	r2, #0
 800770a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d155      	bne.n	80077c0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	63bb      	str	r3, [r7, #56]	; 0x38
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007722:	b29b      	uxth	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	4413      	add	r3, r2
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	011a      	lsls	r2, r3, #4
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	4413      	add	r3, r2
 8007736:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800773a:	637b      	str	r3, [r7, #52]	; 0x34
 800773c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773e:	2b00      	cmp	r3, #0
 8007740:	d112      	bne.n	8007768 <HAL_PCD_EP_DB_Transmit+0x302>
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800774c:	b29a      	uxth	r2, r3
 800774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007750:	801a      	strh	r2, [r3, #0]
 8007752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	b29b      	uxth	r3, r3
 8007758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800775c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007760:	b29a      	uxth	r2, r3
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007764:	801a      	strh	r2, [r3, #0]
 8007766:	e047      	b.n	80077f8 <HAL_PCD_EP_DB_Transmit+0x392>
 8007768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800776a:	2b3e      	cmp	r3, #62	; 0x3e
 800776c:	d811      	bhi.n	8007792 <HAL_PCD_EP_DB_Transmit+0x32c>
 800776e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	64bb      	str	r3, [r7, #72]	; 0x48
 8007774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_PCD_EP_DB_Transmit+0x31e>
 800777e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007780:	3301      	adds	r3, #1
 8007782:	64bb      	str	r3, [r7, #72]	; 0x48
 8007784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007786:	b29b      	uxth	r3, r3
 8007788:	029b      	lsls	r3, r3, #10
 800778a:	b29a      	uxth	r2, r3
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	e032      	b.n	80077f8 <HAL_PCD_EP_DB_Transmit+0x392>
 8007792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	64bb      	str	r3, [r7, #72]	; 0x48
 8007798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <HAL_PCD_EP_DB_Transmit+0x342>
 80077a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a4:	3b01      	subs	r3, #1
 80077a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80077a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	801a      	strh	r2, [r3, #0]
 80077be:	e01b      	b.n	80077f8 <HAL_PCD_EP_DB_Transmit+0x392>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d117      	bne.n	80077f8 <HAL_PCD_EP_DB_Transmit+0x392>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	643b      	str	r3, [r7, #64]	; 0x40
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077dc:	4413      	add	r3, r2
 80077de:	643b      	str	r3, [r7, #64]	; 0x40
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	011a      	lsls	r2, r3, #4
 80077e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e8:	4413      	add	r3, r2
 80077ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6959      	ldr	r1, [r3, #20]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	891a      	ldrh	r2, [r3, #8]
 8007804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007806:	b29b      	uxth	r3, r3
 8007808:	f004 fc93 	bl	800c132 <USB_WritePMA>
 800780c:	e1d0      	b.n	8007bb0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007816:	b29b      	uxth	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	4413      	add	r3, r2
 8007822:	3306      	adds	r3, #6
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	6812      	ldr	r2, [r2, #0]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007836:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007842:	429a      	cmp	r2, r3
 8007844:	d307      	bcc.n	8007856 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	619a      	str	r2, [r3, #24]
 8007854:	e002      	b.n	800785c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2200      	movs	r2, #0
 800785a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f040 80c4 	bne.w	80079ee <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d126      	bne.n	80078bc <HAL_PCD_EP_DB_Transmit+0x456>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787c:	b29b      	uxth	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007882:	4413      	add	r3, r2
 8007884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	011a      	lsls	r2, r3, #4
 800788c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788e:	4413      	add	r3, r2
 8007890:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007894:	66bb      	str	r3, [r7, #104]	; 0x68
 8007896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078a4:	801a      	strh	r2, [r3, #0]
 80078a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078b8:	801a      	strh	r2, [r3, #0]
 80078ba:	e01a      	b.n	80078f2 <HAL_PCD_EP_DB_Transmit+0x48c>
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	785b      	ldrb	r3, [r3, #1]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d116      	bne.n	80078f2 <HAL_PCD_EP_DB_Transmit+0x48c>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	677b      	str	r3, [r7, #116]	; 0x74
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078d8:	4413      	add	r3, r2
 80078da:	677b      	str	r3, [r7, #116]	; 0x74
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	011a      	lsls	r2, r3, #4
 80078e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e4:	4413      	add	r3, r2
 80078e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078ea:	673b      	str	r3, [r7, #112]	; 0x70
 80078ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078ee:	2200      	movs	r2, #0
 80078f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d12f      	bne.n	8007960 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007910:	b29b      	uxth	r3, r3
 8007912:	461a      	mov	r2, r3
 8007914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007918:	4413      	add	r3, r2
 800791a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	011a      	lsls	r2, r3, #4
 8007924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007928:	4413      	add	r3, r2
 800792a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800792e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007932:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800793e:	b29a      	uxth	r2, r3
 8007940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007944:	801a      	strh	r2, [r3, #0]
 8007946:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007956:	b29a      	uxth	r2, r3
 8007958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	e017      	b.n	8007990 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d113      	bne.n	8007990 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007970:	b29b      	uxth	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007976:	4413      	add	r3, r2
 8007978:	67bb      	str	r3, [r7, #120]	; 0x78
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	011a      	lsls	r2, r3, #4
 8007980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007982:	4413      	add	r3, r2
 8007984:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007988:	67fb      	str	r3, [r7, #124]	; 0x7c
 800798a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800798c:	2200      	movs	r2, #0
 800798e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	4619      	mov	r1, r3
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f006 fadf 	bl	800df5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f040 8104 	bne.w	8007bb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	441a      	add	r2, r3
 80079d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80079d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	8013      	strh	r3, [r2, #0]
 80079ec:	e0e0      	b.n	8007bb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d121      	bne.n	8007a3c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	441a      	add	r2, r3
 8007a24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	f040 80b4 	bne.w	8007bb0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a50:	441a      	add	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	69da      	ldr	r2, [r3, #28]
 8007a5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a5e:	441a      	add	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d309      	bcc.n	8007a84 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6a1a      	ldr	r2, [r3, #32]
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7c:	1ad2      	subs	r2, r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	621a      	str	r2, [r3, #32]
 8007a82:	e015      	b.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8007a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007a9a:	e009      	b.n	8007ab0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d155      	bne.n	8007b6a <HAL_PCD_EP_DB_Transmit+0x704>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad2:	4413      	add	r3, r2
 8007ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	011a      	lsls	r2, r3, #4
 8007adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ade:	4413      	add	r3, r2
 8007ae0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d112      	bne.n	8007b12 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007afa:	801a      	strh	r2, [r3, #0]
 8007afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	e044      	b.n	8007b9c <HAL_PCD_EP_DB_Transmit+0x736>
 8007b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b14:	2b3e      	cmp	r3, #62	; 0x3e
 8007b16:	d811      	bhi.n	8007b3c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8007b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8007b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8007b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	029b      	lsls	r3, r3, #10
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b38:	801a      	strh	r2, [r3, #0]
 8007b3a:	e02f      	b.n	8007b9c <HAL_PCD_EP_DB_Transmit+0x736>
 8007b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3e:	095b      	lsrs	r3, r3, #5
 8007b40:	657b      	str	r3, [r7, #84]	; 0x54
 8007b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b44:	f003 031f 	and.w	r3, r3, #31
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8007b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	657b      	str	r3, [r7, #84]	; 0x54
 8007b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	029b      	lsls	r3, r3, #10
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b66:	801a      	strh	r2, [r3, #0]
 8007b68:	e018      	b.n	8007b9c <HAL_PCD_EP_DB_Transmit+0x736>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d114      	bne.n	8007b9c <HAL_PCD_EP_DB_Transmit+0x736>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b80:	4413      	add	r3, r2
 8007b82:	667b      	str	r3, [r7, #100]	; 0x64
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	011a      	lsls	r2, r3, #4
 8007b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b92:	663b      	str	r3, [r7, #96]	; 0x60
 8007b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b9a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6959      	ldr	r1, [r3, #20]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	895a      	ldrh	r2, [r3, #10]
 8007ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f004 fac1 	bl	800c132 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bca:	823b      	strh	r3, [r7, #16]
 8007bcc:	8a3b      	ldrh	r3, [r7, #16]
 8007bce:	f083 0310 	eor.w	r3, r3, #16
 8007bd2:	823b      	strh	r3, [r7, #16]
 8007bd4:	8a3b      	ldrh	r3, [r7, #16]
 8007bd6:	f083 0320 	eor.w	r3, r3, #32
 8007bda:	823b      	strh	r3, [r7, #16]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	461a      	mov	r2, r3
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	8a3b      	ldrh	r3, [r7, #16]
 8007bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3788      	adds	r7, #136	; 0x88
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b087      	sub	sp, #28
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	607b      	str	r3, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	817b      	strh	r3, [r7, #10]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007c1c:	897b      	ldrh	r3, [r7, #10]
 8007c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c28:	897b      	ldrh	r3, [r7, #10]
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e009      	b.n	8007c54 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c40:	897a      	ldrh	r2, [r7, #10]
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007c54:	893b      	ldrh	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d107      	bne.n	8007c6a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	80da      	strh	r2, [r3, #6]
 8007c68:	e00b      	b.n	8007c82 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	0c1b      	lsrs	r3, r3, #16
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr
	...

08007c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e26c      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 8087 	beq.w	8007dbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cb0:	4b92      	ldr	r3, [pc, #584]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f003 030c 	and.w	r3, r3, #12
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d00c      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007cbc:	4b8f      	ldr	r3, [pc, #572]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f003 030c 	and.w	r3, r3, #12
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d112      	bne.n	8007cee <HAL_RCC_OscConfig+0x5e>
 8007cc8:	4b8c      	ldr	r3, [pc, #560]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd4:	d10b      	bne.n	8007cee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd6:	4b89      	ldr	r3, [pc, #548]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d06c      	beq.n	8007dbc <HAL_RCC_OscConfig+0x12c>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d168      	bne.n	8007dbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e246      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf6:	d106      	bne.n	8007d06 <HAL_RCC_OscConfig+0x76>
 8007cf8:	4b80      	ldr	r3, [pc, #512]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a7f      	ldr	r2, [pc, #508]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	e02e      	b.n	8007d64 <HAL_RCC_OscConfig+0xd4>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10c      	bne.n	8007d28 <HAL_RCC_OscConfig+0x98>
 8007d0e:	4b7b      	ldr	r3, [pc, #492]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a7a      	ldr	r2, [pc, #488]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	4b78      	ldr	r3, [pc, #480]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a77      	ldr	r2, [pc, #476]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	e01d      	b.n	8007d64 <HAL_RCC_OscConfig+0xd4>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d30:	d10c      	bne.n	8007d4c <HAL_RCC_OscConfig+0xbc>
 8007d32:	4b72      	ldr	r3, [pc, #456]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a71      	ldr	r2, [pc, #452]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	4b6f      	ldr	r3, [pc, #444]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a6e      	ldr	r2, [pc, #440]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e00b      	b.n	8007d64 <HAL_RCC_OscConfig+0xd4>
 8007d4c:	4b6b      	ldr	r3, [pc, #428]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a6a      	ldr	r2, [pc, #424]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	4b68      	ldr	r3, [pc, #416]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a67      	ldr	r2, [pc, #412]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d013      	beq.n	8007d94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d6c:	f7fb fb00 	bl	8003370 <HAL_GetTick>
 8007d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d74:	f7fb fafc 	bl	8003370 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b64      	cmp	r3, #100	; 0x64
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e1fa      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d86:	4b5d      	ldr	r3, [pc, #372]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f0      	beq.n	8007d74 <HAL_RCC_OscConfig+0xe4>
 8007d92:	e014      	b.n	8007dbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d94:	f7fb faec 	bl	8003370 <HAL_GetTick>
 8007d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d9c:	f7fb fae8 	bl	8003370 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b64      	cmp	r3, #100	; 0x64
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e1e6      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dae:	4b53      	ldr	r3, [pc, #332]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1f0      	bne.n	8007d9c <HAL_RCC_OscConfig+0x10c>
 8007dba:	e000      	b.n	8007dbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d063      	beq.n	8007e92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007dca:	4b4c      	ldr	r3, [pc, #304]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f003 030c 	and.w	r3, r3, #12
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007dd6:	4b49      	ldr	r3, [pc, #292]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f003 030c 	and.w	r3, r3, #12
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d11c      	bne.n	8007e1c <HAL_RCC_OscConfig+0x18c>
 8007de2:	4b46      	ldr	r3, [pc, #280]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d116      	bne.n	8007e1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dee:	4b43      	ldr	r3, [pc, #268]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d005      	beq.n	8007e06 <HAL_RCC_OscConfig+0x176>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d001      	beq.n	8007e06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e1ba      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e06:	4b3d      	ldr	r3, [pc, #244]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4939      	ldr	r1, [pc, #228]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e1a:	e03a      	b.n	8007e92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d020      	beq.n	8007e66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e24:	4b36      	ldr	r3, [pc, #216]	; (8007f00 <HAL_RCC_OscConfig+0x270>)
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e2a:	f7fb faa1 	bl	8003370 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e30:	e008      	b.n	8007e44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e32:	f7fb fa9d 	bl	8003370 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e19b      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e44:	4b2d      	ldr	r3, [pc, #180]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d0f0      	beq.n	8007e32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e50:	4b2a      	ldr	r3, [pc, #168]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	4927      	ldr	r1, [pc, #156]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	600b      	str	r3, [r1, #0]
 8007e64:	e015      	b.n	8007e92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e66:	4b26      	ldr	r3, [pc, #152]	; (8007f00 <HAL_RCC_OscConfig+0x270>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e6c:	f7fb fa80 	bl	8003370 <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e74:	f7fb fa7c 	bl	8003370 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e17a      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e86:	4b1d      	ldr	r3, [pc, #116]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1f0      	bne.n	8007e74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d03a      	beq.n	8007f14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d019      	beq.n	8007eda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ea6:	4b17      	ldr	r3, [pc, #92]	; (8007f04 <HAL_RCC_OscConfig+0x274>)
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eac:	f7fb fa60 	bl	8003370 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007eb4:	f7fb fa5c 	bl	8003370 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e15a      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <HAL_RCC_OscConfig+0x26c>)
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0f0      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	f000 fad8 	bl	8008488 <RCC_Delay>
 8007ed8:	e01c      	b.n	8007f14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eda:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <HAL_RCC_OscConfig+0x274>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ee0:	f7fb fa46 	bl	8003370 <HAL_GetTick>
 8007ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee6:	e00f      	b.n	8007f08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ee8:	f7fb fa42 	bl	8003370 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d908      	bls.n	8007f08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e140      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
 8007efa:	bf00      	nop
 8007efc:	40021000 	.word	0x40021000
 8007f00:	42420000 	.word	0x42420000
 8007f04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f08:	4b9e      	ldr	r3, [pc, #632]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e9      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 80a6 	beq.w	800806e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f22:	2300      	movs	r3, #0
 8007f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f26:	4b97      	ldr	r3, [pc, #604]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10d      	bne.n	8007f4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f32:	4b94      	ldr	r3, [pc, #592]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	4a93      	ldr	r2, [pc, #588]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f3c:	61d3      	str	r3, [r2, #28]
 8007f3e:	4b91      	ldr	r3, [pc, #580]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f46:	60bb      	str	r3, [r7, #8]
 8007f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f4e:	4b8e      	ldr	r3, [pc, #568]	; (8008188 <HAL_RCC_OscConfig+0x4f8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d118      	bne.n	8007f8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f5a:	4b8b      	ldr	r3, [pc, #556]	; (8008188 <HAL_RCC_OscConfig+0x4f8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a8a      	ldr	r2, [pc, #552]	; (8008188 <HAL_RCC_OscConfig+0x4f8>)
 8007f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f66:	f7fb fa03 	bl	8003370 <HAL_GetTick>
 8007f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f6c:	e008      	b.n	8007f80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f6e:	f7fb f9ff 	bl	8003370 <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	2b64      	cmp	r3, #100	; 0x64
 8007f7a:	d901      	bls.n	8007f80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e0fd      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f80:	4b81      	ldr	r3, [pc, #516]	; (8008188 <HAL_RCC_OscConfig+0x4f8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0f0      	beq.n	8007f6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d106      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x312>
 8007f94:	4b7b      	ldr	r3, [pc, #492]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	4a7a      	ldr	r2, [pc, #488]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007f9a:	f043 0301 	orr.w	r3, r3, #1
 8007f9e:	6213      	str	r3, [r2, #32]
 8007fa0:	e02d      	b.n	8007ffe <HAL_RCC_OscConfig+0x36e>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10c      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x334>
 8007faa:	4b76      	ldr	r3, [pc, #472]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	4a75      	ldr	r2, [pc, #468]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	6213      	str	r3, [r2, #32]
 8007fb6:	4b73      	ldr	r3, [pc, #460]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	4a72      	ldr	r2, [pc, #456]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fbc:	f023 0304 	bic.w	r3, r3, #4
 8007fc0:	6213      	str	r3, [r2, #32]
 8007fc2:	e01c      	b.n	8007ffe <HAL_RCC_OscConfig+0x36e>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	2b05      	cmp	r3, #5
 8007fca:	d10c      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x356>
 8007fcc:	4b6d      	ldr	r3, [pc, #436]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	4a6c      	ldr	r2, [pc, #432]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fd2:	f043 0304 	orr.w	r3, r3, #4
 8007fd6:	6213      	str	r3, [r2, #32]
 8007fd8:	4b6a      	ldr	r3, [pc, #424]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	4a69      	ldr	r2, [pc, #420]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	6213      	str	r3, [r2, #32]
 8007fe4:	e00b      	b.n	8007ffe <HAL_RCC_OscConfig+0x36e>
 8007fe6:	4b67      	ldr	r3, [pc, #412]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	4a66      	ldr	r2, [pc, #408]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	6213      	str	r3, [r2, #32]
 8007ff2:	4b64      	ldr	r3, [pc, #400]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	4a63      	ldr	r2, [pc, #396]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8007ff8:	f023 0304 	bic.w	r3, r3, #4
 8007ffc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d015      	beq.n	8008032 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008006:	f7fb f9b3 	bl	8003370 <HAL_GetTick>
 800800a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800800c:	e00a      	b.n	8008024 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800800e:	f7fb f9af 	bl	8003370 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	f241 3288 	movw	r2, #5000	; 0x1388
 800801c:	4293      	cmp	r3, r2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e0ab      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008024:	4b57      	ldr	r3, [pc, #348]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0ee      	beq.n	800800e <HAL_RCC_OscConfig+0x37e>
 8008030:	e014      	b.n	800805c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008032:	f7fb f99d 	bl	8003370 <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008038:	e00a      	b.n	8008050 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800803a:	f7fb f999 	bl	8003370 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	f241 3288 	movw	r2, #5000	; 0x1388
 8008048:	4293      	cmp	r3, r2
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e095      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008050:	4b4c      	ldr	r3, [pc, #304]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8008052:	6a1b      	ldr	r3, [r3, #32]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1ee      	bne.n	800803a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d105      	bne.n	800806e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008062:	4b48      	ldr	r3, [pc, #288]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	4a47      	ldr	r2, [pc, #284]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8008068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800806c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8081 	beq.w	800817a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008078:	4b42      	ldr	r3, [pc, #264]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f003 030c 	and.w	r3, r3, #12
 8008080:	2b08      	cmp	r3, #8
 8008082:	d061      	beq.n	8008148 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d146      	bne.n	800811a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800808c:	4b3f      	ldr	r3, [pc, #252]	; (800818c <HAL_RCC_OscConfig+0x4fc>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008092:	f7fb f96d 	bl	8003370 <HAL_GetTick>
 8008096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008098:	e008      	b.n	80080ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800809a:	f7fb f969 	bl	8003370 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e067      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080ac:	4b35      	ldr	r3, [pc, #212]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1f0      	bne.n	800809a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c0:	d108      	bne.n	80080d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80080c2:	4b30      	ldr	r3, [pc, #192]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	492d      	ldr	r1, [pc, #180]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080d4:	4b2b      	ldr	r3, [pc, #172]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a19      	ldr	r1, [r3, #32]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	430b      	orrs	r3, r1
 80080e6:	4927      	ldr	r1, [pc, #156]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080ec:	4b27      	ldr	r3, [pc, #156]	; (800818c <HAL_RCC_OscConfig+0x4fc>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080f2:	f7fb f93d 	bl	8003370 <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80080f8:	e008      	b.n	800810c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080fa:	f7fb f939 	bl	8003370 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d901      	bls.n	800810c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e037      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800810c:	4b1d      	ldr	r3, [pc, #116]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0f0      	beq.n	80080fa <HAL_RCC_OscConfig+0x46a>
 8008118:	e02f      	b.n	800817a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800811a:	4b1c      	ldr	r3, [pc, #112]	; (800818c <HAL_RCC_OscConfig+0x4fc>)
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008120:	f7fb f926 	bl	8003370 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008128:	f7fb f922 	bl	8003370 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e020      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x498>
 8008146:	e018      	b.n	800817a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e013      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <HAL_RCC_OscConfig+0x4f4>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	429a      	cmp	r2, r3
 8008166:	d106      	bne.n	8008176 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008172:	429a      	cmp	r2, r3
 8008174:	d001      	beq.n	800817a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40021000 	.word	0x40021000
 8008188:	40007000 	.word	0x40007000
 800818c:	42420060 	.word	0x42420060

08008190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0d0      	b.n	8008346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081a4:	4b6a      	ldr	r3, [pc, #424]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d910      	bls.n	80081d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081b2:	4b67      	ldr	r3, [pc, #412]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f023 0207 	bic.w	r2, r3, #7
 80081ba:	4965      	ldr	r1, [pc, #404]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	4313      	orrs	r3, r2
 80081c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081c2:	4b63      	ldr	r3, [pc, #396]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d001      	beq.n	80081d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0b8      	b.n	8008346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d020      	beq.n	8008222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081ec:	4b59      	ldr	r3, [pc, #356]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	4a58      	ldr	r2, [pc, #352]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 80081f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80081f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008204:	4b53      	ldr	r3, [pc, #332]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	4a52      	ldr	r2, [pc, #328]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 800820a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800820e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008210:	4b50      	ldr	r3, [pc, #320]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	494d      	ldr	r1, [pc, #308]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 800821e:	4313      	orrs	r3, r2
 8008220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d040      	beq.n	80082b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d107      	bne.n	8008246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008236:	4b47      	ldr	r3, [pc, #284]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d115      	bne.n	800826e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e07f      	b.n	8008346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d107      	bne.n	800825e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800824e:	4b41      	ldr	r3, [pc, #260]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d109      	bne.n	800826e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e073      	b.n	8008346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800825e:	4b3d      	ldr	r3, [pc, #244]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0302 	and.w	r3, r3, #2
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e06b      	b.n	8008346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800826e:	4b39      	ldr	r3, [pc, #228]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f023 0203 	bic.w	r2, r3, #3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	4936      	ldr	r1, [pc, #216]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 800827c:	4313      	orrs	r3, r2
 800827e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008280:	f7fb f876 	bl	8003370 <HAL_GetTick>
 8008284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008286:	e00a      	b.n	800829e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008288:	f7fb f872 	bl	8003370 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	f241 3288 	movw	r2, #5000	; 0x1388
 8008296:	4293      	cmp	r3, r2
 8008298:	d901      	bls.n	800829e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e053      	b.n	8008346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800829e:	4b2d      	ldr	r3, [pc, #180]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f003 020c 	and.w	r2, r3, #12
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d1eb      	bne.n	8008288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082b0:	4b27      	ldr	r3, [pc, #156]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d210      	bcs.n	80082e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082be:	4b24      	ldr	r3, [pc, #144]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f023 0207 	bic.w	r2, r3, #7
 80082c6:	4922      	ldr	r1, [pc, #136]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ce:	4b20      	ldr	r3, [pc, #128]	; (8008350 <HAL_RCC_ClockConfig+0x1c0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d001      	beq.n	80082e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e032      	b.n	8008346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d008      	beq.n	80082fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082ec:	4b19      	ldr	r3, [pc, #100]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	4916      	ldr	r1, [pc, #88]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800830a:	4b12      	ldr	r3, [pc, #72]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	490e      	ldr	r1, [pc, #56]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 800831a:	4313      	orrs	r3, r2
 800831c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800831e:	f000 f821 	bl	8008364 <HAL_RCC_GetSysClockFreq>
 8008322:	4602      	mov	r2, r0
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <HAL_RCC_ClockConfig+0x1c4>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	091b      	lsrs	r3, r3, #4
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	490a      	ldr	r1, [pc, #40]	; (8008358 <HAL_RCC_ClockConfig+0x1c8>)
 8008330:	5ccb      	ldrb	r3, [r1, r3]
 8008332:	fa22 f303 	lsr.w	r3, r2, r3
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <HAL_RCC_ClockConfig+0x1cc>)
 8008338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <HAL_RCC_ClockConfig+0x1d0>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f7fa ffd4 	bl	80032ec <HAL_InitTick>

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40022000 	.word	0x40022000
 8008354:	40021000 	.word	0x40021000
 8008358:	0800ee1c 	.word	0x0800ee1c
 800835c:	20000000 	.word	0x20000000
 8008360:	20000004 	.word	0x20000004

08008364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008364:	b490      	push	{r4, r7}
 8008366:	b08a      	sub	sp, #40	; 0x28
 8008368:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800836a:	4b2a      	ldr	r3, [pc, #168]	; (8008414 <HAL_RCC_GetSysClockFreq+0xb0>)
 800836c:	1d3c      	adds	r4, r7, #4
 800836e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008374:	f240 2301 	movw	r3, #513	; 0x201
 8008378:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	2300      	movs	r3, #0
 8008380:	61bb      	str	r3, [r7, #24]
 8008382:	2300      	movs	r3, #0
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
 8008386:	2300      	movs	r3, #0
 8008388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800838e:	4b22      	ldr	r3, [pc, #136]	; (8008418 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 030c 	and.w	r3, r3, #12
 800839a:	2b04      	cmp	r3, #4
 800839c:	d002      	beq.n	80083a4 <HAL_RCC_GetSysClockFreq+0x40>
 800839e:	2b08      	cmp	r3, #8
 80083a0:	d003      	beq.n	80083aa <HAL_RCC_GetSysClockFreq+0x46>
 80083a2:	e02d      	b.n	8008400 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083a4:	4b1d      	ldr	r3, [pc, #116]	; (800841c <HAL_RCC_GetSysClockFreq+0xb8>)
 80083a6:	623b      	str	r3, [r7, #32]
      break;
 80083a8:	e02d      	b.n	8008406 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	0c9b      	lsrs	r3, r3, #18
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083b6:	4413      	add	r3, r2
 80083b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80083bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d013      	beq.n	80083f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80083c8:	4b13      	ldr	r3, [pc, #76]	; (8008418 <HAL_RCC_GetSysClockFreq+0xb4>)
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	0c5b      	lsrs	r3, r3, #17
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80083d6:	4413      	add	r3, r2
 80083d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80083dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	4a0e      	ldr	r2, [pc, #56]	; (800841c <HAL_RCC_GetSysClockFreq+0xb8>)
 80083e2:	fb02 f203 	mul.w	r2, r2, r3
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
 80083ee:	e004      	b.n	80083fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	4a0b      	ldr	r2, [pc, #44]	; (8008420 <HAL_RCC_GetSysClockFreq+0xbc>)
 80083f4:	fb02 f303 	mul.w	r3, r2, r3
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	623b      	str	r3, [r7, #32]
      break;
 80083fe:	e002      	b.n	8008406 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008400:	4b06      	ldr	r3, [pc, #24]	; (800841c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008402:	623b      	str	r3, [r7, #32]
      break;
 8008404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008406:	6a3b      	ldr	r3, [r7, #32]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3728      	adds	r7, #40	; 0x28
 800840c:	46bd      	mov	sp, r7
 800840e:	bc90      	pop	{r4, r7}
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	0800edb8 	.word	0x0800edb8
 8008418:	40021000 	.word	0x40021000
 800841c:	007a1200 	.word	0x007a1200
 8008420:	003d0900 	.word	0x003d0900

08008424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <HAL_RCC_GetHCLKFreq+0x10>)
 800842a:	681b      	ldr	r3, [r3, #0]
}
 800842c:	4618      	mov	r0, r3
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr
 8008434:	20000000 	.word	0x20000000

08008438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800843c:	f7ff fff2 	bl	8008424 <HAL_RCC_GetHCLKFreq>
 8008440:	4602      	mov	r2, r0
 8008442:	4b05      	ldr	r3, [pc, #20]	; (8008458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	4903      	ldr	r1, [pc, #12]	; (800845c <HAL_RCC_GetPCLK1Freq+0x24>)
 800844e:	5ccb      	ldrb	r3, [r1, r3]
 8008450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008454:	4618      	mov	r0, r3
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40021000 	.word	0x40021000
 800845c:	0800ee2c 	.word	0x0800ee2c

08008460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008464:	f7ff ffde 	bl	8008424 <HAL_RCC_GetHCLKFreq>
 8008468:	4602      	mov	r2, r0
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	0adb      	lsrs	r3, r3, #11
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	4903      	ldr	r1, [pc, #12]	; (8008484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008476:	5ccb      	ldrb	r3, [r1, r3]
 8008478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800847c:	4618      	mov	r0, r3
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40021000 	.word	0x40021000
 8008484:	0800ee2c 	.word	0x0800ee2c

08008488 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <RCC_Delay+0x34>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <RCC_Delay+0x38>)
 8008496:	fba2 2303 	umull	r2, r3, r2, r3
 800849a:	0a5b      	lsrs	r3, r3, #9
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80084a4:	bf00      	nop
  }
  while (Delay --);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	1e5a      	subs	r2, r3, #1
 80084aa:	60fa      	str	r2, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1f9      	bne.n	80084a4 <RCC_Delay+0x1c>
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr
 80084bc:	20000000 	.word	0x20000000
 80084c0:	10624dd3 	.word	0x10624dd3

080084c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	613b      	str	r3, [r7, #16]
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d07d      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80084e0:	2300      	movs	r3, #0
 80084e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084e4:	4b4f      	ldr	r3, [pc, #316]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10d      	bne.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084f0:	4b4c      	ldr	r3, [pc, #304]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	4a4b      	ldr	r2, [pc, #300]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fa:	61d3      	str	r3, [r2, #28]
 80084fc:	4b49      	ldr	r3, [pc, #292]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008504:	60bb      	str	r3, [r7, #8]
 8008506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008508:	2301      	movs	r3, #1
 800850a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800850c:	4b46      	ldr	r3, [pc, #280]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d118      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008518:	4b43      	ldr	r3, [pc, #268]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a42      	ldr	r2, [pc, #264]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800851e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008524:	f7fa ff24 	bl	8003370 <HAL_GetTick>
 8008528:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800852a:	e008      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800852c:	f7fa ff20 	bl	8003370 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b64      	cmp	r3, #100	; 0x64
 8008538:	d901      	bls.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e06d      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800853e:	4b3a      	ldr	r3, [pc, #232]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f0      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800854a:	4b36      	ldr	r3, [pc, #216]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008552:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d02e      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	429a      	cmp	r2, r3
 8008566:	d027      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008568:	4b2e      	ldr	r3, [pc, #184]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008570:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008572:	4b2e      	ldr	r3, [pc, #184]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008578:	4b2c      	ldr	r3, [pc, #176]	; (800862c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800857a:	2200      	movs	r2, #0
 800857c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800857e:	4a29      	ldr	r2, [pc, #164]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d014      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800858e:	f7fa feef 	bl	8003370 <HAL_GetTick>
 8008592:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008594:	e00a      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008596:	f7fa feeb 	bl	8003370 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d901      	bls.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e036      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085ac:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0ee      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085b8:	4b1a      	ldr	r3, [pc, #104]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4917      	ldr	r1, [pc, #92]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d105      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085d0:	4b14      	ldr	r3, [pc, #80]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	4a13      	ldr	r2, [pc, #76]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085e8:	4b0e      	ldr	r3, [pc, #56]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	490b      	ldr	r1, [pc, #44]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0310 	and.w	r3, r3, #16
 8008602:	2b00      	cmp	r3, #0
 8008604:	d008      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008606:	4b07      	ldr	r3, [pc, #28]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	4904      	ldr	r1, [pc, #16]	; (8008624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008614:	4313      	orrs	r3, r2
 8008616:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	40021000 	.word	0x40021000
 8008628:	40007000 	.word	0x40007000
 800862c:	42420440 	.word	0x42420440

08008630 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b08d      	sub	sp, #52	; 0x34
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008638:	4b5a      	ldr	r3, [pc, #360]	; (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800863a:	f107 040c 	add.w	r4, r7, #12
 800863e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008644:	f240 2301 	movw	r3, #513	; 0x201
 8008648:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
 800864e:	2300      	movs	r3, #0
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008652:	2300      	movs	r3, #0
 8008654:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	61fb      	str	r3, [r7, #28]
 800865a:	2300      	movs	r3, #0
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b10      	cmp	r3, #16
 8008662:	d00a      	beq.n	800867a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b10      	cmp	r3, #16
 8008668:	f200 8091 	bhi.w	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d04c      	beq.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b02      	cmp	r3, #2
 8008676:	d07c      	beq.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8008678:	e089      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800867a:	4b4b      	ldr	r3, [pc, #300]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008680:	4b49      	ldr	r3, [pc, #292]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 8082 	beq.w	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	0c9b      	lsrs	r3, r3, #18
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800869a:	4413      	add	r3, r2
 800869c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80086a0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d018      	beq.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80086ac:	4b3e      	ldr	r3, [pc, #248]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	0c5b      	lsrs	r3, r3, #17
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80086ba:	4413      	add	r3, r2
 80086bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00d      	beq.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80086cc:	4a37      	ldr	r2, [pc, #220]	; (80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	fb02 f303 	mul.w	r3, r2, r3
 80086da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086dc:	e004      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	4a33      	ldr	r2, [pc, #204]	; (80087b0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80086e8:	4b2f      	ldr	r3, [pc, #188]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086f4:	d102      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80086fa:	e04a      	b.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	4a2c      	ldr	r2, [pc, #176]	; (80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8008702:	fba2 2303 	umull	r2, r3, r2, r3
 8008706:	085b      	lsrs	r3, r3, #1
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800870a:	e042      	b.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800870c:	4b26      	ldr	r3, [pc, #152]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871c:	d108      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8008728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
 800872e:	e01f      	b.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873a:	d109      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800873c:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8008748:	f649 4340 	movw	r3, #40000	; 0x9c40
 800874c:	62bb      	str	r3, [r7, #40]	; 0x28
 800874e:	e00f      	b.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875a:	d11c      	bne.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800875c:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d016      	beq.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8008768:	f24f 4324 	movw	r3, #62500	; 0xf424
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800876e:	e012      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8008770:	e011      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008772:	f7ff fe75 	bl	8008460 <HAL_RCC_GetPCLK2Freq>
 8008776:	4602      	mov	r2, r0
 8008778:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	0b9b      	lsrs	r3, r3, #14
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	3301      	adds	r3, #1
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	fbb2 f3f3 	udiv	r3, r2, r3
 800878a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800878c:	e004      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8008796:	bf00      	nop
    }
  }
  return (frequency);
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800879a:	4618      	mov	r0, r3
 800879c:	3734      	adds	r7, #52	; 0x34
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd90      	pop	{r4, r7, pc}
 80087a2:	bf00      	nop
 80087a4:	0800edc8 	.word	0x0800edc8
 80087a8:	40021000 	.word	0x40021000
 80087ac:	007a1200 	.word	0x007a1200
 80087b0:	003d0900 	.word	0x003d0900
 80087b4:	aaaaaaab 	.word	0xaaaaaaab

080087b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e076      	b.n	80088b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d108      	bne.n	80087e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087da:	d009      	beq.n	80087f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	61da      	str	r2, [r3, #28]
 80087e2:	e005      	b.n	80087f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d106      	bne.n	8008810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7fa fb3e 	bl	8002e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008826:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008874:	ea42 0103 	orr.w	r1, r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800887c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	0c1a      	lsrs	r2, r3, #16
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f002 0204 	and.w	r2, r2, #4
 8008896:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	69da      	ldr	r2, [r3, #28]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e041      	b.n	8008956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7fa fb1a 	bl	8002f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f000 fb34 	bl	8008f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e041      	b.n	80089f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d106      	bne.n	800898a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7fa fb03 	bl	8002f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2202      	movs	r2, #2
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	3304      	adds	r3, #4
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f000 fae5 	bl	8008f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d122      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d11b      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f06f 0202 	mvn.w	r2, #2
 8008a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d003      	beq.n	8008a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa78 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008a44:	e005      	b.n	8008a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa6b 	bl	8008f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa7a 	bl	8008f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d122      	bne.n	8008aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d11b      	bne.n	8008aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f06f 0204 	mvn.w	r2, #4
 8008a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa4e 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008a98:	e005      	b.n	8008aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa41 	bl	8008f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa50 	bl	8008f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	d122      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d11b      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f06f 0208 	mvn.w	r2, #8
 8008ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa24 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008aec:	e005      	b.n	8008afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa17 	bl	8008f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fa26 	bl	8008f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0310 	and.w	r3, r3, #16
 8008b0a:	2b10      	cmp	r3, #16
 8008b0c:	d122      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d11b      	bne.n	8008b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0210 	mvn.w	r2, #16
 8008b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2208      	movs	r2, #8
 8008b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f9fa 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008b40:	e005      	b.n	8008b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f9ed 	bl	8008f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f9fc 	bl	8008f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d10e      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d107      	bne.n	8008b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0201 	mvn.w	r2, #1
 8008b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f9c8 	bl	8008f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8a:	2b80      	cmp	r3, #128	; 0x80
 8008b8c:	d10e      	bne.n	8008bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b98:	2b80      	cmp	r3, #128	; 0x80
 8008b9a:	d107      	bne.n	8008bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fcc7 	bl	800953a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bb6:	2b40      	cmp	r3, #64	; 0x40
 8008bb8:	d10e      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc4:	2b40      	cmp	r3, #64	; 0x40
 8008bc6:	d107      	bne.n	8008bd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9c0 	bl	8008f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d10e      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	d107      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f06f 0220 	mvn.w	r2, #32
 8008bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fc92 	bl	8009528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d101      	bne.n	8008c26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e0ac      	b.n	8008d80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b0c      	cmp	r3, #12
 8008c32:	f200 809f 	bhi.w	8008d74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c71 	.word	0x08008c71
 8008c40:	08008d75 	.word	0x08008d75
 8008c44:	08008d75 	.word	0x08008d75
 8008c48:	08008d75 	.word	0x08008d75
 8008c4c:	08008cb1 	.word	0x08008cb1
 8008c50:	08008d75 	.word	0x08008d75
 8008c54:	08008d75 	.word	0x08008d75
 8008c58:	08008d75 	.word	0x08008d75
 8008c5c:	08008cf3 	.word	0x08008cf3
 8008c60:	08008d75 	.word	0x08008d75
 8008c64:	08008d75 	.word	0x08008d75
 8008c68:	08008d75 	.word	0x08008d75
 8008c6c:	08008d33 	.word	0x08008d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f9da 	bl	8009030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0208 	orr.w	r2, r2, #8
 8008c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	699a      	ldr	r2, [r3, #24]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0204 	bic.w	r2, r2, #4
 8008c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6999      	ldr	r1, [r3, #24]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	691a      	ldr	r2, [r3, #16]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	619a      	str	r2, [r3, #24]
      break;
 8008cae:	e062      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68b9      	ldr	r1, [r7, #8]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 fa20 	bl	80090fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	699a      	ldr	r2, [r3, #24]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6999      	ldr	r1, [r3, #24]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	021a      	lsls	r2, r3, #8
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	619a      	str	r2, [r3, #24]
      break;
 8008cf0:	e041      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68b9      	ldr	r1, [r7, #8]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fa69 	bl	80091d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	69da      	ldr	r2, [r3, #28]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0208 	orr.w	r2, r2, #8
 8008d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69da      	ldr	r2, [r3, #28]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0204 	bic.w	r2, r2, #4
 8008d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69d9      	ldr	r1, [r3, #28]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	61da      	str	r2, [r3, #28]
      break;
 8008d30:	e021      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fab3 	bl	80092a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69da      	ldr	r2, [r3, #28]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69da      	ldr	r2, [r3, #28]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69d9      	ldr	r1, [r3, #28]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	021a      	lsls	r2, r3, #8
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	61da      	str	r2, [r3, #28]
      break;
 8008d72:	e000      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_TIM_ConfigClockSource+0x18>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e0b3      	b.n	8008f08 <HAL_TIM_ConfigClockSource+0x180>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd8:	d03e      	beq.n	8008e58 <HAL_TIM_ConfigClockSource+0xd0>
 8008dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dde:	f200 8087 	bhi.w	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
 8008de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de6:	f000 8085 	beq.w	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dee:	d87f      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
 8008df0:	2b70      	cmp	r3, #112	; 0x70
 8008df2:	d01a      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0xa2>
 8008df4:	2b70      	cmp	r3, #112	; 0x70
 8008df6:	d87b      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
 8008df8:	2b60      	cmp	r3, #96	; 0x60
 8008dfa:	d050      	beq.n	8008e9e <HAL_TIM_ConfigClockSource+0x116>
 8008dfc:	2b60      	cmp	r3, #96	; 0x60
 8008dfe:	d877      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
 8008e00:	2b50      	cmp	r3, #80	; 0x50
 8008e02:	d03c      	beq.n	8008e7e <HAL_TIM_ConfigClockSource+0xf6>
 8008e04:	2b50      	cmp	r3, #80	; 0x50
 8008e06:	d873      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d058      	beq.n	8008ebe <HAL_TIM_ConfigClockSource+0x136>
 8008e0c:	2b40      	cmp	r3, #64	; 0x40
 8008e0e:	d86f      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
 8008e10:	2b30      	cmp	r3, #48	; 0x30
 8008e12:	d064      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x156>
 8008e14:	2b30      	cmp	r3, #48	; 0x30
 8008e16:	d86b      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
 8008e18:	2b20      	cmp	r3, #32
 8008e1a:	d060      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x156>
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	d867      	bhi.n	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d05c      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x156>
 8008e24:	2b10      	cmp	r3, #16
 8008e26:	d05a      	beq.n	8008ede <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008e28:	e062      	b.n	8008ef0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	6899      	ldr	r1, [r3, #8]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f000 faf8 	bl	800942e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	609a      	str	r2, [r3, #8]
      break;
 8008e56:	e04e      	b.n	8008ef6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	6899      	ldr	r1, [r3, #8]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f000 fae1 	bl	800942e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e7a:	609a      	str	r2, [r3, #8]
      break;
 8008e7c:	e03b      	b.n	8008ef6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6859      	ldr	r1, [r3, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f000 fa58 	bl	8009340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2150      	movs	r1, #80	; 0x50
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 faaf 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8008e9c:	e02b      	b.n	8008ef6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6859      	ldr	r1, [r3, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f000 fa76 	bl	800939c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2160      	movs	r1, #96	; 0x60
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fa9f 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8008ebc:	e01b      	b.n	8008ef6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	6859      	ldr	r1, [r3, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f000 fa38 	bl	8009340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2140      	movs	r1, #64	; 0x40
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fa8f 	bl	80093fa <TIM_ITRx_SetConfig>
      break;
 8008edc:	e00b      	b.n	8008ef6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f000 fa86 	bl	80093fa <TIM_ITRx_SetConfig>
        break;
 8008eee:	e002      	b.n	8008ef6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e000      	b.n	8008ef6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008ef4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bc80      	pop	{r7}
 8008f20:	4770      	bx	lr

08008f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bc80      	pop	{r7}
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr

08008f46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bc80      	pop	{r7}
 8008f56:	4770      	bx	lr

08008f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bc80      	pop	{r7}
 8008f68:	4770      	bx	lr
	...

08008f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a29      	ldr	r2, [pc, #164]	; (8009024 <TIM_Base_SetConfig+0xb8>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00b      	beq.n	8008f9c <TIM_Base_SetConfig+0x30>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8a:	d007      	beq.n	8008f9c <TIM_Base_SetConfig+0x30>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a26      	ldr	r2, [pc, #152]	; (8009028 <TIM_Base_SetConfig+0xbc>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_Base_SetConfig+0x30>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a25      	ldr	r2, [pc, #148]	; (800902c <TIM_Base_SetConfig+0xc0>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d108      	bne.n	8008fae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1c      	ldr	r2, [pc, #112]	; (8009024 <TIM_Base_SetConfig+0xb8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00b      	beq.n	8008fce <TIM_Base_SetConfig+0x62>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fbc:	d007      	beq.n	8008fce <TIM_Base_SetConfig+0x62>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a19      	ldr	r2, [pc, #100]	; (8009028 <TIM_Base_SetConfig+0xbc>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d003      	beq.n	8008fce <TIM_Base_SetConfig+0x62>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a18      	ldr	r2, [pc, #96]	; (800902c <TIM_Base_SetConfig+0xc0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d108      	bne.n	8008fe0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a07      	ldr	r2, [pc, #28]	; (8009024 <TIM_Base_SetConfig+0xb8>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d103      	bne.n	8009014 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	615a      	str	r2, [r3, #20]
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	bc80      	pop	{r7}
 8009022:	4770      	bx	lr
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40000400 	.word	0x40000400
 800902c:	40000800 	.word	0x40000800

08009030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	f023 0201 	bic.w	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0303 	bic.w	r3, r3, #3
 8009066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f023 0302 	bic.w	r3, r3, #2
 8009078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a1c      	ldr	r2, [pc, #112]	; (80090f8 <TIM_OC1_SetConfig+0xc8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d10c      	bne.n	80090a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f023 0308 	bic.w	r3, r3, #8
 8009092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f023 0304 	bic.w	r3, r3, #4
 80090a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a13      	ldr	r2, [pc, #76]	; (80090f8 <TIM_OC1_SetConfig+0xc8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d111      	bne.n	80090d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	697a      	ldr	r2, [r7, #20]
 80090ea:	621a      	str	r2, [r3, #32]
}
 80090ec:	bf00      	nop
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bc80      	pop	{r7}
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40012c00 	.word	0x40012c00

080090fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	f023 0210 	bic.w	r2, r3, #16
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f023 0320 	bic.w	r3, r3, #32
 8009146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a1d      	ldr	r2, [pc, #116]	; (80091cc <TIM_OC2_SetConfig+0xd0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d10d      	bne.n	8009178 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	011b      	lsls	r3, r3, #4
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	4313      	orrs	r3, r2
 800916e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a14      	ldr	r2, [pc, #80]	; (80091cc <TIM_OC2_SetConfig+0xd0>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d113      	bne.n	80091a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800918e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	4313      	orrs	r3, r2
 800919a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	621a      	str	r2, [r3, #32]
}
 80091c2:	bf00      	nop
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bc80      	pop	{r7}
 80091ca:	4770      	bx	lr
 80091cc:	40012c00 	.word	0x40012c00

080091d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	021b      	lsls	r3, r3, #8
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	4313      	orrs	r3, r2
 8009224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a1d      	ldr	r2, [pc, #116]	; (80092a0 <TIM_OC3_SetConfig+0xd0>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d10d      	bne.n	800924a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	021b      	lsls	r3, r3, #8
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	4313      	orrs	r3, r2
 8009240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a14      	ldr	r2, [pc, #80]	; (80092a0 <TIM_OC3_SetConfig+0xd0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d113      	bne.n	800927a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	4313      	orrs	r3, r2
 8009278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	621a      	str	r2, [r3, #32]
}
 8009294:	bf00      	nop
 8009296:	371c      	adds	r7, #28
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	40012c00 	.word	0x40012c00

080092a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	021b      	lsls	r3, r3, #8
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	031b      	lsls	r3, r3, #12
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a0f      	ldr	r2, [pc, #60]	; (800933c <TIM_OC4_SetConfig+0x98>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d109      	bne.n	8009318 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800930a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	019b      	lsls	r3, r3, #6
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	621a      	str	r2, [r3, #32]
}
 8009332:	bf00      	nop
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	bc80      	pop	{r7}
 800933a:	4770      	bx	lr
 800933c:	40012c00 	.word	0x40012c00

08009340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a1b      	ldr	r3, [r3, #32]
 8009350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	f023 0201 	bic.w	r2, r3, #1
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800936a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	011b      	lsls	r3, r3, #4
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	4313      	orrs	r3, r2
 8009374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f023 030a 	bic.w	r3, r3, #10
 800937c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	697a      	ldr	r2, [r7, #20]
 8009390:	621a      	str	r2, [r3, #32]
}
 8009392:	bf00      	nop
 8009394:	371c      	adds	r7, #28
 8009396:	46bd      	mov	sp, r7
 8009398:	bc80      	pop	{r7}
 800939a:	4770      	bx	lr

0800939c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	f023 0210 	bic.w	r2, r3, #16
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	031b      	lsls	r3, r3, #12
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	011b      	lsls	r3, r3, #4
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	621a      	str	r2, [r3, #32]
}
 80093f0:	bf00      	nop
 80093f2:	371c      	adds	r7, #28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr

080093fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4313      	orrs	r3, r2
 8009418:	f043 0307 	orr.w	r3, r3, #7
 800941c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	609a      	str	r2, [r3, #8]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	bc80      	pop	{r7}
 800942c:	4770      	bx	lr

0800942e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800942e:	b480      	push	{r7}
 8009430:	b087      	sub	sp, #28
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	607a      	str	r2, [r7, #4]
 800943a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009448:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	021a      	lsls	r2, r3, #8
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	431a      	orrs	r2, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4313      	orrs	r3, r2
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	4313      	orrs	r3, r2
 800945a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	609a      	str	r2, [r3, #8]
}
 8009462:	bf00      	nop
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr

0800946c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800947c:	2b01      	cmp	r3, #1
 800947e:	d101      	bne.n	8009484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009480:	2302      	movs	r3, #2
 8009482:	e046      	b.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a16      	ldr	r2, [pc, #88]	; (800951c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00e      	beq.n	80094e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d0:	d009      	beq.n	80094e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a12      	ldr	r2, [pc, #72]	; (8009520 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d004      	beq.n	80094e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a10      	ldr	r2, [pc, #64]	; (8009524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d10c      	bne.n	8009500 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	bc80      	pop	{r7}
 800951a:	4770      	bx	lr
 800951c:	40012c00 	.word	0x40012c00
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800

08009528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr

0800953a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr

0800954c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e03f      	b.n	80095de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7f9 fd90 	bl	8003098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2224      	movs	r2, #36	; 0x24
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68da      	ldr	r2, [r3, #12]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800958e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fb49 	bl	8009c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695a      	ldr	r2, [r3, #20]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	; 0x28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009608:	2300      	movs	r3, #0
 800960a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800960c:	2300      	movs	r3, #0
 800960e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10d      	bne.n	800963a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b00      	cmp	r3, #0
 8009626:	d008      	beq.n	800963a <HAL_UART_IRQHandler+0x52>
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fa4f 	bl	8009ad6 <UART_Receive_IT>
      return;
 8009638:	e17b      	b.n	8009932 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 80b1 	beq.w	80097a4 <HAL_UART_IRQHandler+0x1bc>
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d105      	bne.n	8009658 <HAL_UART_IRQHandler+0x70>
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 80a6 	beq.w	80097a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <HAL_UART_IRQHandler+0x90>
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009670:	f043 0201 	orr.w	r2, r3, #1
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00a      	beq.n	8009698 <HAL_UART_IRQHandler+0xb0>
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b00      	cmp	r3, #0
 800968a:	d005      	beq.n	8009698 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009690:	f043 0202 	orr.w	r2, r3, #2
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <HAL_UART_IRQHandler+0xd0>
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b0:	f043 0204 	orr.w	r2, r3, #4
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00f      	beq.n	80096e2 <HAL_UART_IRQHandler+0xfa>
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <HAL_UART_IRQHandler+0xee>
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096da:	f043 0208 	orr.w	r2, r3, #8
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 811e 	beq.w	8009928 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	f003 0320 	and.w	r3, r3, #32
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d007      	beq.n	8009706 <HAL_UART_IRQHandler+0x11e>
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d002      	beq.n	8009706 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f9e8 	bl	8009ad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	bf14      	ite	ne
 8009714:	2301      	movne	r3, #1
 8009716:	2300      	moveq	r3, #0
 8009718:	b2db      	uxtb	r3, r3
 800971a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b00      	cmp	r3, #0
 8009726:	d102      	bne.n	800972e <HAL_UART_IRQHandler+0x146>
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d031      	beq.n	8009792 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f92a 	bl	8009988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973e:	2b00      	cmp	r3, #0
 8009740:	d023      	beq.n	800978a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	695a      	ldr	r2, [r3, #20]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009750:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	2b00      	cmp	r3, #0
 8009758:	d013      	beq.n	8009782 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975e:	4a76      	ldr	r2, [pc, #472]	; (8009938 <HAL_UART_IRQHandler+0x350>)
 8009760:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009766:	4618      	mov	r0, r3
 8009768:	f7fa fcaa 	bl	80040c0 <HAL_DMA_Abort_IT>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d016      	beq.n	80097a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800977c:	4610      	mov	r0, r2
 800977e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009780:	e00e      	b.n	80097a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f8ec 	bl	8009960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009788:	e00a      	b.n	80097a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f8e8 	bl	8009960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009790:	e006      	b.n	80097a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f8e4 	bl	8009960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800979e:	e0c3      	b.n	8009928 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a0:	bf00      	nop
    return;
 80097a2:	e0c1      	b.n	8009928 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	f040 80a1 	bne.w	80098f0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	f003 0310 	and.w	r3, r3, #16
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 809b 	beq.w	80098f0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	f003 0310 	and.w	r3, r3, #16
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 8095 	beq.w	80098f0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d04e      	beq.n	8009888 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80097f4:	8a3b      	ldrh	r3, [r7, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 8098 	beq.w	800992c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009800:	8a3a      	ldrh	r2, [r7, #16]
 8009802:	429a      	cmp	r2, r3
 8009804:	f080 8092 	bcs.w	800992c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	8a3a      	ldrh	r2, [r7, #16]
 800980c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	2b20      	cmp	r3, #32
 8009816:	d02b      	beq.n	8009870 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68da      	ldr	r2, [r3, #12]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009826:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	695a      	ldr	r2, [r3, #20]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0201 	bic.w	r2, r2, #1
 8009836:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	695a      	ldr	r2, [r3, #20]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009846:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2220      	movs	r2, #32
 800984c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0210 	bic.w	r2, r2, #16
 8009864:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986a:	4618      	mov	r0, r3
 800986c:	f7fa fbed 	bl	800404a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009878:	b29b      	uxth	r3, r3
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	b29b      	uxth	r3, r3
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f876 	bl	8009972 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009886:	e051      	b.n	800992c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009890:	b29b      	uxth	r3, r3
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800989a:	b29b      	uxth	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d047      	beq.n	8009930 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80098a0:	8a7b      	ldrh	r3, [r7, #18]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d044      	beq.n	8009930 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68da      	ldr	r2, [r3, #12]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098b4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	695a      	ldr	r2, [r3, #20]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2220      	movs	r2, #32
 80098ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 0210 	bic.w	r2, r2, #16
 80098e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098e4:	8a7b      	ldrh	r3, [r7, #18]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f842 	bl	8009972 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80098ee:	e01f      	b.n	8009930 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d008      	beq.n	800990c <HAL_UART_IRQHandler+0x324>
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f87f 	bl	8009a08 <UART_Transmit_IT>
    return;
 800990a:	e012      	b.n	8009932 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00d      	beq.n	8009932 <HAL_UART_IRQHandler+0x34a>
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991c:	2b00      	cmp	r3, #0
 800991e:	d008      	beq.n	8009932 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f8c0 	bl	8009aa6 <UART_EndTransmit_IT>
    return;
 8009926:	e004      	b.n	8009932 <HAL_UART_IRQHandler+0x34a>
    return;
 8009928:	bf00      	nop
 800992a:	e002      	b.n	8009932 <HAL_UART_IRQHandler+0x34a>
      return;
 800992c:	bf00      	nop
 800992e:	e000      	b.n	8009932 <HAL_UART_IRQHandler+0x34a>
      return;
 8009930:	bf00      	nop
  }
}
 8009932:	3728      	adds	r7, #40	; 0x28
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	080099e1 	.word	0x080099e1

0800993c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr

0800994e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800994e:	b480      	push	{r7}
 8009950:	b083      	sub	sp, #12
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr

08009960 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	bc80      	pop	{r7}
 8009970:	4770      	bx	lr

08009972 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	460b      	mov	r3, r1
 800997c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800997e:	bf00      	nop
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	bc80      	pop	{r7}
 8009986:	4770      	bx	lr

08009988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800999e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	695a      	ldr	r2, [r3, #20]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0201 	bic.w	r2, r2, #1
 80099ae:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d107      	bne.n	80099c8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68da      	ldr	r2, [r3, #12]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0210 	bic.w	r2, r2, #16
 80099c6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2220      	movs	r2, #32
 80099cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	bc80      	pop	{r7}
 80099de:	4770      	bx	lr

080099e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f7ff ffb0 	bl	8009960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b21      	cmp	r3, #33	; 0x21
 8009a1a:	d13e      	bne.n	8009a9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a24:	d114      	bne.n	8009a50 <UART_Transmit_IT+0x48>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d110      	bne.n	8009a50 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	1c9a      	adds	r2, r3, #2
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	621a      	str	r2, [r3, #32]
 8009a4e:	e008      	b.n	8009a62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	1c59      	adds	r1, r3, #1
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	6211      	str	r1, [r2, #32]
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10f      	bne.n	8009a96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68da      	ldr	r2, [r3, #12]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68da      	ldr	r2, [r3, #12]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e000      	b.n	8009a9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a9a:	2302      	movs	r3, #2
  }
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bc80      	pop	{r7}
 8009aa4:	4770      	bx	lr

08009aa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009abc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff ff38 	bl	800993c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b086      	sub	sp, #24
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b22      	cmp	r3, #34	; 0x22
 8009ae8:	f040 8099 	bne.w	8009c1e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af4:	d117      	bne.n	8009b26 <UART_Receive_IT+0x50>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d113      	bne.n	8009b26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b06:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	1c9a      	adds	r2, r3, #2
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	629a      	str	r2, [r3, #40]	; 0x28
 8009b24:	e026      	b.n	8009b74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b38:	d007      	beq.n	8009b4a <UART_Receive_IT+0x74>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10a      	bne.n	8009b58 <UART_Receive_IT+0x82>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	701a      	strb	r2, [r3, #0]
 8009b56:	e008      	b.n	8009b6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	4619      	mov	r1, r3
 8009b82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d148      	bne.n	8009c1a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68da      	ldr	r2, [r3, #12]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 0220 	bic.w	r2, r2, #32
 8009b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68da      	ldr	r2, [r3, #12]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695a      	ldr	r2, [r3, #20]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 0201 	bic.w	r2, r2, #1
 8009bb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d123      	bne.n	8009c10 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f022 0210 	bic.w	r2, r2, #16
 8009bdc:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0310 	and.w	r3, r3, #16
 8009be8:	2b10      	cmp	r3, #16
 8009bea:	d10a      	bne.n	8009c02 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff feb2 	bl	8009972 <HAL_UARTEx_RxEventCallback>
 8009c0e:	e002      	b.n	8009c16 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fe9c 	bl	800994e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	e002      	b.n	8009c20 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e000      	b.n	8009c20 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009c1e:	2302      	movs	r3, #2
  }
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3718      	adds	r7, #24
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	691b      	ldr	r3, [r3, #16]
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009c62:	f023 030c 	bic.w	r3, r3, #12
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	6812      	ldr	r2, [r2, #0]
 8009c6a:	68b9      	ldr	r1, [r7, #8]
 8009c6c:	430b      	orrs	r3, r1
 8009c6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	699a      	ldr	r2, [r3, #24]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a2c      	ldr	r2, [pc, #176]	; (8009d3c <UART_SetConfig+0x114>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d103      	bne.n	8009c98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009c90:	f7fe fbe6 	bl	8008460 <HAL_RCC_GetPCLK2Freq>
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	e002      	b.n	8009c9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009c98:	f7fe fbce 	bl	8008438 <HAL_RCC_GetPCLK1Freq>
 8009c9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009a      	lsls	r2, r3, #2
 8009ca8:	441a      	add	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb4:	4a22      	ldr	r2, [pc, #136]	; (8009d40 <UART_SetConfig+0x118>)
 8009cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cba:	095b      	lsrs	r3, r3, #5
 8009cbc:	0119      	lsls	r1, r3, #4
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009a      	lsls	r2, r3, #2
 8009cc8:	441a      	add	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cd4:	4b1a      	ldr	r3, [pc, #104]	; (8009d40 <UART_SetConfig+0x118>)
 8009cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8009cda:	095b      	lsrs	r3, r3, #5
 8009cdc:	2064      	movs	r0, #100	; 0x64
 8009cde:	fb00 f303 	mul.w	r3, r0, r3
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	3332      	adds	r3, #50	; 0x32
 8009ce8:	4a15      	ldr	r2, [pc, #84]	; (8009d40 <UART_SetConfig+0x118>)
 8009cea:	fba2 2303 	umull	r2, r3, r2, r3
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf4:	4419      	add	r1, r3
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	009a      	lsls	r2, r3, #2
 8009d00:	441a      	add	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d0c:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <UART_SetConfig+0x118>)
 8009d0e:	fba3 0302 	umull	r0, r3, r3, r2
 8009d12:	095b      	lsrs	r3, r3, #5
 8009d14:	2064      	movs	r0, #100	; 0x64
 8009d16:	fb00 f303 	mul.w	r3, r0, r3
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	3332      	adds	r3, #50	; 0x32
 8009d20:	4a07      	ldr	r2, [pc, #28]	; (8009d40 <UART_SetConfig+0x118>)
 8009d22:	fba2 2303 	umull	r2, r3, r2, r3
 8009d26:	095b      	lsrs	r3, r3, #5
 8009d28:	f003 020f 	and.w	r2, r3, #15
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	440a      	add	r2, r1
 8009d32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009d34:	bf00      	nop
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	40013800 	.word	0x40013800
 8009d40:	51eb851f 	.word	0x51eb851f

08009d44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009d44:	b084      	sub	sp, #16
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	f107 0014 	add.w	r0, r7, #20
 8009d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bc80      	pop	{r7}
 8009d60:	b004      	add	sp, #16
 8009d62:	4770      	bx	lr

08009d64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d74:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009d78:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bc80      	pop	{r7}
 8009d8e:	4770      	bx	lr

08009d90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009d98:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009d9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	43db      	mvns	r3, r3
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	4013      	ands	r3, r2
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bc80      	pop	{r7}
 8009dc2:	4770      	bx	lr

08009dc4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bc80      	pop	{r7}
 8009dda:	4770      	bx	lr

08009ddc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009ddc:	b084      	sub	sp, #16
 8009dde:	b480      	push	{r7}
 8009de0:	b083      	sub	sp, #12
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	f107 0014 	add.w	r0, r7, #20
 8009dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bc80      	pop	{r7}
 8009e18:	b004      	add	sp, #16
 8009e1a:	4770      	bx	lr

08009e1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b09b      	sub	sp, #108	; 0x6c
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4413      	add	r3, r2
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	78db      	ldrb	r3, [r3, #3]
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d81f      	bhi.n	8009e8e <USB_ActivateEndpoint+0x72>
 8009e4e:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <USB_ActivateEndpoint+0x38>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009e65 	.word	0x08009e65
 8009e58:	08009e81 	.word	0x08009e81
 8009e5c:	08009e97 	.word	0x08009e97
 8009e60:	08009e73 	.word	0x08009e73
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009e64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009e70:	e012      	b.n	8009e98 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009e72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009e76:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009e7a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009e7e:	e00b      	b.n	8009e98 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009e80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e88:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009e8c:	e004      	b.n	8009e98 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009e94:	e000      	b.n	8009e98 <USB_ActivateEndpoint+0x7c>
      break;
 8009e96:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	441a      	add	r2, r3
 8009ea2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	441a      	add	r2, r3
 8009ee8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	7b1b      	ldrb	r3, [r3, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f040 8149 	bne.w	800a19c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 8084 	beq.w	800a01c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	4413      	add	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	011a      	lsls	r2, r3, #4
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f36:	613b      	str	r3, [r7, #16]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	88db      	ldrh	r3, [r3, #6]
 8009f3c:	085b      	lsrs	r3, r3, #1
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	81fb      	strh	r3, [r7, #14]
 8009f56:	89fb      	ldrh	r3, [r7, #14]
 8009f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d01b      	beq.n	8009f98 <USB_ActivateEndpoint+0x17c>
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f76:	81bb      	strh	r3, [r7, #12]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	441a      	add	r2, r3
 8009f82:	89bb      	ldrh	r3, [r7, #12]
 8009f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	78db      	ldrb	r3, [r3, #3]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d020      	beq.n	8009fe2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fb6:	813b      	strh	r3, [r7, #8]
 8009fb8:	893b      	ldrh	r3, [r7, #8]
 8009fba:	f083 0320 	eor.w	r3, r3, #32
 8009fbe:	813b      	strh	r3, [r7, #8]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	441a      	add	r2, r3
 8009fca:	893b      	ldrh	r3, [r7, #8]
 8009fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	8013      	strh	r3, [r2, #0]
 8009fe0:	e27f      	b.n	800a4e2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	881b      	ldrh	r3, [r3, #0]
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff8:	817b      	strh	r3, [r7, #10]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	441a      	add	r2, r3
 800a004:	897b      	ldrh	r3, [r7, #10]
 800a006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a00a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a00e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a016:	b29b      	uxth	r3, r3
 800a018:	8013      	strh	r3, [r2, #0]
 800a01a:	e262      	b.n	800a4e2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a026:	b29b      	uxth	r3, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02c:	4413      	add	r3, r2
 800a02e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	011a      	lsls	r2, r3, #4
 800a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a038:	4413      	add	r3, r2
 800a03a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a03e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	88db      	ldrh	r3, [r3, #6]
 800a044:	085b      	lsrs	r3, r3, #1
 800a046:	b29b      	uxth	r3, r3
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	461a      	mov	r2, r3
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	4413      	add	r3, r2
 800a062:	627b      	str	r3, [r7, #36]	; 0x24
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	011a      	lsls	r2, r3, #4
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	4413      	add	r3, r2
 800a06e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a072:	623b      	str	r3, [r7, #32]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d112      	bne.n	800a0a2 <USB_ActivateEndpoint+0x286>
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	b29b      	uxth	r3, r3
 800a082:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a086:	b29a      	uxth	r2, r3
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	801a      	strh	r2, [r3, #0]
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	b29b      	uxth	r3, r3
 800a092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	801a      	strh	r2, [r3, #0]
 800a0a0:	e02f      	b.n	800a102 <USB_ActivateEndpoint+0x2e6>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	2b3e      	cmp	r3, #62	; 0x3e
 800a0a8:	d813      	bhi.n	800a0d2 <USB_ActivateEndpoint+0x2b6>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	085b      	lsrs	r3, r3, #1
 800a0b0:	663b      	str	r3, [r7, #96]	; 0x60
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <USB_ActivateEndpoint+0x2a8>
 800a0be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	663b      	str	r3, [r7, #96]	; 0x60
 800a0c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	029b      	lsls	r3, r3, #10
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	e017      	b.n	800a102 <USB_ActivateEndpoint+0x2e6>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	095b      	lsrs	r3, r3, #5
 800a0d8:	663b      	str	r3, [r7, #96]	; 0x60
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f003 031f 	and.w	r3, r3, #31
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <USB_ActivateEndpoint+0x2d0>
 800a0e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	663b      	str	r3, [r7, #96]	; 0x60
 800a0ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	029b      	lsls	r3, r3, #10
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	83fb      	strh	r3, [r7, #30]
 800a110:	8bfb      	ldrh	r3, [r7, #30]
 800a112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01b      	beq.n	800a152 <USB_ActivateEndpoint+0x336>
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4413      	add	r3, r2
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	b29b      	uxth	r3, r3
 800a128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a12c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a130:	83bb      	strh	r3, [r7, #28]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	441a      	add	r2, r3
 800a13c:	8bbb      	ldrh	r3, [r7, #28]
 800a13e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a14e:	b29b      	uxth	r3, r3
 800a150:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a168:	837b      	strh	r3, [r7, #26]
 800a16a:	8b7b      	ldrh	r3, [r7, #26]
 800a16c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a170:	837b      	strh	r3, [r7, #26]
 800a172:	8b7b      	ldrh	r3, [r7, #26]
 800a174:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a178:	837b      	strh	r3, [r7, #26]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	441a      	add	r2, r3
 800a184:	8b7b      	ldrh	r3, [r7, #26]
 800a186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a18a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a18e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a196:	b29b      	uxth	r3, r3
 800a198:	8013      	strh	r3, [r2, #0]
 800a19a:	e1a2      	b.n	800a4e2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	441a      	add	r2, r3
 800a1c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a1c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1e8:	4413      	add	r3, r2
 800a1ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	011a      	lsls	r2, r3, #4
 800a1f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1fa:	657b      	str	r3, [r7, #84]	; 0x54
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	891b      	ldrh	r3, [r3, #8]
 800a200:	085b      	lsrs	r3, r3, #1
 800a202:	b29b      	uxth	r3, r3
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	b29a      	uxth	r2, r3
 800a208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a20a:	801a      	strh	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	653b      	str	r3, [r7, #80]	; 0x50
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a216:	b29b      	uxth	r3, r3
 800a218:	461a      	mov	r2, r3
 800a21a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a21c:	4413      	add	r3, r2
 800a21e:	653b      	str	r3, [r7, #80]	; 0x50
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	011a      	lsls	r2, r3, #4
 800a226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a22e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	895b      	ldrh	r3, [r3, #10]
 800a234:	085b      	lsrs	r3, r3, #1
 800a236:	b29b      	uxth	r3, r3
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a23e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b00      	cmp	r3, #0
 800a246:	f040 8091 	bne.w	800a36c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a258:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a25a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d01b      	beq.n	800a29a <USB_ActivateEndpoint+0x47e>
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b29b      	uxth	r3, r3
 800a270:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a278:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	441a      	add	r2, r3
 800a284:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a28a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a28e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a296:	b29b      	uxth	r3, r3
 800a298:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	873b      	strh	r3, [r7, #56]	; 0x38
 800a2a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d01b      	beq.n	800a2ea <USB_ActivateEndpoint+0x4ce>
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	441a      	add	r2, r3
 800a2d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a300:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a302:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a304:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a308:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a30a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a30c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a310:	86bb      	strh	r3, [r7, #52]	; 0x34
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	441a      	add	r2, r3
 800a31c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a31e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32e:	b29b      	uxth	r3, r3
 800a330:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a348:	867b      	strh	r3, [r7, #50]	; 0x32
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	441a      	add	r2, r3
 800a354:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a35a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a35e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a366:	b29b      	uxth	r3, r3
 800a368:	8013      	strh	r3, [r2, #0]
 800a36a:	e0ba      	b.n	800a4e2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a37c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d01d      	beq.n	800a3c4 <USB_ActivateEndpoint+0x5a8>
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	b29b      	uxth	r3, r3
 800a396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a39a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a39e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	441a      	add	r2, r3
 800a3ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a3b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a3d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01d      	beq.n	800a41c <USB_ActivateEndpoint+0x600>
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	441a      	add	r2, r3
 800a404:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a40c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a414:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a418:	b29b      	uxth	r3, r3
 800a41a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	78db      	ldrb	r3, [r3, #3]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d024      	beq.n	800a46e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	881b      	ldrh	r3, [r3, #0]
 800a430:	b29b      	uxth	r3, r3
 800a432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a43a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a43e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a442:	f083 0320 	eor.w	r3, r3, #32
 800a446:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	441a      	add	r2, r3
 800a454:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a45c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a468:	b29b      	uxth	r3, r3
 800a46a:	8013      	strh	r3, [r2, #0]
 800a46c:	e01d      	b.n	800a4aa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a484:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	441a      	add	r2, r3
 800a492:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a49a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a49e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	441a      	add	r2, r3
 800a4cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a4ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800a4e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	376c      	adds	r7, #108	; 0x6c
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bc80      	pop	{r7}
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b08d      	sub	sp, #52	; 0x34
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	7b1b      	ldrb	r3, [r3, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f040 808e 	bne.w	800a620 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	785b      	ldrb	r3, [r3, #1]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d044      	beq.n	800a596 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	81bb      	strh	r3, [r7, #12]
 800a51a:	89bb      	ldrh	r3, [r7, #12]
 800a51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a520:	2b00      	cmp	r3, #0
 800a522:	d01b      	beq.n	800a55c <USB_DeactivateEndpoint+0x6c>
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	b29b      	uxth	r3, r3
 800a532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a53a:	817b      	strh	r3, [r7, #10]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	441a      	add	r2, r3
 800a546:	897b      	ldrh	r3, [r7, #10]
 800a548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a54c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a558:	b29b      	uxth	r3, r3
 800a55a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	b29b      	uxth	r3, r3
 800a56a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a572:	813b      	strh	r3, [r7, #8]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	441a      	add	r2, r3
 800a57e:	893b      	ldrh	r3, [r7, #8]
 800a580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a590:	b29b      	uxth	r3, r3
 800a592:	8013      	strh	r3, [r2, #0]
 800a594:	e192      	b.n	800a8bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	827b      	strh	r3, [r7, #18]
 800a5a4:	8a7b      	ldrh	r3, [r7, #18]
 800a5a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d01b      	beq.n	800a5e6 <USB_DeactivateEndpoint+0xf6>
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	881b      	ldrh	r3, [r3, #0]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c4:	823b      	strh	r3, [r7, #16]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	441a      	add	r2, r3
 800a5d0:	8a3b      	ldrh	r3, [r7, #16]
 800a5d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	881b      	ldrh	r3, [r3, #0]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fc:	81fb      	strh	r3, [r7, #14]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	441a      	add	r2, r3
 800a608:	89fb      	ldrh	r3, [r7, #14]
 800a60a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a60e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	8013      	strh	r3, [r2, #0]
 800a61e:	e14d      	b.n	800a8bc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f040 80a5 	bne.w	800a774 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	4413      	add	r3, r2
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	843b      	strh	r3, [r7, #32]
 800a638:	8c3b      	ldrh	r3, [r7, #32]
 800a63a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d01b      	beq.n	800a67a <USB_DeactivateEndpoint+0x18a>
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a658:	83fb      	strh	r3, [r7, #30]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	441a      	add	r2, r3
 800a664:	8bfb      	ldrh	r3, [r7, #30]
 800a666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a66a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a66e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a676:	b29b      	uxth	r3, r3
 800a678:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	83bb      	strh	r3, [r7, #28]
 800a688:	8bbb      	ldrh	r3, [r7, #28]
 800a68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d01b      	beq.n	800a6ca <USB_DeactivateEndpoint+0x1da>
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a8:	837b      	strh	r3, [r7, #26]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	441a      	add	r2, r3
 800a6b4:	8b7b      	ldrh	r3, [r7, #26]
 800a6b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6e0:	833b      	strh	r3, [r7, #24]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	441a      	add	r2, r3
 800a6ec:	8b3b      	ldrh	r3, [r7, #24]
 800a6ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a718:	82fb      	strh	r3, [r7, #22]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	441a      	add	r2, r3
 800a724:	8afb      	ldrh	r3, [r7, #22]
 800a726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a72a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a72e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a736:	b29b      	uxth	r3, r3
 800a738:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	b29b      	uxth	r3, r3
 800a748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a74c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a750:	82bb      	strh	r3, [r7, #20]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	441a      	add	r2, r3
 800a75c:	8abb      	ldrh	r3, [r7, #20]
 800a75e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a76a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76e:	b29b      	uxth	r3, r3
 800a770:	8013      	strh	r3, [r2, #0]
 800a772:	e0a3      	b.n	800a8bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a782:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d01b      	beq.n	800a7c4 <USB_DeactivateEndpoint+0x2d4>
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	b29b      	uxth	r3, r3
 800a79a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	441a      	add	r2, r3
 800a7ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a7b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a7d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d01b      	beq.n	800a814 <USB_DeactivateEndpoint+0x324>
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7f2:	853b      	strh	r3, [r7, #40]	; 0x28
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	441a      	add	r2, r3
 800a7fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a80c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a810:	b29b      	uxth	r3, r3
 800a812:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	b29b      	uxth	r3, r3
 800a822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	441a      	add	r2, r3
 800a836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a83c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a848:	b29b      	uxth	r3, r3
 800a84a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	b29b      	uxth	r3, r3
 800a85a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a85e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a862:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	441a      	add	r2, r3
 800a86e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a87c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a880:	b29b      	uxth	r3, r3
 800a882:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a89a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	441a      	add	r2, r3
 800a8a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3734      	adds	r7, #52	; 0x34
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr

0800a8c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b0cc      	sub	sp, #304	; 0x130
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	1d3b      	adds	r3, r7, #4
 800a8d0:	6018      	str	r0, [r3, #0]
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	785b      	ldrb	r3, [r3, #1]
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	f040 872e 	bne.w	800b73e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	699a      	ldr	r2, [r3, #24]
 800a8e8:	463b      	mov	r3, r7
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d905      	bls.n	800a8fe <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a8f2:	463b      	mov	r3, r7
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a8fc:	e004      	b.n	800a908 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a8fe:	463b      	mov	r3, r7
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a908:	463b      	mov	r3, r7
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	7b1b      	ldrb	r3, [r3, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d134      	bne.n	800a97c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a912:	463b      	mov	r3, r7
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6959      	ldr	r1, [r3, #20]
 800a918:	463b      	mov	r3, r7
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	88da      	ldrh	r2, [r3, #6]
 800a91e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a922:	b29b      	uxth	r3, r3
 800a924:	1d38      	adds	r0, r7, #4
 800a926:	6800      	ldr	r0, [r0, #0]
 800a928:	f001 fc03 	bl	800c132 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a92c:	f107 0310 	add.w	r3, r7, #16
 800a930:	1d3a      	adds	r2, r7, #4
 800a932:	6812      	ldr	r2, [r2, #0]
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	1d3b      	adds	r3, r7, #4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a93e:	b29b      	uxth	r3, r3
 800a940:	4619      	mov	r1, r3
 800a942:	f107 0310 	add.w	r3, r7, #16
 800a946:	f107 0210 	add.w	r2, r7, #16
 800a94a:	6812      	ldr	r2, [r2, #0]
 800a94c:	440a      	add	r2, r1
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	463b      	mov	r3, r7
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	011a      	lsls	r2, r3, #4
 800a958:	f107 0310 	add.w	r3, r7, #16
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4413      	add	r3, r2
 800a960:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a964:	f107 030c 	add.w	r3, r7, #12
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a96e:	b29a      	uxth	r2, r3
 800a970:	f107 030c 	add.w	r3, r7, #12
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	801a      	strh	r2, [r3, #0]
 800a978:	f000 beac 	b.w	800b6d4 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a97c:	463b      	mov	r3, r7
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	78db      	ldrb	r3, [r3, #3]
 800a982:	2b02      	cmp	r3, #2
 800a984:	f040 838c 	bne.w	800b0a0 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a988:	463b      	mov	r3, r7
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6a1a      	ldr	r2, [r3, #32]
 800a98e:	463b      	mov	r3, r7
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	429a      	cmp	r2, r3
 800a996:	f240 8330 	bls.w	800affa <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a99a:	1d3b      	adds	r3, r7, #4
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	463b      	mov	r3, r7
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a9b8:	1d3b      	adds	r3, r7, #4
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	463b      	mov	r3, r7
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	441a      	add	r2, r3
 800a9c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a9ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a9de:	463b      	mov	r3, r7
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	6a1a      	ldr	r2, [r3, #32]
 800a9e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9e8:	1ad2      	subs	r2, r2, r3
 800a9ea:	463b      	mov	r3, r7
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a9f0:	1d3b      	adds	r3, r7, #4
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4413      	add	r3, r2
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 819e 	beq.w	800ad48 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa10:	1d3a      	adds	r2, r7, #4
 800aa12:	6812      	ldr	r2, [r2, #0]
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	463b      	mov	r3, r7
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	785b      	ldrb	r3, [r3, #1]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d17a      	bne.n	800ab16 <USB_EPStartXfer+0x24e>
 800aa20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa24:	1d3a      	adds	r2, r7, #4
 800aa26:	6812      	ldr	r2, [r2, #0]
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	1d3b      	adds	r3, r7, #4
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	4619      	mov	r1, r3
 800aa36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800aa3e:	6812      	ldr	r2, [r2, #0]
 800aa40:	440a      	add	r2, r1
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	463b      	mov	r3, r7
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	011a      	lsls	r2, r3, #4
 800aa4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4413      	add	r3, r2
 800aa54:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800aa58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d11a      	bne.n	800aa9c <USB_EPStartXfer+0x1d4>
 800aa66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	e062      	b.n	800ab62 <USB_EPStartXfer+0x29a>
 800aa9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaa0:	2b3e      	cmp	r3, #62	; 0x3e
 800aaa2:	d819      	bhi.n	800aad8 <USB_EPStartXfer+0x210>
 800aaa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaa8:	085b      	lsrs	r3, r3, #1
 800aaaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aaae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d004      	beq.n	800aac4 <USB_EPStartXfer+0x1fc>
 800aaba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aabe:	3301      	adds	r3, #1
 800aac0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	029b      	lsls	r3, r3, #10
 800aacc:	b29a      	uxth	r2, r3
 800aace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	801a      	strh	r2, [r3, #0]
 800aad6:	e044      	b.n	800ab62 <USB_EPStartXfer+0x29a>
 800aad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aadc:	095b      	lsrs	r3, r3, #5
 800aade:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aae6:	f003 031f 	and.w	r3, r3, #31
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d104      	bne.n	800aaf8 <USB_EPStartXfer+0x230>
 800aaee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800aaf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	029b      	lsls	r3, r3, #10
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	801a      	strh	r2, [r3, #0]
 800ab14:	e025      	b.n	800ab62 <USB_EPStartXfer+0x29a>
 800ab16:	463b      	mov	r3, r7
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	785b      	ldrb	r3, [r3, #1]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d120      	bne.n	800ab62 <USB_EPStartXfer+0x29a>
 800ab20:	1d3b      	adds	r3, r7, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ab34:	6812      	ldr	r2, [r2, #0]
 800ab36:	440a      	add	r2, r1
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	011a      	lsls	r2, r3, #4
 800ab42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800ab4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab62:	463b      	mov	r3, r7
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	895b      	ldrh	r3, [r3, #10]
 800ab68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab6c:	463b      	mov	r3, r7
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6959      	ldr	r1, [r3, #20]
 800ab72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ab7c:	1d38      	adds	r0, r7, #4
 800ab7e:	6800      	ldr	r0, [r0, #0]
 800ab80:	f001 fad7 	bl	800c132 <USB_WritePMA>
            ep->xfer_buff += len;
 800ab84:	463b      	mov	r3, r7
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	695a      	ldr	r2, [r3, #20]
 800ab8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab8e:	441a      	add	r2, r3
 800ab90:	463b      	mov	r3, r7
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ab96:	463b      	mov	r3, r7
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6a1a      	ldr	r2, [r3, #32]
 800ab9c:	463b      	mov	r3, r7
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d909      	bls.n	800abba <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800aba6:	463b      	mov	r3, r7
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6a1a      	ldr	r2, [r3, #32]
 800abac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abb0:	1ad2      	subs	r2, r2, r3
 800abb2:	463b      	mov	r3, r7
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	621a      	str	r2, [r3, #32]
 800abb8:	e008      	b.n	800abcc <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800abba:	463b      	mov	r3, r7
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800abc4:	463b      	mov	r3, r7
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2200      	movs	r2, #0
 800abca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800abcc:	463b      	mov	r3, r7
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d17a      	bne.n	800accc <USB_EPStartXfer+0x404>
 800abd6:	f107 0318 	add.w	r3, r7, #24
 800abda:	1d3a      	adds	r2, r7, #4
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	1d3b      	adds	r3, r7, #4
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abe8:	b29b      	uxth	r3, r3
 800abea:	4619      	mov	r1, r3
 800abec:	f107 0318 	add.w	r3, r7, #24
 800abf0:	f107 0218 	add.w	r2, r7, #24
 800abf4:	6812      	ldr	r2, [r2, #0]
 800abf6:	440a      	add	r2, r1
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	463b      	mov	r3, r7
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	011a      	lsls	r2, r3, #4
 800ac02:	f107 0318 	add.w	r3, r7, #24
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800ac0e:	f107 0314 	add.w	r3, r7, #20
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d11a      	bne.n	800ac52 <USB_EPStartXfer+0x38a>
 800ac1c:	f107 0314 	add.w	r3, r7, #20
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	f107 0314 	add.w	r3, r7, #20
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	801a      	strh	r2, [r3, #0]
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	f107 0314 	add.w	r3, r7, #20
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	801a      	strh	r2, [r3, #0]
 800ac50:	e067      	b.n	800ad22 <USB_EPStartXfer+0x45a>
 800ac52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac56:	2b3e      	cmp	r3, #62	; 0x3e
 800ac58:	d819      	bhi.n	800ac8e <USB_EPStartXfer+0x3c6>
 800ac5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac5e:	085b      	lsrs	r3, r3, #1
 800ac60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ac64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d004      	beq.n	800ac7a <USB_EPStartXfer+0x3b2>
 800ac70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ac74:	3301      	adds	r3, #1
 800ac76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ac7a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	029b      	lsls	r3, r3, #10
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	f107 0314 	add.w	r3, r7, #20
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	801a      	strh	r2, [r3, #0]
 800ac8c:	e049      	b.n	800ad22 <USB_EPStartXfer+0x45a>
 800ac8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac92:	095b      	lsrs	r3, r3, #5
 800ac94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800ac98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac9c:	f003 031f 	and.w	r3, r3, #31
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d104      	bne.n	800acae <USB_EPStartXfer+0x3e6>
 800aca4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800aca8:	3b01      	subs	r3, #1
 800acaa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800acae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	029b      	lsls	r3, r3, #10
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	f107 0314 	add.w	r3, r7, #20
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	801a      	strh	r2, [r3, #0]
 800acca:	e02a      	b.n	800ad22 <USB_EPStartXfer+0x45a>
 800accc:	463b      	mov	r3, r7
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	785b      	ldrb	r3, [r3, #1]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d125      	bne.n	800ad22 <USB_EPStartXfer+0x45a>
 800acd6:	f107 0320 	add.w	r3, r7, #32
 800acda:	1d3a      	adds	r2, r7, #4
 800acdc:	6812      	ldr	r2, [r2, #0]
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	1d3b      	adds	r3, r7, #4
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ace8:	b29b      	uxth	r3, r3
 800acea:	4619      	mov	r1, r3
 800acec:	f107 0320 	add.w	r3, r7, #32
 800acf0:	f107 0220 	add.w	r2, r7, #32
 800acf4:	6812      	ldr	r2, [r2, #0]
 800acf6:	440a      	add	r2, r1
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	463b      	mov	r3, r7
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	011a      	lsls	r2, r3, #4
 800ad02:	f107 0320 	add.w	r3, r7, #32
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800ad0e:	f107 031c 	add.w	r3, r7, #28
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	f107 031c 	add.w	r3, r7, #28
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ad22:	463b      	mov	r3, r7
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	891b      	ldrh	r3, [r3, #8]
 800ad28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad2c:	463b      	mov	r3, r7
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6959      	ldr	r1, [r3, #20]
 800ad32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ad3c:	1d38      	adds	r0, r7, #4
 800ad3e:	6800      	ldr	r0, [r0, #0]
 800ad40:	f001 f9f7 	bl	800c132 <USB_WritePMA>
 800ad44:	f000 bcc6 	b.w	800b6d4 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad48:	463b      	mov	r3, r7
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	785b      	ldrb	r3, [r3, #1]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d164      	bne.n	800ae1c <USB_EPStartXfer+0x554>
 800ad52:	1d3b      	adds	r3, r7, #4
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad58:	1d3b      	adds	r3, r7, #4
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	461a      	mov	r2, r3
 800ad64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad66:	4413      	add	r3, r2
 800ad68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad6a:	463b      	mov	r3, r7
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	011a      	lsls	r2, r3, #4
 800ad72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad74:	4413      	add	r3, r2
 800ad76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad7a:	647b      	str	r3, [r7, #68]	; 0x44
 800ad7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d112      	bne.n	800adaa <USB_EPStartXfer+0x4e2>
 800ad84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad92:	801a      	strh	r2, [r3, #0]
 800ad94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada6:	801a      	strh	r2, [r3, #0]
 800ada8:	e057      	b.n	800ae5a <USB_EPStartXfer+0x592>
 800adaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adae:	2b3e      	cmp	r3, #62	; 0x3e
 800adb0:	d817      	bhi.n	800ade2 <USB_EPStartXfer+0x51a>
 800adb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adb6:	085b      	lsrs	r3, r3, #1
 800adb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800adbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d004      	beq.n	800add2 <USB_EPStartXfer+0x50a>
 800adc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800adcc:	3301      	adds	r3, #1
 800adce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800add2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800add6:	b29b      	uxth	r3, r3
 800add8:	029b      	lsls	r3, r3, #10
 800adda:	b29a      	uxth	r2, r3
 800addc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	e03b      	b.n	800ae5a <USB_EPStartXfer+0x592>
 800ade2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ade6:	095b      	lsrs	r3, r3, #5
 800ade8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800adec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adf0:	f003 031f 	and.w	r3, r3, #31
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d104      	bne.n	800ae02 <USB_EPStartXfer+0x53a>
 800adf8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800adfc:	3b01      	subs	r3, #1
 800adfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800ae02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	029b      	lsls	r3, r3, #10
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae18:	801a      	strh	r2, [r3, #0]
 800ae1a:	e01e      	b.n	800ae5a <USB_EPStartXfer+0x592>
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	785b      	ldrb	r3, [r3, #1]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d119      	bne.n	800ae5a <USB_EPStartXfer+0x592>
 800ae26:	1d3b      	adds	r3, r7, #4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	653b      	str	r3, [r7, #80]	; 0x50
 800ae2c:	1d3b      	adds	r3, r7, #4
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	461a      	mov	r2, r3
 800ae38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae3a:	4413      	add	r3, r2
 800ae3c:	653b      	str	r3, [r7, #80]	; 0x50
 800ae3e:	463b      	mov	r3, r7
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	011a      	lsls	r2, r3, #4
 800ae46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae48:	4413      	add	r3, r2
 800ae4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ae5a:	463b      	mov	r3, r7
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	891b      	ldrh	r3, [r3, #8]
 800ae60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae64:	463b      	mov	r3, r7
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6959      	ldr	r1, [r3, #20]
 800ae6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ae74:	1d38      	adds	r0, r7, #4
 800ae76:	6800      	ldr	r0, [r0, #0]
 800ae78:	f001 f95b 	bl	800c132 <USB_WritePMA>
            ep->xfer_buff += len;
 800ae7c:	463b      	mov	r3, r7
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	695a      	ldr	r2, [r3, #20]
 800ae82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae86:	441a      	add	r2, r3
 800ae88:	463b      	mov	r3, r7
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ae8e:	463b      	mov	r3, r7
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6a1a      	ldr	r2, [r3, #32]
 800ae94:	463b      	mov	r3, r7
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d909      	bls.n	800aeb2 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800ae9e:	463b      	mov	r3, r7
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6a1a      	ldr	r2, [r3, #32]
 800aea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	463b      	mov	r3, r7
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	621a      	str	r2, [r3, #32]
 800aeb0:	e008      	b.n	800aec4 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6a1b      	ldr	r3, [r3, #32]
 800aeb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800aebc:	463b      	mov	r3, r7
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2200      	movs	r2, #0
 800aec2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aec4:	1d3b      	adds	r3, r7, #4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	643b      	str	r3, [r7, #64]	; 0x40
 800aeca:	463b      	mov	r3, r7
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	785b      	ldrb	r3, [r3, #1]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d164      	bne.n	800af9e <USB_EPStartXfer+0x6d6>
 800aed4:	1d3b      	adds	r3, r7, #4
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeda:	1d3b      	adds	r3, r7, #4
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	461a      	mov	r2, r3
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	4413      	add	r3, r2
 800aeea:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeec:	463b      	mov	r3, r7
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	011a      	lsls	r2, r3, #4
 800aef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef6:	4413      	add	r3, r2
 800aef8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aefc:	637b      	str	r3, [r7, #52]	; 0x34
 800aefe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af02:	2b00      	cmp	r3, #0
 800af04:	d112      	bne.n	800af2c <USB_EPStartXfer+0x664>
 800af06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af10:	b29a      	uxth	r2, r3
 800af12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af14:	801a      	strh	r2, [r3, #0]
 800af16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af24:	b29a      	uxth	r2, r3
 800af26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af28:	801a      	strh	r2, [r3, #0]
 800af2a:	e054      	b.n	800afd6 <USB_EPStartXfer+0x70e>
 800af2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af30:	2b3e      	cmp	r3, #62	; 0x3e
 800af32:	d817      	bhi.n	800af64 <USB_EPStartXfer+0x69c>
 800af34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af38:	085b      	lsrs	r3, r3, #1
 800af3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800af3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d004      	beq.n	800af54 <USB_EPStartXfer+0x68c>
 800af4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af4e:	3301      	adds	r3, #1
 800af50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800af54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af58:	b29b      	uxth	r3, r3
 800af5a:	029b      	lsls	r3, r3, #10
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af60:	801a      	strh	r2, [r3, #0]
 800af62:	e038      	b.n	800afd6 <USB_EPStartXfer+0x70e>
 800af64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af68:	095b      	lsrs	r3, r3, #5
 800af6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800af6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af72:	f003 031f 	and.w	r3, r3, #31
 800af76:	2b00      	cmp	r3, #0
 800af78:	d104      	bne.n	800af84 <USB_EPStartXfer+0x6bc>
 800af7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af7e:	3b01      	subs	r3, #1
 800af80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800af84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af88:	b29b      	uxth	r3, r3
 800af8a:	029b      	lsls	r3, r3, #10
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af96:	b29a      	uxth	r2, r3
 800af98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9a:	801a      	strh	r2, [r3, #0]
 800af9c:	e01b      	b.n	800afd6 <USB_EPStartXfer+0x70e>
 800af9e:	463b      	mov	r3, r7
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	785b      	ldrb	r3, [r3, #1]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d116      	bne.n	800afd6 <USB_EPStartXfer+0x70e>
 800afa8:	1d3b      	adds	r3, r7, #4
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	461a      	mov	r2, r3
 800afb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb6:	4413      	add	r3, r2
 800afb8:	643b      	str	r3, [r7, #64]	; 0x40
 800afba:	463b      	mov	r3, r7
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	011a      	lsls	r2, r3, #4
 800afc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc4:	4413      	add	r3, r2
 800afc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800afd6:	463b      	mov	r3, r7
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	895b      	ldrh	r3, [r3, #10]
 800afdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afe0:	463b      	mov	r3, r7
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6959      	ldr	r1, [r3, #20]
 800afe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afea:	b29b      	uxth	r3, r3
 800afec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800aff0:	1d38      	adds	r0, r7, #4
 800aff2:	6800      	ldr	r0, [r0, #0]
 800aff4:	f001 f89d 	bl	800c132 <USB_WritePMA>
 800aff8:	e36c      	b.n	800b6d4 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800affa:	463b      	mov	r3, r7
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800b004:	1d3b      	adds	r3, r7, #4
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	463b      	mov	r3, r7
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4413      	add	r3, r2
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	b29b      	uxth	r3, r3
 800b016:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b01e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b022:	1d3b      	adds	r3, r7, #4
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	463b      	mov	r3, r7
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	441a      	add	r2, r3
 800b030:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b03c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b044:	b29b      	uxth	r3, r3
 800b046:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b048:	1d3b      	adds	r3, r7, #4
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b04e:	1d3b      	adds	r3, r7, #4
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b056:	b29b      	uxth	r3, r3
 800b058:	461a      	mov	r2, r3
 800b05a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b05c:	4413      	add	r3, r2
 800b05e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b060:	463b      	mov	r3, r7
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	011a      	lsls	r2, r3, #4
 800b068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b06a:	4413      	add	r3, r2
 800b06c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b070:	65bb      	str	r3, [r7, #88]	; 0x58
 800b072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b076:	b29a      	uxth	r2, r3
 800b078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b07a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b07c:	463b      	mov	r3, r7
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	891b      	ldrh	r3, [r3, #8]
 800b082:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b086:	463b      	mov	r3, r7
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	6959      	ldr	r1, [r3, #20]
 800b08c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b090:	b29b      	uxth	r3, r3
 800b092:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b096:	1d38      	adds	r0, r7, #4
 800b098:	6800      	ldr	r0, [r0, #0]
 800b09a:	f001 f84a 	bl	800c132 <USB_WritePMA>
 800b09e:	e319      	b.n	800b6d4 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800b0a0:	1d3b      	adds	r3, r7, #4
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ba:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800b0be:	1d3b      	adds	r3, r7, #4
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	463b      	mov	r3, r7
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	441a      	add	r2, r3
 800b0cc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800b0d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b0e4:	463b      	mov	r3, r7
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6a1a      	ldr	r2, [r3, #32]
 800b0ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	463b      	mov	r3, r7
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b0f6:	1d3b      	adds	r3, r7, #4
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	463b      	mov	r3, r7
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	b29b      	uxth	r3, r3
 800b108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 8162 	beq.w	800b3d6 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b112:	1d3b      	adds	r3, r7, #4
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b11a:	463b      	mov	r3, r7
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	785b      	ldrb	r3, [r3, #1]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d164      	bne.n	800b1ee <USB_EPStartXfer+0x926>
 800b124:	1d3b      	adds	r3, r7, #4
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	67bb      	str	r3, [r7, #120]	; 0x78
 800b12a:	1d3b      	adds	r3, r7, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b132:	b29b      	uxth	r3, r3
 800b134:	461a      	mov	r2, r3
 800b136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b138:	4413      	add	r3, r2
 800b13a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b13c:	463b      	mov	r3, r7
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	011a      	lsls	r2, r3, #4
 800b144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b146:	4413      	add	r3, r2
 800b148:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b14c:	677b      	str	r3, [r7, #116]	; 0x74
 800b14e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d112      	bne.n	800b17c <USB_EPStartXfer+0x8b4>
 800b156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b160:	b29a      	uxth	r2, r3
 800b162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b164:	801a      	strh	r2, [r3, #0]
 800b166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b174:	b29a      	uxth	r2, r3
 800b176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b178:	801a      	strh	r2, [r3, #0]
 800b17a:	e057      	b.n	800b22c <USB_EPStartXfer+0x964>
 800b17c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b180:	2b3e      	cmp	r3, #62	; 0x3e
 800b182:	d817      	bhi.n	800b1b4 <USB_EPStartXfer+0x8ec>
 800b184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b188:	085b      	lsrs	r3, r3, #1
 800b18a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b18e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	2b00      	cmp	r3, #0
 800b198:	d004      	beq.n	800b1a4 <USB_EPStartXfer+0x8dc>
 800b19a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b19e:	3301      	adds	r3, #1
 800b1a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b1a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	029b      	lsls	r3, r3, #10
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1b0:	801a      	strh	r2, [r3, #0]
 800b1b2:	e03b      	b.n	800b22c <USB_EPStartXfer+0x964>
 800b1b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1b8:	095b      	lsrs	r3, r3, #5
 800b1ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b1be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1c2:	f003 031f 	and.w	r3, r3, #31
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d104      	bne.n	800b1d4 <USB_EPStartXfer+0x90c>
 800b1ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b1d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	029b      	lsls	r3, r3, #10
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1ea:	801a      	strh	r2, [r3, #0]
 800b1ec:	e01e      	b.n	800b22c <USB_EPStartXfer+0x964>
 800b1ee:	463b      	mov	r3, r7
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	785b      	ldrb	r3, [r3, #1]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d119      	bne.n	800b22c <USB_EPStartXfer+0x964>
 800b1f8:	1d3b      	adds	r3, r7, #4
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b200:	b29b      	uxth	r3, r3
 800b202:	461a      	mov	r2, r3
 800b204:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b208:	4413      	add	r3, r2
 800b20a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b20e:	463b      	mov	r3, r7
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	011a      	lsls	r2, r3, #4
 800b216:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b21a:	4413      	add	r3, r2
 800b21c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b220:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b226:	b29a      	uxth	r2, r3
 800b228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b22a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b22c:	463b      	mov	r3, r7
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	895b      	ldrh	r3, [r3, #10]
 800b232:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b236:	463b      	mov	r3, r7
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	6959      	ldr	r1, [r3, #20]
 800b23c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b240:	b29b      	uxth	r3, r3
 800b242:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b246:	1d38      	adds	r0, r7, #4
 800b248:	6800      	ldr	r0, [r0, #0]
 800b24a:	f000 ff72 	bl	800c132 <USB_WritePMA>
          ep->xfer_buff += len;
 800b24e:	463b      	mov	r3, r7
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	695a      	ldr	r2, [r3, #20]
 800b254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b258:	441a      	add	r2, r3
 800b25a:	463b      	mov	r3, r7
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b260:	463b      	mov	r3, r7
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6a1a      	ldr	r2, [r3, #32]
 800b266:	463b      	mov	r3, r7
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d909      	bls.n	800b284 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800b270:	463b      	mov	r3, r7
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6a1a      	ldr	r2, [r3, #32]
 800b276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b27a:	1ad2      	subs	r2, r2, r3
 800b27c:	463b      	mov	r3, r7
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	621a      	str	r2, [r3, #32]
 800b282:	e008      	b.n	800b296 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800b284:	463b      	mov	r3, r7
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6a1b      	ldr	r3, [r3, #32]
 800b28a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b28e:	463b      	mov	r3, r7
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2200      	movs	r2, #0
 800b294:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 821a 	beq.w	800b6d4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b2a0:	463b      	mov	r3, r7
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	785b      	ldrb	r3, [r3, #1]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d164      	bne.n	800b374 <USB_EPStartXfer+0xaac>
 800b2aa:	1d3b      	adds	r3, r7, #4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2b0:	1d3b      	adds	r3, r7, #4
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2be:	4413      	add	r3, r2
 800b2c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	011a      	lsls	r2, r3, #4
 800b2ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b2d2:	667b      	str	r3, [r7, #100]	; 0x64
 800b2d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d112      	bne.n	800b302 <USB_EPStartXfer+0xa3a>
 800b2dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2ea:	801a      	strh	r2, [r3, #0]
 800b2ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2fe:	801a      	strh	r2, [r3, #0]
 800b300:	e057      	b.n	800b3b2 <USB_EPStartXfer+0xaea>
 800b302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b306:	2b3e      	cmp	r3, #62	; 0x3e
 800b308:	d817      	bhi.n	800b33a <USB_EPStartXfer+0xa72>
 800b30a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b30e:	085b      	lsrs	r3, r3, #1
 800b310:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b318:	f003 0301 	and.w	r3, r3, #1
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d004      	beq.n	800b32a <USB_EPStartXfer+0xa62>
 800b320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b324:	3301      	adds	r3, #1
 800b326:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32e:	b29b      	uxth	r3, r3
 800b330:	029b      	lsls	r3, r3, #10
 800b332:	b29a      	uxth	r2, r3
 800b334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b336:	801a      	strh	r2, [r3, #0]
 800b338:	e03b      	b.n	800b3b2 <USB_EPStartXfer+0xaea>
 800b33a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d104      	bne.n	800b35a <USB_EPStartXfer+0xa92>
 800b350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b354:	3b01      	subs	r3, #1
 800b356:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b35e:	b29b      	uxth	r3, r3
 800b360:	029b      	lsls	r3, r3, #10
 800b362:	b29b      	uxth	r3, r3
 800b364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b370:	801a      	strh	r2, [r3, #0]
 800b372:	e01e      	b.n	800b3b2 <USB_EPStartXfer+0xaea>
 800b374:	463b      	mov	r3, r7
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	785b      	ldrb	r3, [r3, #1]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d119      	bne.n	800b3b2 <USB_EPStartXfer+0xaea>
 800b37e:	1d3b      	adds	r3, r7, #4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	673b      	str	r3, [r7, #112]	; 0x70
 800b384:	1d3b      	adds	r3, r7, #4
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	461a      	mov	r2, r3
 800b390:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b392:	4413      	add	r3, r2
 800b394:	673b      	str	r3, [r7, #112]	; 0x70
 800b396:	463b      	mov	r3, r7
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	011a      	lsls	r2, r3, #4
 800b39e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b3a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	891b      	ldrh	r3, [r3, #8]
 800b3b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3bc:	463b      	mov	r3, r7
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6959      	ldr	r1, [r3, #20]
 800b3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b3cc:	1d38      	adds	r0, r7, #4
 800b3ce:	6800      	ldr	r0, [r0, #0]
 800b3d0:	f000 feaf 	bl	800c132 <USB_WritePMA>
 800b3d4:	e17e      	b.n	800b6d4 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	785b      	ldrb	r3, [r3, #1]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d16f      	bne.n	800b4c0 <USB_EPStartXfer+0xbf8>
 800b3e0:	1d3b      	adds	r3, r7, #4
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3e8:	1d3b      	adds	r3, r7, #4
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b3fe:	463b      	mov	r3, r7
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	011a      	lsls	r2, r3, #4
 800b406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b40a:	4413      	add	r3, r2
 800b40c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d116      	bne.n	800b44a <USB_EPStartXfer+0xb82>
 800b41c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	b29b      	uxth	r3, r3
 800b424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b428:	b29a      	uxth	r2, r3
 800b42a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b42e:	801a      	strh	r2, [r3, #0]
 800b430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b434:	881b      	ldrh	r3, [r3, #0]
 800b436:	b29b      	uxth	r3, r3
 800b438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b43c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b440:	b29a      	uxth	r2, r3
 800b442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b446:	801a      	strh	r2, [r3, #0]
 800b448:	e05f      	b.n	800b50a <USB_EPStartXfer+0xc42>
 800b44a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b44e:	2b3e      	cmp	r3, #62	; 0x3e
 800b450:	d818      	bhi.n	800b484 <USB_EPStartXfer+0xbbc>
 800b452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b456:	085b      	lsrs	r3, r3, #1
 800b458:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b45c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	d004      	beq.n	800b472 <USB_EPStartXfer+0xbaa>
 800b468:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b46c:	3301      	adds	r3, #1
 800b46e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b472:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b476:	b29b      	uxth	r3, r3
 800b478:	029b      	lsls	r3, r3, #10
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b480:	801a      	strh	r2, [r3, #0]
 800b482:	e042      	b.n	800b50a <USB_EPStartXfer+0xc42>
 800b484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b488:	095b      	lsrs	r3, r3, #5
 800b48a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b48e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b492:	f003 031f 	and.w	r3, r3, #31
 800b496:	2b00      	cmp	r3, #0
 800b498:	d104      	bne.n	800b4a4 <USB_EPStartXfer+0xbdc>
 800b49a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b4a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	029b      	lsls	r3, r3, #10
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4bc:	801a      	strh	r2, [r3, #0]
 800b4be:	e024      	b.n	800b50a <USB_EPStartXfer+0xc42>
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	785b      	ldrb	r3, [r3, #1]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d11f      	bne.n	800b50a <USB_EPStartXfer+0xc42>
 800b4ca:	1d3b      	adds	r3, r7, #4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4d2:	1d3b      	adds	r3, r7, #4
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	461a      	mov	r2, r3
 800b4de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b4e8:	463b      	mov	r3, r7
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	011a      	lsls	r2, r3, #4
 800b4f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b4fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b502:	b29a      	uxth	r2, r3
 800b504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b508:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b50a:	463b      	mov	r3, r7
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	891b      	ldrh	r3, [r3, #8]
 800b510:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b514:	463b      	mov	r3, r7
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	6959      	ldr	r1, [r3, #20]
 800b51a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b51e:	b29b      	uxth	r3, r3
 800b520:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b524:	1d38      	adds	r0, r7, #4
 800b526:	6800      	ldr	r0, [r0, #0]
 800b528:	f000 fe03 	bl	800c132 <USB_WritePMA>
          ep->xfer_buff += len;
 800b52c:	463b      	mov	r3, r7
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	695a      	ldr	r2, [r3, #20]
 800b532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b536:	441a      	add	r2, r3
 800b538:	463b      	mov	r3, r7
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800b53e:	463b      	mov	r3, r7
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	6a1a      	ldr	r2, [r3, #32]
 800b544:	463b      	mov	r3, r7
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d909      	bls.n	800b562 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800b54e:	463b      	mov	r3, r7
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	6a1a      	ldr	r2, [r3, #32]
 800b554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b558:	1ad2      	subs	r2, r2, r3
 800b55a:	463b      	mov	r3, r7
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	621a      	str	r2, [r3, #32]
 800b560:	e008      	b.n	800b574 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800b562:	463b      	mov	r3, r7
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800b56c:	463b      	mov	r3, r7
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2200      	movs	r2, #0
 800b572:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800b574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 80ab 	beq.w	800b6d4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b57e:	1d3b      	adds	r3, r7, #4
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b586:	463b      	mov	r3, r7
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d16f      	bne.n	800b670 <USB_EPStartXfer+0xda8>
 800b590:	1d3b      	adds	r3, r7, #4
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b598:	1d3b      	adds	r3, r7, #4
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5ae:	463b      	mov	r3, r7
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	011a      	lsls	r2, r3, #4
 800b5b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b5c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d116      	bne.n	800b5fa <USB_EPStartXfer+0xd32>
 800b5cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5de:	801a      	strh	r2, [r3, #0]
 800b5e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5e4:	881b      	ldrh	r3, [r3, #0]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5f6:	801a      	strh	r2, [r3, #0]
 800b5f8:	e05b      	b.n	800b6b2 <USB_EPStartXfer+0xdea>
 800b5fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5fe:	2b3e      	cmp	r3, #62	; 0x3e
 800b600:	d818      	bhi.n	800b634 <USB_EPStartXfer+0xd6c>
 800b602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b606:	085b      	lsrs	r3, r3, #1
 800b608:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b60c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	d004      	beq.n	800b622 <USB_EPStartXfer+0xd5a>
 800b618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b61c:	3301      	adds	r3, #1
 800b61e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b626:	b29b      	uxth	r3, r3
 800b628:	029b      	lsls	r3, r3, #10
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b630:	801a      	strh	r2, [r3, #0]
 800b632:	e03e      	b.n	800b6b2 <USB_EPStartXfer+0xdea>
 800b634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b638:	095b      	lsrs	r3, r3, #5
 800b63a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b63e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b642:	f003 031f 	and.w	r3, r3, #31
 800b646:	2b00      	cmp	r3, #0
 800b648:	d104      	bne.n	800b654 <USB_EPStartXfer+0xd8c>
 800b64a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b64e:	3b01      	subs	r3, #1
 800b650:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b658:	b29b      	uxth	r3, r3
 800b65a:	029b      	lsls	r3, r3, #10
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b666:	b29a      	uxth	r2, r3
 800b668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b66c:	801a      	strh	r2, [r3, #0]
 800b66e:	e020      	b.n	800b6b2 <USB_EPStartXfer+0xdea>
 800b670:	463b      	mov	r3, r7
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	785b      	ldrb	r3, [r3, #1]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d11b      	bne.n	800b6b2 <USB_EPStartXfer+0xdea>
 800b67a:	1d3b      	adds	r3, r7, #4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b682:	b29b      	uxth	r3, r3
 800b684:	461a      	mov	r2, r3
 800b686:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b68a:	4413      	add	r3, r2
 800b68c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b690:	463b      	mov	r3, r7
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	011a      	lsls	r2, r3, #4
 800b698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b69c:	4413      	add	r3, r2
 800b69e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b6a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b6b2:	463b      	mov	r3, r7
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	895b      	ldrh	r3, [r3, #10]
 800b6b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6bc:	463b      	mov	r3, r7
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6959      	ldr	r1, [r3, #20]
 800b6c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b6cc:	1d38      	adds	r0, r7, #4
 800b6ce:	6800      	ldr	r0, [r0, #0]
 800b6d0:	f000 fd2f 	bl	800c132 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b6d4:	1d3b      	adds	r3, r7, #4
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	463b      	mov	r3, r7
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	f107 020a 	add.w	r2, r7, #10
 800b6ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6f2:	8013      	strh	r3, [r2, #0]
 800b6f4:	f107 030a 	add.w	r3, r7, #10
 800b6f8:	f107 020a 	add.w	r2, r7, #10
 800b6fc:	8812      	ldrh	r2, [r2, #0]
 800b6fe:	f082 0210 	eor.w	r2, r2, #16
 800b702:	801a      	strh	r2, [r3, #0]
 800b704:	f107 030a 	add.w	r3, r7, #10
 800b708:	f107 020a 	add.w	r2, r7, #10
 800b70c:	8812      	ldrh	r2, [r2, #0]
 800b70e:	f082 0220 	eor.w	r2, r2, #32
 800b712:	801a      	strh	r2, [r3, #0]
 800b714:	1d3b      	adds	r3, r7, #4
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	463b      	mov	r3, r7
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	441a      	add	r2, r3
 800b722:	f107 030a 	add.w	r3, r7, #10
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b72c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b738:	b29b      	uxth	r3, r3
 800b73a:	8013      	strh	r3, [r2, #0]
 800b73c:	e3b5      	b.n	800beaa <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b73e:	463b      	mov	r3, r7
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	7b1b      	ldrb	r3, [r3, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f040 8090 	bne.w	800b86a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b74a:	463b      	mov	r3, r7
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	699a      	ldr	r2, [r3, #24]
 800b750:	463b      	mov	r3, r7
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	429a      	cmp	r2, r3
 800b758:	d90e      	bls.n	800b778 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800b75a:	463b      	mov	r3, r7
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800b764:	463b      	mov	r3, r7
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	699a      	ldr	r2, [r3, #24]
 800b76a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b76e:	1ad2      	subs	r2, r2, r3
 800b770:	463b      	mov	r3, r7
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	619a      	str	r2, [r3, #24]
 800b776:	e008      	b.n	800b78a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800b778:	463b      	mov	r3, r7
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	699b      	ldr	r3, [r3, #24]
 800b77e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800b782:	463b      	mov	r3, r7
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2200      	movs	r2, #0
 800b788:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b78a:	1d3b      	adds	r3, r7, #4
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b792:	1d3b      	adds	r3, r7, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	461a      	mov	r2, r3
 800b79e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	011a      	lsls	r2, r3, #4
 800b7b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b7ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b7be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d116      	bne.n	800b7f4 <USB_EPStartXfer+0xf2c>
 800b7c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7d8:	801a      	strh	r2, [r3, #0]
 800b7da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7f0:	801a      	strh	r2, [r3, #0]
 800b7f2:	e32c      	b.n	800be4e <USB_EPStartXfer+0x1586>
 800b7f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7f8:	2b3e      	cmp	r3, #62	; 0x3e
 800b7fa:	d818      	bhi.n	800b82e <USB_EPStartXfer+0xf66>
 800b7fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b800:	085b      	lsrs	r3, r3, #1
 800b802:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d004      	beq.n	800b81c <USB_EPStartXfer+0xf54>
 800b812:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b816:	3301      	adds	r3, #1
 800b818:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b81c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b820:	b29b      	uxth	r3, r3
 800b822:	029b      	lsls	r3, r3, #10
 800b824:	b29a      	uxth	r2, r3
 800b826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b82a:	801a      	strh	r2, [r3, #0]
 800b82c:	e30f      	b.n	800be4e <USB_EPStartXfer+0x1586>
 800b82e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b832:	095b      	lsrs	r3, r3, #5
 800b834:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b83c:	f003 031f 	and.w	r3, r3, #31
 800b840:	2b00      	cmp	r3, #0
 800b842:	d104      	bne.n	800b84e <USB_EPStartXfer+0xf86>
 800b844:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b848:	3b01      	subs	r3, #1
 800b84a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b84e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b852:	b29b      	uxth	r3, r3
 800b854:	029b      	lsls	r3, r3, #10
 800b856:	b29b      	uxth	r3, r3
 800b858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b85c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b860:	b29a      	uxth	r2, r3
 800b862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b866:	801a      	strh	r2, [r3, #0]
 800b868:	e2f1      	b.n	800be4e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b86a:	463b      	mov	r3, r7
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	78db      	ldrb	r3, [r3, #3]
 800b870:	2b02      	cmp	r3, #2
 800b872:	f040 818f 	bne.w	800bb94 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b876:	463b      	mov	r3, r7
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	785b      	ldrb	r3, [r3, #1]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d175      	bne.n	800b96c <USB_EPStartXfer+0x10a4>
 800b880:	1d3b      	adds	r3, r7, #4
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b888:	1d3b      	adds	r3, r7, #4
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b890:	b29b      	uxth	r3, r3
 800b892:	461a      	mov	r2, r3
 800b894:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b898:	4413      	add	r3, r2
 800b89a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b89e:	463b      	mov	r3, r7
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	011a      	lsls	r2, r3, #4
 800b8a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8aa:	4413      	add	r3, r2
 800b8ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b8b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8b4:	463b      	mov	r3, r7
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d116      	bne.n	800b8ec <USB_EPStartXfer+0x1024>
 800b8be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8d0:	801a      	strh	r2, [r3, #0]
 800b8d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8d6:	881b      	ldrh	r3, [r3, #0]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8e8:	801a      	strh	r2, [r3, #0]
 800b8ea:	e065      	b.n	800b9b8 <USB_EPStartXfer+0x10f0>
 800b8ec:	463b      	mov	r3, r7
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	2b3e      	cmp	r3, #62	; 0x3e
 800b8f4:	d81a      	bhi.n	800b92c <USB_EPStartXfer+0x1064>
 800b8f6:	463b      	mov	r3, r7
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	085b      	lsrs	r3, r3, #1
 800b8fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b902:	463b      	mov	r3, r7
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d004      	beq.n	800b91a <USB_EPStartXfer+0x1052>
 800b910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b914:	3301      	adds	r3, #1
 800b916:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91e:	b29b      	uxth	r3, r3
 800b920:	029b      	lsls	r3, r3, #10
 800b922:	b29a      	uxth	r2, r3
 800b924:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b928:	801a      	strh	r2, [r3, #0]
 800b92a:	e045      	b.n	800b9b8 <USB_EPStartXfer+0x10f0>
 800b92c:	463b      	mov	r3, r7
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	095b      	lsrs	r3, r3, #5
 800b934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b938:	463b      	mov	r3, r7
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	f003 031f 	and.w	r3, r3, #31
 800b942:	2b00      	cmp	r3, #0
 800b944:	d104      	bne.n	800b950 <USB_EPStartXfer+0x1088>
 800b946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94a:	3b01      	subs	r3, #1
 800b94c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b954:	b29b      	uxth	r3, r3
 800b956:	029b      	lsls	r3, r3, #10
 800b958:	b29b      	uxth	r3, r3
 800b95a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b95e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b962:	b29a      	uxth	r2, r3
 800b964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b968:	801a      	strh	r2, [r3, #0]
 800b96a:	e025      	b.n	800b9b8 <USB_EPStartXfer+0x10f0>
 800b96c:	463b      	mov	r3, r7
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	785b      	ldrb	r3, [r3, #1]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d120      	bne.n	800b9b8 <USB_EPStartXfer+0x10f0>
 800b976:	1d3b      	adds	r3, r7, #4
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b97e:	1d3b      	adds	r3, r7, #4
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b986:	b29b      	uxth	r3, r3
 800b988:	461a      	mov	r2, r3
 800b98a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b98e:	4413      	add	r3, r2
 800b990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b994:	463b      	mov	r3, r7
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	011a      	lsls	r2, r3, #4
 800b99c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b9a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9aa:	463b      	mov	r3, r7
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b9b6:	801a      	strh	r2, [r3, #0]
 800b9b8:	1d3b      	adds	r3, r7, #4
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9c0:	463b      	mov	r3, r7
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	785b      	ldrb	r3, [r3, #1]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d175      	bne.n	800bab6 <USB_EPStartXfer+0x11ee>
 800b9ca:	1d3b      	adds	r3, r7, #4
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9d2:	1d3b      	adds	r3, r7, #4
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9e8:	463b      	mov	r3, r7
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	011a      	lsls	r2, r3, #4
 800b9f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b9fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9fe:	463b      	mov	r3, r7
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d116      	bne.n	800ba36 <USB_EPStartXfer+0x116e>
 800ba08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba1a:	801a      	strh	r2, [r3, #0]
 800ba1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba20:	881b      	ldrh	r3, [r3, #0]
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba32:	801a      	strh	r2, [r3, #0]
 800ba34:	e061      	b.n	800bafa <USB_EPStartXfer+0x1232>
 800ba36:	463b      	mov	r3, r7
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	2b3e      	cmp	r3, #62	; 0x3e
 800ba3e:	d81a      	bhi.n	800ba76 <USB_EPStartXfer+0x11ae>
 800ba40:	463b      	mov	r3, r7
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	085b      	lsrs	r3, r3, #1
 800ba48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba4c:	463b      	mov	r3, r7
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d004      	beq.n	800ba64 <USB_EPStartXfer+0x119c>
 800ba5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba5e:	3301      	adds	r3, #1
 800ba60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	029b      	lsls	r3, r3, #10
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba72:	801a      	strh	r2, [r3, #0]
 800ba74:	e041      	b.n	800bafa <USB_EPStartXfer+0x1232>
 800ba76:	463b      	mov	r3, r7
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	095b      	lsrs	r3, r3, #5
 800ba7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba82:	463b      	mov	r3, r7
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	f003 031f 	and.w	r3, r3, #31
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d104      	bne.n	800ba9a <USB_EPStartXfer+0x11d2>
 800ba90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba94:	3b01      	subs	r3, #1
 800ba96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	029b      	lsls	r3, r3, #10
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baac:	b29a      	uxth	r2, r3
 800baae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bab2:	801a      	strh	r2, [r3, #0]
 800bab4:	e021      	b.n	800bafa <USB_EPStartXfer+0x1232>
 800bab6:	463b      	mov	r3, r7
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	785b      	ldrb	r3, [r3, #1]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d11c      	bne.n	800bafa <USB_EPStartXfer+0x1232>
 800bac0:	1d3b      	adds	r3, r7, #4
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bac8:	b29b      	uxth	r3, r3
 800baca:	461a      	mov	r2, r3
 800bacc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bad0:	4413      	add	r3, r2
 800bad2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bad6:	463b      	mov	r3, r7
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	011a      	lsls	r2, r3, #4
 800bade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bae2:	4413      	add	r3, r2
 800bae4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bae8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800baec:	463b      	mov	r3, r7
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800baf8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bafa:	463b      	mov	r3, r7
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	69db      	ldr	r3, [r3, #28]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 81a4 	beq.w	800be4e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bb06:	1d3b      	adds	r3, r7, #4
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	463b      	mov	r3, r7
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4413      	add	r3, r2
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb1a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bb1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d005      	beq.n	800bb32 <USB_EPStartXfer+0x126a>
 800bb26:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bb2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10d      	bne.n	800bb4e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bb32:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bb36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f040 8187 	bne.w	800be4e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bb40:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800bb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f040 8180 	bne.w	800be4e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800bb4e:	1d3b      	adds	r3, r7, #4
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	463b      	mov	r3, r7
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb68:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800bb6c:	1d3b      	adds	r3, r7, #4
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	463b      	mov	r3, r7
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	441a      	add	r2, r3
 800bb7a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800bb7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	8013      	strh	r3, [r2, #0]
 800bb92:	e15c      	b.n	800be4e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bb94:	463b      	mov	r3, r7
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	78db      	ldrb	r3, [r3, #3]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	f040 8155 	bne.w	800be4a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bba0:	463b      	mov	r3, r7
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	699a      	ldr	r2, [r3, #24]
 800bba6:	463b      	mov	r3, r7
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d90e      	bls.n	800bbce <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800bbb0:	463b      	mov	r3, r7
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800bbba:	463b      	mov	r3, r7
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	699a      	ldr	r2, [r3, #24]
 800bbc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bbc4:	1ad2      	subs	r2, r2, r3
 800bbc6:	463b      	mov	r3, r7
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	619a      	str	r2, [r3, #24]
 800bbcc:	e008      	b.n	800bbe0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800bbce:	463b      	mov	r3, r7
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800bbd8:	463b      	mov	r3, r7
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bbe0:	463b      	mov	r3, r7
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	785b      	ldrb	r3, [r3, #1]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d16f      	bne.n	800bcca <USB_EPStartXfer+0x1402>
 800bbea:	1d3b      	adds	r3, r7, #4
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bbf2:	1d3b      	adds	r3, r7, #4
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc02:	4413      	add	r3, r2
 800bc04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc08:	463b      	mov	r3, r7
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	011a      	lsls	r2, r3, #4
 800bc10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc14:	4413      	add	r3, r2
 800bc16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bc1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bc1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d116      	bne.n	800bc54 <USB_EPStartXfer+0x138c>
 800bc26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc38:	801a      	strh	r2, [r3, #0]
 800bc3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc50:	801a      	strh	r2, [r3, #0]
 800bc52:	e05f      	b.n	800bd14 <USB_EPStartXfer+0x144c>
 800bc54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc58:	2b3e      	cmp	r3, #62	; 0x3e
 800bc5a:	d818      	bhi.n	800bc8e <USB_EPStartXfer+0x13c6>
 800bc5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc60:	085b      	lsrs	r3, r3, #1
 800bc62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d004      	beq.n	800bc7c <USB_EPStartXfer+0x13b4>
 800bc72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc76:	3301      	adds	r3, #1
 800bc78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	029b      	lsls	r3, r3, #10
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc8a:	801a      	strh	r2, [r3, #0]
 800bc8c:	e042      	b.n	800bd14 <USB_EPStartXfer+0x144c>
 800bc8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc92:	095b      	lsrs	r3, r3, #5
 800bc94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc9c:	f003 031f 	and.w	r3, r3, #31
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d104      	bne.n	800bcae <USB_EPStartXfer+0x13e6>
 800bca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bcae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	029b      	lsls	r3, r3, #10
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bcc6:	801a      	strh	r2, [r3, #0]
 800bcc8:	e024      	b.n	800bd14 <USB_EPStartXfer+0x144c>
 800bcca:	463b      	mov	r3, r7
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	785b      	ldrb	r3, [r3, #1]
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d11f      	bne.n	800bd14 <USB_EPStartXfer+0x144c>
 800bcd4:	1d3b      	adds	r3, r7, #4
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bcdc:	1d3b      	adds	r3, r7, #4
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	461a      	mov	r2, r3
 800bce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcec:	4413      	add	r3, r2
 800bcee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	011a      	lsls	r2, r3, #4
 800bcfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcfe:	4413      	add	r3, r2
 800bd00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bd08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bd12:	801a      	strh	r2, [r3, #0]
 800bd14:	1d3b      	adds	r3, r7, #4
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	785b      	ldrb	r3, [r3, #1]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d16f      	bne.n	800be06 <USB_EPStartXfer+0x153e>
 800bd26:	1d3b      	adds	r3, r7, #4
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd2e:	1d3b      	adds	r3, r7, #4
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	461a      	mov	r2, r3
 800bd3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd3e:	4413      	add	r3, r2
 800bd40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd44:	463b      	mov	r3, r7
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	011a      	lsls	r2, r3, #4
 800bd4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd50:	4413      	add	r3, r2
 800bd52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bd56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d116      	bne.n	800bd90 <USB_EPStartXfer+0x14c8>
 800bd62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd66:	881b      	ldrh	r3, [r3, #0]
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd74:	801a      	strh	r2, [r3, #0]
 800bd76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd8c:	801a      	strh	r2, [r3, #0]
 800bd8e:	e05e      	b.n	800be4e <USB_EPStartXfer+0x1586>
 800bd90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd94:	2b3e      	cmp	r3, #62	; 0x3e
 800bd96:	d818      	bhi.n	800bdca <USB_EPStartXfer+0x1502>
 800bd98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd9c:	085b      	lsrs	r3, r3, #1
 800bd9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bda2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d004      	beq.n	800bdb8 <USB_EPStartXfer+0x14f0>
 800bdae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bdb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	029b      	lsls	r3, r3, #10
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdc6:	801a      	strh	r2, [r3, #0]
 800bdc8:	e041      	b.n	800be4e <USB_EPStartXfer+0x1586>
 800bdca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdce:	095b      	lsrs	r3, r3, #5
 800bdd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bdd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdd8:	f003 031f 	and.w	r3, r3, #31
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d104      	bne.n	800bdea <USB_EPStartXfer+0x1522>
 800bde0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bde4:	3b01      	subs	r3, #1
 800bde6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bdea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	029b      	lsls	r3, r3, #10
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bdf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be02:	801a      	strh	r2, [r3, #0]
 800be04:	e023      	b.n	800be4e <USB_EPStartXfer+0x1586>
 800be06:	463b      	mov	r3, r7
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	785b      	ldrb	r3, [r3, #1]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d11e      	bne.n	800be4e <USB_EPStartXfer+0x1586>
 800be10:	1d3b      	adds	r3, r7, #4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be18:	b29b      	uxth	r3, r3
 800be1a:	461a      	mov	r2, r3
 800be1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be20:	4413      	add	r3, r2
 800be22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be26:	463b      	mov	r3, r7
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	011a      	lsls	r2, r3, #4
 800be2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be32:	4413      	add	r3, r2
 800be34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800be3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be40:	b29a      	uxth	r2, r3
 800be42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be46:	801a      	strh	r2, [r3, #0]
 800be48:	e001      	b.n	800be4e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e02e      	b.n	800beac <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be4e:	1d3b      	adds	r3, r7, #4
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	463b      	mov	r3, r7
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	881b      	ldrh	r3, [r3, #0]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be68:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800be6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be74:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800be78:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be80:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800be84:	1d3b      	adds	r3, r7, #4
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	463b      	mov	r3, r7
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	441a      	add	r2, r3
 800be92:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800be96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800beb6:	b480      	push	{r7}
 800beb8:	b085      	sub	sp, #20
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	785b      	ldrb	r3, [r3, #1]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d020      	beq.n	800bf0a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	881b      	ldrh	r3, [r3, #0]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bede:	81bb      	strh	r3, [r7, #12]
 800bee0:	89bb      	ldrh	r3, [r7, #12]
 800bee2:	f083 0310 	eor.w	r3, r3, #16
 800bee6:	81bb      	strh	r3, [r7, #12]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	441a      	add	r2, r3
 800bef2:	89bb      	ldrh	r3, [r7, #12]
 800bef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800befc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	8013      	strh	r3, [r2, #0]
 800bf08:	e01f      	b.n	800bf4a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	4413      	add	r3, r2
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf20:	81fb      	strh	r3, [r7, #14]
 800bf22:	89fb      	ldrh	r3, [r7, #14]
 800bf24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bf28:	81fb      	strh	r3, [r7, #14]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	441a      	add	r2, r3
 800bf34:	89fb      	ldrh	r3, [r7, #14]
 800bf36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bc80      	pop	{r7}
 800bf54:	4770      	bx	lr

0800bf56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf56:	b480      	push	{r7}
 800bf58:	b087      	sub	sp, #28
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	7b1b      	ldrb	r3, [r3, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f040 809d 	bne.w	800c0a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d04c      	beq.n	800c00c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	823b      	strh	r3, [r7, #16]
 800bf80:	8a3b      	ldrh	r3, [r7, #16]
 800bf82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d01b      	beq.n	800bfc2 <USB_EPClearStall+0x6c>
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfa0:	81fb      	strh	r3, [r7, #14]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	441a      	add	r2, r3
 800bfac:	89fb      	ldrh	r3, [r7, #14]
 800bfae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	78db      	ldrb	r3, [r3, #3]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d06c      	beq.n	800c0a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfe0:	81bb      	strh	r3, [r7, #12]
 800bfe2:	89bb      	ldrh	r3, [r7, #12]
 800bfe4:	f083 0320 	eor.w	r3, r3, #32
 800bfe8:	81bb      	strh	r3, [r7, #12]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	441a      	add	r2, r3
 800bff4:	89bb      	ldrh	r3, [r7, #12]
 800bff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c006:	b29b      	uxth	r3, r3
 800c008:	8013      	strh	r3, [r2, #0]
 800c00a:	e04b      	b.n	800c0a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	82fb      	strh	r3, [r7, #22]
 800c01a:	8afb      	ldrh	r3, [r7, #22]
 800c01c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d01b      	beq.n	800c05c <USB_EPClearStall+0x106>
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	b29b      	uxth	r3, r3
 800c032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c03a:	82bb      	strh	r3, [r7, #20]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	441a      	add	r2, r3
 800c046:	8abb      	ldrh	r3, [r7, #20]
 800c048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c04c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c058:	b29b      	uxth	r3, r3
 800c05a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	b29b      	uxth	r3, r3
 800c06a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c072:	827b      	strh	r3, [r7, #18]
 800c074:	8a7b      	ldrh	r3, [r7, #18]
 800c076:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c07a:	827b      	strh	r3, [r7, #18]
 800c07c:	8a7b      	ldrh	r3, [r7, #18]
 800c07e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c082:	827b      	strh	r3, [r7, #18]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	441a      	add	r2, r3
 800c08e:	8a7b      	ldrh	r3, [r7, #18]
 800c090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	371c      	adds	r7, #28
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bc80      	pop	{r7}
 800c0ae:	4770      	bx	lr

0800c0b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c0bc:	78fb      	ldrb	r3, [r7, #3]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d103      	bne.n	800c0ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2280      	movs	r2, #128	; 0x80
 800c0c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bc80      	pop	{r7}
 800c0d4:	4770      	bx	lr

0800c0d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bc80      	pop	{r7}
 800c0e8:	4770      	bx	lr

0800c0ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c0ea:	b480      	push	{r7}
 800c0ec:	b083      	sub	sp, #12
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bc80      	pop	{r7}
 800c0fc:	4770      	bx	lr

0800c0fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c0fe:	b480      	push	{r7}
 800c100:	b085      	sub	sp, #20
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c110:	68fb      	ldr	r3, [r7, #12]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3714      	adds	r7, #20
 800c116:	46bd      	mov	sp, r7
 800c118:	bc80      	pop	{r7}
 800c11a:	4770      	bx	lr

0800c11c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bc80      	pop	{r7}
 800c130:	4770      	bx	lr

0800c132 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c132:	b480      	push	{r7}
 800c134:	b08d      	sub	sp, #52	; 0x34
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	4611      	mov	r1, r2
 800c13e:	461a      	mov	r2, r3
 800c140:	460b      	mov	r3, r1
 800c142:	80fb      	strh	r3, [r7, #6]
 800c144:	4613      	mov	r3, r2
 800c146:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c148:	88bb      	ldrh	r3, [r7, #4]
 800c14a:	3301      	adds	r3, #1
 800c14c:	085b      	lsrs	r3, r3, #1
 800c14e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c158:	88fb      	ldrh	r3, [r7, #6]
 800c15a:	005a      	lsls	r2, r3, #1
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	4413      	add	r3, r2
 800c160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c164:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c166:	6a3b      	ldr	r3, [r7, #32]
 800c168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c16a:	e01e      	b.n	800c1aa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c174:	3301      	adds	r3, #1
 800c176:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	021b      	lsls	r3, r3, #8
 800c180:	b29b      	uxth	r3, r3
 800c182:	461a      	mov	r2, r3
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	4313      	orrs	r3, r2
 800c188:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c190:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	3302      	adds	r3, #2
 800c196:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	3302      	adds	r3, #2
 800c19c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1dd      	bne.n	800c16c <USB_WritePMA+0x3a>
  }
}
 800c1b0:	bf00      	nop
 800c1b2:	bf00      	nop
 800c1b4:	3734      	adds	r7, #52	; 0x34
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bc80      	pop	{r7}
 800c1ba:	4770      	bx	lr

0800c1bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b08b      	sub	sp, #44	; 0x2c
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	80fb      	strh	r3, [r7, #6]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c1d2:	88bb      	ldrh	r3, [r7, #4]
 800c1d4:	085b      	lsrs	r3, r3, #1
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c1e2:	88fb      	ldrh	r3, [r7, #6]
 800c1e4:	005a      	lsls	r2, r3, #1
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1ee:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f4:	e01b      	b.n	800c22e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c1fe:	6a3b      	ldr	r3, [r7, #32]
 800c200:	3302      	adds	r3, #2
 800c202:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	b2da      	uxtb	r2, r3
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	3301      	adds	r3, #1
 800c210:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	0a1b      	lsrs	r3, r3, #8
 800c216:	b2da      	uxtb	r2, r3
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c21c:	69fb      	ldr	r3, [r7, #28]
 800c21e:	3301      	adds	r3, #1
 800c220:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c222:	6a3b      	ldr	r3, [r7, #32]
 800c224:	3302      	adds	r3, #2
 800c226:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	3b01      	subs	r3, #1
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24
 800c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1e0      	bne.n	800c1f6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800c234:	88bb      	ldrh	r3, [r7, #4]
 800c236:	f003 0301 	and.w	r3, r3, #1
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d007      	beq.n	800c250 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	b29b      	uxth	r3, r3
 800c246:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	701a      	strb	r2, [r3, #0]
  }
}
 800c250:	bf00      	nop
 800c252:	372c      	adds	r7, #44	; 0x2c
 800c254:	46bd      	mov	sp, r7
 800c256:	bc80      	pop	{r7}
 800c258:	4770      	bx	lr
	...

0800c25c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c260:	4904      	ldr	r1, [pc, #16]	; (800c274 <MX_FATFS_Init+0x18>)
 800c262:	4805      	ldr	r0, [pc, #20]	; (800c278 <MX_FATFS_Init+0x1c>)
 800c264:	f001 fc16 	bl	800da94 <FATFS_LinkDriver>
 800c268:	4603      	mov	r3, r0
 800c26a:	461a      	mov	r2, r3
 800c26c:	4b03      	ldr	r3, [pc, #12]	; (800c27c <MX_FATFS_Init+0x20>)
 800c26e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c270:	bf00      	nop
 800c272:	bd80      	pop	{r7, pc}
 800c274:	20000ea8 	.word	0x20000ea8
 800c278:	2000000c 	.word	0x2000000c
 800c27c:	20000eac 	.word	0x20000eac

0800c280 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c28a:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <USER_initialize+0x20>)
 800c28c:	2201      	movs	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c290:	4b03      	ldr	r3, [pc, #12]	; (800c2a0 <USER_initialize+0x20>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bc80      	pop	{r7}
 800c29e:	4770      	bx	lr
 800c2a0:	20000009 	.word	0x20000009

0800c2a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c2ae:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <USER_status+0x20>)
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c2b4:	4b03      	ldr	r3, [pc, #12]	; (800c2c4 <USER_status+0x20>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	370c      	adds	r7, #12
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bc80      	pop	{r7}
 800c2c2:	4770      	bx	lr
 800c2c4:	20000009 	.word	0x20000009

0800c2c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60b9      	str	r1, [r7, #8]
 800c2d0:	607a      	str	r2, [r7, #4]
 800c2d2:	603b      	str	r3, [r7, #0]
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c2d8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bc80      	pop	{r7}
 800c2e2:	4770      	bx	lr

0800c2e4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60b9      	str	r1, [r7, #8]
 800c2ec:	607a      	str	r2, [r7, #4]
 800c2ee:	603b      	str	r3, [r7, #0]
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c2f4:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bc80      	pop	{r7}
 800c2fe:	4770      	bx	lr

0800c300 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	4603      	mov	r3, r0
 800c308:	603a      	str	r2, [r7, #0]
 800c30a:	71fb      	strb	r3, [r7, #7]
 800c30c:	460b      	mov	r3, r1
 800c30e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	73fb      	strb	r3, [r7, #15]
    return res;
 800c314:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c316:	4618      	mov	r0, r3
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bc80      	pop	{r7}
 800c31e:	4770      	bx	lr

0800c320 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b084      	sub	sp, #16
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	460b      	mov	r3, r1
 800c32a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c32c:	2300      	movs	r3, #0
 800c32e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	7c1b      	ldrb	r3, [r3, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d115      	bne.n	800c364 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c33c:	2202      	movs	r2, #2
 800c33e:	2181      	movs	r1, #129	; 0x81
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f001 feee 	bl	800e122 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c34c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c350:	2202      	movs	r2, #2
 800c352:	2101      	movs	r1, #1
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 fee4 	bl	800e122 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800c362:	e012      	b.n	800c38a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c364:	2340      	movs	r3, #64	; 0x40
 800c366:	2202      	movs	r2, #2
 800c368:	2181      	movs	r1, #129	; 0x81
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f001 fed9 	bl	800e122 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c376:	2340      	movs	r3, #64	; 0x40
 800c378:	2202      	movs	r2, #2
 800c37a:	2101      	movs	r1, #1
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f001 fed0 	bl	800e122 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2201      	movs	r2, #1
 800c386:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c38a:	2308      	movs	r3, #8
 800c38c:	2203      	movs	r2, #3
 800c38e:	2182      	movs	r1, #130	; 0x82
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f001 fec6 	bl	800e122 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c39c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c3a0:	f001 ffe6 	bl	800e370 <USBD_static_malloc>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d102      	bne.n	800c3bc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	73fb      	strb	r3, [r7, #15]
 800c3ba:	e026      	b.n	800c40a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7c1b      	ldrb	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d109      	bne.n	800c3fa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c3ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f001 ff86 	bl	800e304 <USBD_LL_PrepareReceive>
 800c3f8:	e007      	b.n	800c40a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c400:	2340      	movs	r3, #64	; 0x40
 800c402:	2101      	movs	r1, #1
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f001 ff7d 	bl	800e304 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	460b      	mov	r3, r1
 800c41e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c420:	2300      	movs	r3, #0
 800c422:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c424:	2181      	movs	r1, #129	; 0x81
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f001 fea1 	bl	800e16e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c432:	2101      	movs	r1, #1
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f001 fe9a 	bl	800e16e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c442:	2182      	movs	r1, #130	; 0x82
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f001 fe92 	bl	800e16e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00e      	beq.n	800c478 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c46a:	4618      	mov	r0, r3
 800c46c:	f001 ff8c 	bl	800e388 <USBD_static_free>
    pdev->pClassData = NULL;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800c478:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b086      	sub	sp, #24
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c492:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c494:	2300      	movs	r3, #0
 800c496:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d039      	beq.n	800c520 <USBD_CDC_Setup+0x9e>
 800c4ac:	2b20      	cmp	r3, #32
 800c4ae:	d17f      	bne.n	800c5b0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	88db      	ldrh	r3, [r3, #6]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d029      	beq.n	800c50c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	b25b      	sxtb	r3, r3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	da11      	bge.n	800c4e6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c4ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	88d2      	ldrh	r2, [r2, #6]
 800c4d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c4d6:	6939      	ldr	r1, [r7, #16]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	88db      	ldrh	r3, [r3, #6]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f001 fa09 	bl	800d8f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c4e4:	e06b      	b.n	800c5be <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	785a      	ldrb	r2, [r3, #1]
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	88db      	ldrh	r3, [r3, #6]
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c4fc:	6939      	ldr	r1, [r7, #16]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	88db      	ldrh	r3, [r3, #6]
 800c502:	461a      	mov	r2, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f001 fa24 	bl	800d952 <USBD_CtlPrepareRx>
      break;
 800c50a:	e058      	b.n	800c5be <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	683a      	ldr	r2, [r7, #0]
 800c516:	7850      	ldrb	r0, [r2, #1]
 800c518:	2200      	movs	r2, #0
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	4798      	blx	r3
      break;
 800c51e:	e04e      	b.n	800c5be <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	785b      	ldrb	r3, [r3, #1]
 800c524:	2b0b      	cmp	r3, #11
 800c526:	d02e      	beq.n	800c586 <USBD_CDC_Setup+0x104>
 800c528:	2b0b      	cmp	r3, #11
 800c52a:	dc38      	bgt.n	800c59e <USBD_CDC_Setup+0x11c>
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <USBD_CDC_Setup+0xb4>
 800c530:	2b0a      	cmp	r3, #10
 800c532:	d014      	beq.n	800c55e <USBD_CDC_Setup+0xdc>
 800c534:	e033      	b.n	800c59e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d107      	bne.n	800c550 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c540:	f107 030c 	add.w	r3, r7, #12
 800c544:	2202      	movs	r2, #2
 800c546:	4619      	mov	r1, r3
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f001 f9d4 	bl	800d8f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c54e:	e02e      	b.n	800c5ae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f001 f965 	bl	800d822 <USBD_CtlError>
            ret = USBD_FAIL;
 800c558:	2302      	movs	r3, #2
 800c55a:	75fb      	strb	r3, [r7, #23]
          break;
 800c55c:	e027      	b.n	800c5ae <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c564:	2b03      	cmp	r3, #3
 800c566:	d107      	bne.n	800c578 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c568:	f107 030f 	add.w	r3, r7, #15
 800c56c:	2201      	movs	r2, #1
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f001 f9c0 	bl	800d8f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c576:	e01a      	b.n	800c5ae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f001 f951 	bl	800d822 <USBD_CtlError>
            ret = USBD_FAIL;
 800c580:	2302      	movs	r3, #2
 800c582:	75fb      	strb	r3, [r7, #23]
          break;
 800c584:	e013      	b.n	800c5ae <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d00d      	beq.n	800c5ac <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f001 f945 	bl	800d822 <USBD_CtlError>
            ret = USBD_FAIL;
 800c598:	2302      	movs	r3, #2
 800c59a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c59c:	e006      	b.n	800c5ac <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f001 f93e 	bl	800d822 <USBD_CtlError>
          ret = USBD_FAIL;
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	75fb      	strb	r3, [r7, #23]
          break;
 800c5aa:	e000      	b.n	800c5ae <USBD_CDC_Setup+0x12c>
          break;
 800c5ac:	bf00      	nop
      }
      break;
 800c5ae:	e006      	b.n	800c5be <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f001 f935 	bl	800d822 <USBD_CtlError>
      ret = USBD_FAIL;
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c5bc:	bf00      	nop
  }

  return ret;
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3718      	adds	r7, #24
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5da:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5e2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d03a      	beq.n	800c664 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c5ee:	78fa      	ldrb	r2, [r7, #3]
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	440b      	add	r3, r1
 800c5fc:	331c      	adds	r3, #28
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d029      	beq.n	800c658 <USBD_CDC_DataIn+0x90>
 800c604:	78fa      	ldrb	r2, [r7, #3]
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	440b      	add	r3, r1
 800c612:	331c      	adds	r3, #28
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	78f9      	ldrb	r1, [r7, #3]
 800c618:	68b8      	ldr	r0, [r7, #8]
 800c61a:	460b      	mov	r3, r1
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	440b      	add	r3, r1
 800c620:	00db      	lsls	r3, r3, #3
 800c622:	4403      	add	r3, r0
 800c624:	3338      	adds	r3, #56	; 0x38
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	fbb2 f1f3 	udiv	r1, r2, r3
 800c62c:	fb03 f301 	mul.w	r3, r3, r1
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d110      	bne.n	800c658 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c636:	78fa      	ldrb	r2, [r7, #3]
 800c638:	6879      	ldr	r1, [r7, #4]
 800c63a:	4613      	mov	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4413      	add	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	440b      	add	r3, r1
 800c644:	331c      	adds	r3, #28
 800c646:	2200      	movs	r2, #0
 800c648:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c64a:	78f9      	ldrb	r1, [r7, #3]
 800c64c:	2300      	movs	r3, #0
 800c64e:	2200      	movs	r2, #0
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f001 fe34 	bl	800e2be <USBD_LL_Transmit>
 800c656:	e003      	b.n	800c660 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	e000      	b.n	800c666 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c664:	2302      	movs	r3, #2
  }
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b084      	sub	sp, #16
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c680:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c682:	78fb      	ldrb	r3, [r7, #3]
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f001 fe5f 	bl	800e34a <USBD_LL_GetRxDataSize>
 800c68c:	4602      	mov	r2, r0
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00d      	beq.n	800c6ba <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6a4:	68db      	ldr	r3, [r3, #12]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	4798      	blx	r3

    return USBD_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e000      	b.n	800c6bc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c6ba:	2302      	movs	r3, #2
  }
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d015      	beq.n	800c70a <USBD_CDC_EP0_RxReady+0x46>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c6e4:	2bff      	cmp	r3, #255	; 0xff
 800c6e6:	d010      	beq.n	800c70a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c6f6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c6fe:	b292      	uxth	r2, r2
 800c700:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	22ff      	movs	r2, #255	; 0xff
 800c706:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2243      	movs	r2, #67	; 0x43
 800c720:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c722:	4b03      	ldr	r3, [pc, #12]	; (800c730 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	bc80      	pop	{r7}
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	200000a8 	.word	0x200000a8

0800c734 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2243      	movs	r2, #67	; 0x43
 800c740:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c742:	4b03      	ldr	r3, [pc, #12]	; (800c750 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	bc80      	pop	{r7}
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	20000064 	.word	0x20000064

0800c754 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2243      	movs	r2, #67	; 0x43
 800c760:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c762:	4b03      	ldr	r3, [pc, #12]	; (800c770 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c764:	4618      	mov	r0, r3
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	bc80      	pop	{r7}
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	200000ec 	.word	0x200000ec

0800c774 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	220a      	movs	r2, #10
 800c780:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c782:	4b03      	ldr	r3, [pc, #12]	; (800c790 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	bc80      	pop	{r7}
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	20000020 	.word	0x20000020

0800c794 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c79e:	2302      	movs	r3, #2
 800c7a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bc80      	pop	{r7}
 800c7be:	4770      	bx	lr

0800c7c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b087      	sub	sp, #28
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c7de:	88fa      	ldrh	r2, [r7, #6]
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	371c      	adds	r7, #28
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bc80      	pop	{r7}
 800c7f0:	4770      	bx	lr

0800c7f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b085      	sub	sp, #20
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c802:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	bc80      	pop	{r7}
 800c816:	4770      	bx	lr

0800c818 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c826:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d01c      	beq.n	800c86c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d115      	bne.n	800c868 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2201      	movs	r2, #1
 800c840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	2181      	movs	r1, #129	; 0x81
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f001 fd2d 	bl	800e2be <USBD_LL_Transmit>

      return USBD_OK;
 800c864:	2300      	movs	r3, #0
 800c866:	e002      	b.n	800c86e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c868:	2301      	movs	r3, #1
 800c86a:	e000      	b.n	800c86e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c86c:	2302      	movs	r3, #2
  }
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c884:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d017      	beq.n	800c8c0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	7c1b      	ldrb	r3, [r3, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d109      	bne.n	800c8ac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c89e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8a2:	2101      	movs	r1, #1
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f001 fd2d 	bl	800e304 <USBD_LL_PrepareReceive>
 800c8aa:	e007      	b.n	800c8bc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8b2:	2340      	movs	r3, #64	; 0x40
 800c8b4:	2101      	movs	r1, #1
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f001 fd24 	bl	800e304 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e000      	b.n	800c8c2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c8c0:	2302      	movs	r3, #2
  }
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	60f8      	str	r0, [r7, #12]
 800c8d2:	60b9      	str	r1, [r7, #8]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d101      	bne.n	800c8e2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c8de:	2302      	movs	r3, #2
 800c8e0:	e01a      	b.n	800c918 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d003      	beq.n	800c8f4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d003      	beq.n	800c902 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2201      	movs	r2, #1
 800c906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	79fa      	ldrb	r2, [r7, #7]
 800c90e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f001 fb91 	bl	800e038 <USBD_LL_Init>

  return USBD_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d006      	beq.n	800c942 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	683a      	ldr	r2, [r7, #0]
 800c938:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73fb      	strb	r3, [r7, #15]
 800c940:	e001      	b.n	800c946 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c942:	2302      	movs	r3, #2
 800c944:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bc80      	pop	{r7}
 800c950:	4770      	bx	lr

0800c952 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f001 fbc6 	bl	800e0ec <USBD_LL_Start>

  return USBD_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c96a:	b480      	push	{r7}
 800c96c:	b083      	sub	sp, #12
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr

0800c97e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b084      	sub	sp, #16
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	460b      	mov	r3, r1
 800c988:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c98a:	2302      	movs	r3, #2
 800c98c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00c      	beq.n	800c9b2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	78fa      	ldrb	r2, [r7, #3]
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	4798      	blx	r3
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	78fa      	ldrb	r2, [r7, #3]
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	4798      	blx	r3

  return USBD_OK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fed8 	bl	800d7aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ca08:	461a      	mov	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ca16:	f003 031f 	and.w	r3, r3, #31
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d016      	beq.n	800ca4c <USBD_LL_SetupStage+0x6a>
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d81c      	bhi.n	800ca5c <USBD_LL_SetupStage+0x7a>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d002      	beq.n	800ca2c <USBD_LL_SetupStage+0x4a>
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d008      	beq.n	800ca3c <USBD_LL_SetupStage+0x5a>
 800ca2a:	e017      	b.n	800ca5c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 f9cb 	bl	800cdd0 <USBD_StdDevReq>
      break;
 800ca3a:	e01a      	b.n	800ca72 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fa2d 	bl	800cea4 <USBD_StdItfReq>
      break;
 800ca4a:	e012      	b.n	800ca72 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 fa6d 	bl	800cf34 <USBD_StdEPReq>
      break;
 800ca5a:	e00a      	b.n	800ca72 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ca62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	4619      	mov	r1, r3
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 fb9e 	bl	800e1ac <USBD_LL_StallEP>
      break;
 800ca70:	bf00      	nop
  }

  return USBD_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	460b      	mov	r3, r1
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d14b      	bne.n	800cb28 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ca96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d134      	bne.n	800cb0c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	68da      	ldr	r2, [r3, #12]
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d919      	bls.n	800cae2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	68da      	ldr	r2, [r3, #12]
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	1ad2      	subs	r2, r2, r3
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d203      	bcs.n	800cad0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cacc:	b29b      	uxth	r3, r3
 800cace:	e002      	b.n	800cad6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	461a      	mov	r2, r3
 800cad8:	6879      	ldr	r1, [r7, #4]
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f000 ff57 	bl	800d98e <USBD_CtlContinueRx>
 800cae0:	e038      	b.n	800cb54 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00a      	beq.n	800cb04 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800caf4:	2b03      	cmp	r3, #3
 800caf6:	d105      	bne.n	800cb04 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f000 ff54 	bl	800d9b2 <USBD_CtlSendStatus>
 800cb0a:	e023      	b.n	800cb54 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb12:	2b05      	cmp	r3, #5
 800cb14:	d11e      	bne.n	800cb54 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800cb1e:	2100      	movs	r1, #0
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f001 fb43 	bl	800e1ac <USBD_LL_StallEP>
 800cb26:	e015      	b.n	800cb54 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb2e:	699b      	ldr	r3, [r3, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00d      	beq.n	800cb50 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d108      	bne.n	800cb50 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	7afa      	ldrb	r2, [r7, #11]
 800cb48:	4611      	mov	r1, r2
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	4798      	blx	r3
 800cb4e:	e001      	b.n	800cb54 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cb50:	2302      	movs	r3, #2
 800cb52:	e000      	b.n	800cb56 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b086      	sub	sp, #24
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	460b      	mov	r3, r1
 800cb68:	607a      	str	r2, [r7, #4]
 800cb6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cb6c:	7afb      	ldrb	r3, [r7, #11]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d17f      	bne.n	800cc72 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3314      	adds	r3, #20
 800cb76:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d15c      	bne.n	800cc3c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	68da      	ldr	r2, [r3, #12]
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d915      	bls.n	800cbba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	68da      	ldr	r2, [r3, #12]
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	1ad2      	subs	r2, r2, r3
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	461a      	mov	r2, r3
 800cba4:	6879      	ldr	r1, [r7, #4]
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f000 fec1 	bl	800d92e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbac:	2300      	movs	r3, #0
 800cbae:	2200      	movs	r2, #0
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f001 fba6 	bl	800e304 <USBD_LL_PrepareReceive>
 800cbb8:	e04e      	b.n	800cc58 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	6912      	ldr	r2, [r2, #16]
 800cbc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbc6:	fb02 f201 	mul.w	r2, r2, r1
 800cbca:	1a9b      	subs	r3, r3, r2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d11c      	bne.n	800cc0a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	689a      	ldr	r2, [r3, #8]
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d316      	bcc.n	800cc0a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	689a      	ldr	r2, [r3, #8]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d20f      	bcs.n	800cc0a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cbea:	2200      	movs	r2, #0
 800cbec:	2100      	movs	r1, #0
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 fe9d 	bl	800d92e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2100      	movs	r1, #0
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f001 fb7e 	bl	800e304 <USBD_LL_PrepareReceive>
 800cc08:	e026      	b.n	800cc58 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00a      	beq.n	800cc2c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cc1c:	2b03      	cmp	r3, #3
 800cc1e:	d105      	bne.n	800cc2c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cc2c:	2180      	movs	r1, #128	; 0x80
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f001 fabc 	bl	800e1ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f000 fecf 	bl	800d9d8 <USBD_CtlReceiveStatus>
 800cc3a:	e00d      	b.n	800cc58 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cc42:	2b04      	cmp	r3, #4
 800cc44:	d004      	beq.n	800cc50 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d103      	bne.n	800cc58 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cc50:	2180      	movs	r1, #128	; 0x80
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f001 faaa 	bl	800e1ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d11d      	bne.n	800cc9e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f7ff fe81 	bl	800c96a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cc70:	e015      	b.n	800cc9e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc78:	695b      	ldr	r3, [r3, #20]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00d      	beq.n	800cc9a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800cc84:	2b03      	cmp	r3, #3
 800cc86:	d108      	bne.n	800cc9a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	7afa      	ldrb	r2, [r7, #11]
 800cc92:	4611      	mov	r1, r2
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	4798      	blx	r3
 800cc98:	e001      	b.n	800cc9e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cc9a:	2302      	movs	r3, #2
 800cc9c:	e000      	b.n	800cca0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccb0:	2340      	movs	r3, #64	; 0x40
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f001 fa33 	bl	800e122 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2240      	movs	r2, #64	; 0x40
 800ccc8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cccc:	2340      	movs	r3, #64	; 0x40
 800ccce:	2200      	movs	r2, #0
 800ccd0:	2180      	movs	r1, #128	; 0x80
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f001 fa25 	bl	800e122 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2240      	movs	r2, #64	; 0x40
 800cce2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d009      	beq.n	800cd20 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	6852      	ldr	r2, [r2, #4]
 800cd18:	b2d2      	uxtb	r2, r2
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	4798      	blx	r3
  }

  return USBD_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b083      	sub	sp, #12
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
 800cd32:	460b      	mov	r3, r1
 800cd34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	78fa      	ldrb	r2, [r7, #3]
 800cd3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	370c      	adds	r7, #12
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bc80      	pop	{r7}
 800cd46:	4770      	bx	lr

0800cd48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2204      	movs	r2, #4
 800cd60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bc80      	pop	{r7}
 800cd6e:	4770      	bx	lr

0800cd70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd7e:	2b04      	cmp	r3, #4
 800cd80:	d105      	bne.n	800cd8e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bc80      	pop	{r7}
 800cd98:	4770      	bx	lr

0800cd9a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b082      	sub	sp, #8
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d10b      	bne.n	800cdc4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdb2:	69db      	ldr	r3, [r3, #28]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d005      	beq.n	800cdc4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cdc4:	2300      	movs	r3, #0
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cde6:	2b40      	cmp	r3, #64	; 0x40
 800cde8:	d005      	beq.n	800cdf6 <USBD_StdDevReq+0x26>
 800cdea:	2b40      	cmp	r3, #64	; 0x40
 800cdec:	d84f      	bhi.n	800ce8e <USBD_StdDevReq+0xbe>
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d009      	beq.n	800ce06 <USBD_StdDevReq+0x36>
 800cdf2:	2b20      	cmp	r3, #32
 800cdf4:	d14b      	bne.n	800ce8e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	6839      	ldr	r1, [r7, #0]
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	4798      	blx	r3
      break;
 800ce04:	e048      	b.n	800ce98 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	785b      	ldrb	r3, [r3, #1]
 800ce0a:	2b09      	cmp	r3, #9
 800ce0c:	d839      	bhi.n	800ce82 <USBD_StdDevReq+0xb2>
 800ce0e:	a201      	add	r2, pc, #4	; (adr r2, 800ce14 <USBD_StdDevReq+0x44>)
 800ce10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce14:	0800ce65 	.word	0x0800ce65
 800ce18:	0800ce79 	.word	0x0800ce79
 800ce1c:	0800ce83 	.word	0x0800ce83
 800ce20:	0800ce6f 	.word	0x0800ce6f
 800ce24:	0800ce83 	.word	0x0800ce83
 800ce28:	0800ce47 	.word	0x0800ce47
 800ce2c:	0800ce3d 	.word	0x0800ce3d
 800ce30:	0800ce83 	.word	0x0800ce83
 800ce34:	0800ce5b 	.word	0x0800ce5b
 800ce38:	0800ce51 	.word	0x0800ce51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f9dc 	bl	800d1fc <USBD_GetDescriptor>
          break;
 800ce44:	e022      	b.n	800ce8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fb3f 	bl	800d4cc <USBD_SetAddress>
          break;
 800ce4e:	e01d      	b.n	800ce8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 fb7e 	bl	800d554 <USBD_SetConfig>
          break;
 800ce58:	e018      	b.n	800ce8c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fc07 	bl	800d670 <USBD_GetConfig>
          break;
 800ce62:	e013      	b.n	800ce8c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ce64:	6839      	ldr	r1, [r7, #0]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fc37 	bl	800d6da <USBD_GetStatus>
          break;
 800ce6c:	e00e      	b.n	800ce8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fc65 	bl	800d740 <USBD_SetFeature>
          break;
 800ce76:	e009      	b.n	800ce8c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fc74 	bl	800d768 <USBD_ClrFeature>
          break;
 800ce80:	e004      	b.n	800ce8c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ce82:	6839      	ldr	r1, [r7, #0]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 fccc 	bl	800d822 <USBD_CtlError>
          break;
 800ce8a:	bf00      	nop
      }
      break;
 800ce8c:	e004      	b.n	800ce98 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ce8e:	6839      	ldr	r1, [r7, #0]
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fcc6 	bl	800d822 <USBD_CtlError>
      break;
 800ce96:	bf00      	nop
  }

  return ret;
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop

0800cea4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ceba:	2b40      	cmp	r3, #64	; 0x40
 800cebc:	d005      	beq.n	800ceca <USBD_StdItfReq+0x26>
 800cebe:	2b40      	cmp	r3, #64	; 0x40
 800cec0:	d82e      	bhi.n	800cf20 <USBD_StdItfReq+0x7c>
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <USBD_StdItfReq+0x26>
 800cec6:	2b20      	cmp	r3, #32
 800cec8:	d12a      	bne.n	800cf20 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ced0:	3b01      	subs	r3, #1
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d81d      	bhi.n	800cf12 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	889b      	ldrh	r3, [r3, #4]
 800ceda:	b2db      	uxtb	r3, r3
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d813      	bhi.n	800cf08 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	6839      	ldr	r1, [r7, #0]
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	4798      	blx	r3
 800ceee:	4603      	mov	r3, r0
 800cef0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	88db      	ldrh	r3, [r3, #6]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d110      	bne.n	800cf1c <USBD_StdItfReq+0x78>
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10d      	bne.n	800cf1c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fd56 	bl	800d9b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cf06:	e009      	b.n	800cf1c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fc89 	bl	800d822 <USBD_CtlError>
          break;
 800cf10:	e004      	b.n	800cf1c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fc84 	bl	800d822 <USBD_CtlError>
          break;
 800cf1a:	e000      	b.n	800cf1e <USBD_StdItfReq+0x7a>
          break;
 800cf1c:	bf00      	nop
      }
      break;
 800cf1e:	e004      	b.n	800cf2a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fc7d 	bl	800d822 <USBD_CtlError>
      break;
 800cf28:	bf00      	nop
  }

  return USBD_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	889b      	ldrh	r3, [r3, #4]
 800cf46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf50:	2b40      	cmp	r3, #64	; 0x40
 800cf52:	d007      	beq.n	800cf64 <USBD_StdEPReq+0x30>
 800cf54:	2b40      	cmp	r3, #64	; 0x40
 800cf56:	f200 8146 	bhi.w	800d1e6 <USBD_StdEPReq+0x2b2>
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00a      	beq.n	800cf74 <USBD_StdEPReq+0x40>
 800cf5e:	2b20      	cmp	r3, #32
 800cf60:	f040 8141 	bne.w	800d1e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	4798      	blx	r3
      break;
 800cf72:	e13d      	b.n	800d1f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf7c:	2b20      	cmp	r3, #32
 800cf7e:	d10a      	bne.n	800cf96 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	4798      	blx	r3
 800cf8e:	4603      	mov	r3, r0
 800cf90:	73fb      	strb	r3, [r7, #15]

        return ret;
 800cf92:	7bfb      	ldrb	r3, [r7, #15]
 800cf94:	e12d      	b.n	800d1f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	785b      	ldrb	r3, [r3, #1]
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d007      	beq.n	800cfae <USBD_StdEPReq+0x7a>
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	f300 811b 	bgt.w	800d1da <USBD_StdEPReq+0x2a6>
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d072      	beq.n	800d08e <USBD_StdEPReq+0x15a>
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d03a      	beq.n	800d022 <USBD_StdEPReq+0xee>
 800cfac:	e115      	b.n	800d1da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d002      	beq.n	800cfbe <USBD_StdEPReq+0x8a>
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d015      	beq.n	800cfe8 <USBD_StdEPReq+0xb4>
 800cfbc:	e02b      	b.n	800d016 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cfbe:	7bbb      	ldrb	r3, [r7, #14]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00c      	beq.n	800cfde <USBD_StdEPReq+0xaa>
 800cfc4:	7bbb      	ldrb	r3, [r7, #14]
 800cfc6:	2b80      	cmp	r3, #128	; 0x80
 800cfc8:	d009      	beq.n	800cfde <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f001 f8ec 	bl	800e1ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800cfd4:	2180      	movs	r1, #128	; 0x80
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f001 f8e8 	bl	800e1ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cfdc:	e020      	b.n	800d020 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800cfde:	6839      	ldr	r1, [r7, #0]
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 fc1e 	bl	800d822 <USBD_CtlError>
              break;
 800cfe6:	e01b      	b.n	800d020 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	885b      	ldrh	r3, [r3, #2]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10e      	bne.n	800d00e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00b      	beq.n	800d00e <USBD_StdEPReq+0xda>
 800cff6:	7bbb      	ldrb	r3, [r7, #14]
 800cff8:	2b80      	cmp	r3, #128	; 0x80
 800cffa:	d008      	beq.n	800d00e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	88db      	ldrh	r3, [r3, #6]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d104      	bne.n	800d00e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d004:	7bbb      	ldrb	r3, [r7, #14]
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f001 f8cf 	bl	800e1ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fccf 	bl	800d9b2 <USBD_CtlSendStatus>

              break;
 800d014:	e004      	b.n	800d020 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 fc02 	bl	800d822 <USBD_CtlError>
              break;
 800d01e:	bf00      	nop
          }
          break;
 800d020:	e0e0      	b.n	800d1e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d002      	beq.n	800d032 <USBD_StdEPReq+0xfe>
 800d02c:	2b03      	cmp	r3, #3
 800d02e:	d015      	beq.n	800d05c <USBD_StdEPReq+0x128>
 800d030:	e026      	b.n	800d080 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d032:	7bbb      	ldrb	r3, [r7, #14]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00c      	beq.n	800d052 <USBD_StdEPReq+0x11e>
 800d038:	7bbb      	ldrb	r3, [r7, #14]
 800d03a:	2b80      	cmp	r3, #128	; 0x80
 800d03c:	d009      	beq.n	800d052 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d03e:	7bbb      	ldrb	r3, [r7, #14]
 800d040:	4619      	mov	r1, r3
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f001 f8b2 	bl	800e1ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d048:	2180      	movs	r1, #128	; 0x80
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f001 f8ae 	bl	800e1ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d050:	e01c      	b.n	800d08c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d052:	6839      	ldr	r1, [r7, #0]
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fbe4 	bl	800d822 <USBD_CtlError>
              break;
 800d05a:	e017      	b.n	800d08c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	885b      	ldrh	r3, [r3, #2]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d112      	bne.n	800d08a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d064:	7bbb      	ldrb	r3, [r7, #14]
 800d066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d004      	beq.n	800d078 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d06e:	7bbb      	ldrb	r3, [r7, #14]
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f001 f8b9 	bl	800e1ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 fc9a 	bl	800d9b2 <USBD_CtlSendStatus>
              }
              break;
 800d07e:	e004      	b.n	800d08a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fbcd 	bl	800d822 <USBD_CtlError>
              break;
 800d088:	e000      	b.n	800d08c <USBD_StdEPReq+0x158>
              break;
 800d08a:	bf00      	nop
          }
          break;
 800d08c:	e0aa      	b.n	800d1e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d094:	2b02      	cmp	r3, #2
 800d096:	d002      	beq.n	800d09e <USBD_StdEPReq+0x16a>
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d032      	beq.n	800d102 <USBD_StdEPReq+0x1ce>
 800d09c:	e097      	b.n	800d1ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d09e:	7bbb      	ldrb	r3, [r7, #14]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d007      	beq.n	800d0b4 <USBD_StdEPReq+0x180>
 800d0a4:	7bbb      	ldrb	r3, [r7, #14]
 800d0a6:	2b80      	cmp	r3, #128	; 0x80
 800d0a8:	d004      	beq.n	800d0b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d0aa:	6839      	ldr	r1, [r7, #0]
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fbb8 	bl	800d822 <USBD_CtlError>
                break;
 800d0b2:	e091      	b.n	800d1d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	da0b      	bge.n	800d0d4 <USBD_StdEPReq+0x1a0>
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
 800d0be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4413      	add	r3, r2
 800d0c8:	009b      	lsls	r3, r3, #2
 800d0ca:	3310      	adds	r3, #16
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	e00b      	b.n	800d0ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
 800d0d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0da:	4613      	mov	r3, r2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fbfb 	bl	800d8f6 <USBD_CtlSendData>
              break;
 800d100:	e06a      	b.n	800d1d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d106:	2b00      	cmp	r3, #0
 800d108:	da11      	bge.n	800d12e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
 800d10c:	f003 020f 	and.w	r2, r3, #15
 800d110:	6879      	ldr	r1, [r7, #4]
 800d112:	4613      	mov	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4413      	add	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	440b      	add	r3, r1
 800d11c:	3318      	adds	r3, #24
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d117      	bne.n	800d154 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fb7b 	bl	800d822 <USBD_CtlError>
                  break;
 800d12c:	e054      	b.n	800d1d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
 800d130:	f003 020f 	and.w	r2, r3, #15
 800d134:	6879      	ldr	r1, [r7, #4]
 800d136:	4613      	mov	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	4413      	add	r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	440b      	add	r3, r1
 800d140:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d104      	bne.n	800d154 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 fb68 	bl	800d822 <USBD_CtlError>
                  break;
 800d152:	e041      	b.n	800d1d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	da0b      	bge.n	800d174 <USBD_StdEPReq+0x240>
 800d15c:	7bbb      	ldrb	r3, [r7, #14]
 800d15e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d162:	4613      	mov	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	3310      	adds	r3, #16
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	4413      	add	r3, r2
 800d170:	3304      	adds	r3, #4
 800d172:	e00b      	b.n	800d18c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d174:	7bbb      	ldrb	r3, [r7, #14]
 800d176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d17a:	4613      	mov	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4413      	add	r3, r2
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	4413      	add	r3, r2
 800d18a:	3304      	adds	r3, #4
 800d18c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <USBD_StdEPReq+0x266>
 800d194:	7bbb      	ldrb	r3, [r7, #14]
 800d196:	2b80      	cmp	r3, #128	; 0x80
 800d198:	d103      	bne.n	800d1a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	e00e      	b.n	800d1c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d1a2:	7bbb      	ldrb	r3, [r7, #14]
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f001 f83e 	bl	800e228 <USBD_LL_IsStallEP>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d003      	beq.n	800d1ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	e002      	b.n	800d1c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 fb95 	bl	800d8f6 <USBD_CtlSendData>
              break;
 800d1cc:	e004      	b.n	800d1d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fb26 	bl	800d822 <USBD_CtlError>
              break;
 800d1d6:	bf00      	nop
          }
          break;
 800d1d8:	e004      	b.n	800d1e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d1da:	6839      	ldr	r1, [r7, #0]
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fb20 	bl	800d822 <USBD_CtlError>
          break;
 800d1e2:	bf00      	nop
      }
      break;
 800d1e4:	e004      	b.n	800d1f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 fb1a 	bl	800d822 <USBD_CtlError>
      break;
 800d1ee:	bf00      	nop
  }

  return ret;
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d20e:	2300      	movs	r3, #0
 800d210:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	885b      	ldrh	r3, [r3, #2]
 800d216:	0a1b      	lsrs	r3, r3, #8
 800d218:	b29b      	uxth	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	2b06      	cmp	r3, #6
 800d21e:	f200 8128 	bhi.w	800d472 <USBD_GetDescriptor+0x276>
 800d222:	a201      	add	r2, pc, #4	; (adr r2, 800d228 <USBD_GetDescriptor+0x2c>)
 800d224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d228:	0800d245 	.word	0x0800d245
 800d22c:	0800d25d 	.word	0x0800d25d
 800d230:	0800d29d 	.word	0x0800d29d
 800d234:	0800d473 	.word	0x0800d473
 800d238:	0800d473 	.word	0x0800d473
 800d23c:	0800d413 	.word	0x0800d413
 800d240:	0800d43f 	.word	0x0800d43f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	7c12      	ldrb	r2, [r2, #16]
 800d250:	f107 0108 	add.w	r1, r7, #8
 800d254:	4610      	mov	r0, r2
 800d256:	4798      	blx	r3
 800d258:	60f8      	str	r0, [r7, #12]
      break;
 800d25a:	e112      	b.n	800d482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	7c1b      	ldrb	r3, [r3, #16]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10d      	bne.n	800d280 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26c:	f107 0208 	add.w	r2, r7, #8
 800d270:	4610      	mov	r0, r2
 800d272:	4798      	blx	r3
 800d274:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3301      	adds	r3, #1
 800d27a:	2202      	movs	r2, #2
 800d27c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d27e:	e100      	b.n	800d482 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	f107 0208 	add.w	r2, r7, #8
 800d28c:	4610      	mov	r0, r2
 800d28e:	4798      	blx	r3
 800d290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	3301      	adds	r3, #1
 800d296:	2202      	movs	r2, #2
 800d298:	701a      	strb	r2, [r3, #0]
      break;
 800d29a:	e0f2      	b.n	800d482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	885b      	ldrh	r3, [r3, #2]
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	2b05      	cmp	r3, #5
 800d2a4:	f200 80ac 	bhi.w	800d400 <USBD_GetDescriptor+0x204>
 800d2a8:	a201      	add	r2, pc, #4	; (adr r2, 800d2b0 <USBD_GetDescriptor+0xb4>)
 800d2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ae:	bf00      	nop
 800d2b0:	0800d2c9 	.word	0x0800d2c9
 800d2b4:	0800d2fd 	.word	0x0800d2fd
 800d2b8:	0800d331 	.word	0x0800d331
 800d2bc:	0800d365 	.word	0x0800d365
 800d2c0:	0800d399 	.word	0x0800d399
 800d2c4:	0800d3cd 	.word	0x0800d3cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00b      	beq.n	800d2ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	7c12      	ldrb	r2, [r2, #16]
 800d2e0:	f107 0108 	add.w	r1, r7, #8
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	4798      	blx	r3
 800d2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2ea:	e091      	b.n	800d410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fa97 	bl	800d822 <USBD_CtlError>
            err++;
 800d2f4:	7afb      	ldrb	r3, [r7, #11]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d2fa:	e089      	b.n	800d410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d00b      	beq.n	800d320 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	7c12      	ldrb	r2, [r2, #16]
 800d314:	f107 0108 	add.w	r1, r7, #8
 800d318:	4610      	mov	r0, r2
 800d31a:	4798      	blx	r3
 800d31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d31e:	e077      	b.n	800d410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d320:	6839      	ldr	r1, [r7, #0]
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 fa7d 	bl	800d822 <USBD_CtlError>
            err++;
 800d328:	7afb      	ldrb	r3, [r7, #11]
 800d32a:	3301      	adds	r3, #1
 800d32c:	72fb      	strb	r3, [r7, #11]
          break;
 800d32e:	e06f      	b.n	800d410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00b      	beq.n	800d354 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	7c12      	ldrb	r2, [r2, #16]
 800d348:	f107 0108 	add.w	r1, r7, #8
 800d34c:	4610      	mov	r0, r2
 800d34e:	4798      	blx	r3
 800d350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d352:	e05d      	b.n	800d410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d354:	6839      	ldr	r1, [r7, #0]
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 fa63 	bl	800d822 <USBD_CtlError>
            err++;
 800d35c:	7afb      	ldrb	r3, [r7, #11]
 800d35e:	3301      	adds	r3, #1
 800d360:	72fb      	strb	r3, [r7, #11]
          break;
 800d362:	e055      	b.n	800d410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d36a:	691b      	ldr	r3, [r3, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00b      	beq.n	800d388 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	7c12      	ldrb	r2, [r2, #16]
 800d37c:	f107 0108 	add.w	r1, r7, #8
 800d380:	4610      	mov	r0, r2
 800d382:	4798      	blx	r3
 800d384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d386:	e043      	b.n	800d410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d388:	6839      	ldr	r1, [r7, #0]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fa49 	bl	800d822 <USBD_CtlError>
            err++;
 800d390:	7afb      	ldrb	r3, [r7, #11]
 800d392:	3301      	adds	r3, #1
 800d394:	72fb      	strb	r3, [r7, #11]
          break;
 800d396:	e03b      	b.n	800d410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00b      	beq.n	800d3bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	7c12      	ldrb	r2, [r2, #16]
 800d3b0:	f107 0108 	add.w	r1, r7, #8
 800d3b4:	4610      	mov	r0, r2
 800d3b6:	4798      	blx	r3
 800d3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3ba:	e029      	b.n	800d410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3bc:	6839      	ldr	r1, [r7, #0]
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 fa2f 	bl	800d822 <USBD_CtlError>
            err++;
 800d3c4:	7afb      	ldrb	r3, [r7, #11]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ca:	e021      	b.n	800d410 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d3d2:	699b      	ldr	r3, [r3, #24]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00b      	beq.n	800d3f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	7c12      	ldrb	r2, [r2, #16]
 800d3e4:	f107 0108 	add.w	r1, r7, #8
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	4798      	blx	r3
 800d3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3ee:	e00f      	b.n	800d410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fa15 	bl	800d822 <USBD_CtlError>
            err++;
 800d3f8:	7afb      	ldrb	r3, [r7, #11]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d3fe:	e007      	b.n	800d410 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d400:	6839      	ldr	r1, [r7, #0]
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fa0d 	bl	800d822 <USBD_CtlError>
          err++;
 800d408:	7afb      	ldrb	r3, [r7, #11]
 800d40a:	3301      	adds	r3, #1
 800d40c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d40e:	e038      	b.n	800d482 <USBD_GetDescriptor+0x286>
 800d410:	e037      	b.n	800d482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	7c1b      	ldrb	r3, [r3, #16]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d109      	bne.n	800d42e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d422:	f107 0208 	add.w	r2, r7, #8
 800d426:	4610      	mov	r0, r2
 800d428:	4798      	blx	r3
 800d42a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d42c:	e029      	b.n	800d482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d42e:	6839      	ldr	r1, [r7, #0]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 f9f6 	bl	800d822 <USBD_CtlError>
        err++;
 800d436:	7afb      	ldrb	r3, [r7, #11]
 800d438:	3301      	adds	r3, #1
 800d43a:	72fb      	strb	r3, [r7, #11]
      break;
 800d43c:	e021      	b.n	800d482 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7c1b      	ldrb	r3, [r3, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10d      	bne.n	800d462 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44e:	f107 0208 	add.w	r2, r7, #8
 800d452:	4610      	mov	r0, r2
 800d454:	4798      	blx	r3
 800d456:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	3301      	adds	r3, #1
 800d45c:	2207      	movs	r2, #7
 800d45e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d460:	e00f      	b.n	800d482 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 f9dc 	bl	800d822 <USBD_CtlError>
        err++;
 800d46a:	7afb      	ldrb	r3, [r7, #11]
 800d46c:	3301      	adds	r3, #1
 800d46e:	72fb      	strb	r3, [r7, #11]
      break;
 800d470:	e007      	b.n	800d482 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 f9d4 	bl	800d822 <USBD_CtlError>
      err++;
 800d47a:	7afb      	ldrb	r3, [r7, #11]
 800d47c:	3301      	adds	r3, #1
 800d47e:	72fb      	strb	r3, [r7, #11]
      break;
 800d480:	bf00      	nop
  }

  if (err != 0U)
 800d482:	7afb      	ldrb	r3, [r7, #11]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d11c      	bne.n	800d4c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d488:	893b      	ldrh	r3, [r7, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d011      	beq.n	800d4b2 <USBD_GetDescriptor+0x2b6>
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	88db      	ldrh	r3, [r3, #6]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00d      	beq.n	800d4b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	88da      	ldrh	r2, [r3, #6]
 800d49a:	893b      	ldrh	r3, [r7, #8]
 800d49c:	4293      	cmp	r3, r2
 800d49e:	bf28      	it	cs
 800d4a0:	4613      	movcs	r3, r2
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4a6:	893b      	ldrh	r3, [r7, #8]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	68f9      	ldr	r1, [r7, #12]
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f000 fa22 	bl	800d8f6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	88db      	ldrh	r3, [r3, #6]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d104      	bne.n	800d4c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 fa79 	bl	800d9b2 <USBD_CtlSendStatus>
 800d4c0:	e000      	b.n	800d4c4 <USBD_GetDescriptor+0x2c8>
    return;
 800d4c2:	bf00      	nop
    }
  }
}
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop

0800d4cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	889b      	ldrh	r3, [r3, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d130      	bne.n	800d540 <USBD_SetAddress+0x74>
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	88db      	ldrh	r3, [r3, #6]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d12c      	bne.n	800d540 <USBD_SetAddress+0x74>
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	885b      	ldrh	r3, [r3, #2]
 800d4ea:	2b7f      	cmp	r3, #127	; 0x7f
 800d4ec:	d828      	bhi.n	800d540 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	885b      	ldrh	r3, [r3, #2]
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d500:	2b03      	cmp	r3, #3
 800d502:	d104      	bne.n	800d50e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f98b 	bl	800d822 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d50c:	e01d      	b.n	800d54a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	7bfa      	ldrb	r2, [r7, #15]
 800d512:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d516:	7bfb      	ldrb	r3, [r7, #15]
 800d518:	4619      	mov	r1, r3
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 feb0 	bl	800e280 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fa46 	bl	800d9b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d526:	7bfb      	ldrb	r3, [r7, #15]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d004      	beq.n	800d536 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2202      	movs	r2, #2
 800d530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d534:	e009      	b.n	800d54a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d53e:	e004      	b.n	800d54a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d540:	6839      	ldr	r1, [r7, #0]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f96d 	bl	800d822 <USBD_CtlError>
  }
}
 800d548:	bf00      	nop
 800d54a:	bf00      	nop
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
	...

0800d554 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	885b      	ldrh	r3, [r3, #2]
 800d562:	b2da      	uxtb	r2, r3
 800d564:	4b41      	ldr	r3, [pc, #260]	; (800d66c <USBD_SetConfig+0x118>)
 800d566:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d568:	4b40      	ldr	r3, [pc, #256]	; (800d66c <USBD_SetConfig+0x118>)
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d904      	bls.n	800d57a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d570:	6839      	ldr	r1, [r7, #0]
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 f955 	bl	800d822 <USBD_CtlError>
 800d578:	e075      	b.n	800d666 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d580:	2b02      	cmp	r3, #2
 800d582:	d002      	beq.n	800d58a <USBD_SetConfig+0x36>
 800d584:	2b03      	cmp	r3, #3
 800d586:	d023      	beq.n	800d5d0 <USBD_SetConfig+0x7c>
 800d588:	e062      	b.n	800d650 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d58a:	4b38      	ldr	r3, [pc, #224]	; (800d66c <USBD_SetConfig+0x118>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d01a      	beq.n	800d5c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d592:	4b36      	ldr	r3, [pc, #216]	; (800d66c <USBD_SetConfig+0x118>)
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	461a      	mov	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2203      	movs	r2, #3
 800d5a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d5a4:	4b31      	ldr	r3, [pc, #196]	; (800d66c <USBD_SetConfig+0x118>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff f9e7 	bl	800c97e <USBD_SetClassConfig>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d104      	bne.n	800d5c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d5b6:	6839      	ldr	r1, [r7, #0]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f932 	bl	800d822 <USBD_CtlError>
            return;
 800d5be:	e052      	b.n	800d666 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 f9f6 	bl	800d9b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d5c6:	e04e      	b.n	800d666 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f9f2 	bl	800d9b2 <USBD_CtlSendStatus>
        break;
 800d5ce:	e04a      	b.n	800d666 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d5d0:	4b26      	ldr	r3, [pc, #152]	; (800d66c <USBD_SetConfig+0x118>)
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d112      	bne.n	800d5fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2202      	movs	r2, #2
 800d5dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800d5e0:	4b22      	ldr	r3, [pc, #136]	; (800d66c <USBD_SetConfig+0x118>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d5ea:	4b20      	ldr	r3, [pc, #128]	; (800d66c <USBD_SetConfig+0x118>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f7ff f9e3 	bl	800c9bc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 f9db 	bl	800d9b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d5fc:	e033      	b.n	800d666 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d5fe:	4b1b      	ldr	r3, [pc, #108]	; (800d66c <USBD_SetConfig+0x118>)
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	461a      	mov	r2, r3
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d01d      	beq.n	800d648 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	b2db      	uxtb	r3, r3
 800d612:	4619      	mov	r1, r3
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7ff f9d1 	bl	800c9bc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d61a:	4b14      	ldr	r3, [pc, #80]	; (800d66c <USBD_SetConfig+0x118>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	461a      	mov	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d624:	4b11      	ldr	r3, [pc, #68]	; (800d66c <USBD_SetConfig+0x118>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f7ff f9a7 	bl	800c97e <USBD_SetClassConfig>
 800d630:	4603      	mov	r3, r0
 800d632:	2b02      	cmp	r3, #2
 800d634:	d104      	bne.n	800d640 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f8f2 	bl	800d822 <USBD_CtlError>
            return;
 800d63e:	e012      	b.n	800d666 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f9b6 	bl	800d9b2 <USBD_CtlSendStatus>
        break;
 800d646:	e00e      	b.n	800d666 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f9b2 	bl	800d9b2 <USBD_CtlSendStatus>
        break;
 800d64e:	e00a      	b.n	800d666 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f8e5 	bl	800d822 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d658:	4b04      	ldr	r3, [pc, #16]	; (800d66c <USBD_SetConfig+0x118>)
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7ff f9ac 	bl	800c9bc <USBD_ClrClassConfig>
        break;
 800d664:	bf00      	nop
    }
  }
}
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	2000067c 	.word	0x2000067c

0800d670 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	88db      	ldrh	r3, [r3, #6]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d004      	beq.n	800d68c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d682:	6839      	ldr	r1, [r7, #0]
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f8cc 	bl	800d822 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d68a:	e022      	b.n	800d6d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d692:	2b02      	cmp	r3, #2
 800d694:	dc02      	bgt.n	800d69c <USBD_GetConfig+0x2c>
 800d696:	2b00      	cmp	r3, #0
 800d698:	dc03      	bgt.n	800d6a2 <USBD_GetConfig+0x32>
 800d69a:	e015      	b.n	800d6c8 <USBD_GetConfig+0x58>
 800d69c:	2b03      	cmp	r3, #3
 800d69e:	d00b      	beq.n	800d6b8 <USBD_GetConfig+0x48>
 800d6a0:	e012      	b.n	800d6c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	3308      	adds	r3, #8
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 f920 	bl	800d8f6 <USBD_CtlSendData>
        break;
 800d6b6:	e00c      	b.n	800d6d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3304      	adds	r3, #4
 800d6bc:	2201      	movs	r2, #1
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f918 	bl	800d8f6 <USBD_CtlSendData>
        break;
 800d6c6:	e004      	b.n	800d6d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f8a9 	bl	800d822 <USBD_CtlError>
        break;
 800d6d0:	bf00      	nop
}
 800d6d2:	bf00      	nop
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b082      	sub	sp, #8
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d81e      	bhi.n	800d72e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	88db      	ldrh	r3, [r3, #6]
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d004      	beq.n	800d702 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f891 	bl	800d822 <USBD_CtlError>
        break;
 800d700:	e01a      	b.n	800d738 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d005      	beq.n	800d71e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	f043 0202 	orr.w	r2, r3, #2
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	330c      	adds	r3, #12
 800d722:	2202      	movs	r2, #2
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f8e5 	bl	800d8f6 <USBD_CtlSendData>
      break;
 800d72c:	e004      	b.n	800d738 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800d72e:	6839      	ldr	r1, [r7, #0]
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 f876 	bl	800d822 <USBD_CtlError>
      break;
 800d736:	bf00      	nop
  }
}
 800d738:	bf00      	nop
 800d73a:	3708      	adds	r7, #8
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	885b      	ldrh	r3, [r3, #2]
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d106      	bne.n	800d760 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2201      	movs	r2, #1
 800d756:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f929 	bl	800d9b2 <USBD_CtlSendStatus>
  }
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d778:	3b01      	subs	r3, #1
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d80b      	bhi.n	800d796 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	885b      	ldrh	r3, [r3, #2]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d10c      	bne.n	800d7a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f90f 	bl	800d9b2 <USBD_CtlSendStatus>
      }
      break;
 800d794:	e004      	b.n	800d7a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d796:	6839      	ldr	r1, [r7, #0]
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 f842 	bl	800d822 <USBD_CtlError>
      break;
 800d79e:	e000      	b.n	800d7a2 <USBD_ClrFeature+0x3a>
      break;
 800d7a0:	bf00      	nop
  }
}
 800d7a2:	bf00      	nop
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d7aa:	b480      	push	{r7}
 800d7ac:	b083      	sub	sp, #12
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	781a      	ldrb	r2, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	785a      	ldrb	r2, [r3, #1]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	3302      	adds	r3, #2
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	3303      	adds	r3, #3
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	021b      	lsls	r3, r3, #8
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	4413      	add	r3, r2
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	3305      	adds	r3, #5
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	021b      	lsls	r3, r3, #8
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	4413      	add	r3, r2
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	3306      	adds	r3, #6
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	b29a      	uxth	r2, r3
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	3307      	adds	r3, #7
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	021b      	lsls	r3, r3, #8
 800d80e:	b29b      	uxth	r3, r3
 800d810:	4413      	add	r3, r2
 800d812:	b29a      	uxth	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	80da      	strh	r2, [r3, #6]

}
 800d818:	bf00      	nop
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bc80      	pop	{r7}
 800d820:	4770      	bx	lr

0800d822 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b082      	sub	sp, #8
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800d82c:	2180      	movs	r1, #128	; 0x80
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 fcbc 	bl	800e1ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800d834:	2100      	movs	r1, #0
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 fcb8 	bl	800e1ac <USBD_LL_StallEP>
}
 800d83c:	bf00      	nop
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d850:	2300      	movs	r3, #0
 800d852:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d032      	beq.n	800d8c0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f000 f834 	bl	800d8c8 <USBD_GetLen>
 800d860:	4603      	mov	r3, r0
 800d862:	3301      	adds	r3, #1
 800d864:	b29b      	uxth	r3, r3
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	b29a      	uxth	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d86e:	7dfb      	ldrb	r3, [r7, #23]
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	75fa      	strb	r2, [r7, #23]
 800d874:	461a      	mov	r2, r3
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	4413      	add	r3, r2
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	7812      	ldrb	r2, [r2, #0]
 800d87e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d880:	7dfb      	ldrb	r3, [r7, #23]
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	75fa      	strb	r2, [r7, #23]
 800d886:	461a      	mov	r2, r3
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	4413      	add	r3, r2
 800d88c:	2203      	movs	r2, #3
 800d88e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d890:	e012      	b.n	800d8b8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	1c5a      	adds	r2, r3, #1
 800d896:	60fa      	str	r2, [r7, #12]
 800d898:	7dfa      	ldrb	r2, [r7, #23]
 800d89a:	1c51      	adds	r1, r2, #1
 800d89c:	75f9      	strb	r1, [r7, #23]
 800d89e:	4611      	mov	r1, r2
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	440a      	add	r2, r1
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d8a8:	7dfb      	ldrb	r3, [r7, #23]
 800d8aa:	1c5a      	adds	r2, r3, #1
 800d8ac:	75fa      	strb	r2, [r7, #23]
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d1e8      	bne.n	800d892 <USBD_GetString+0x4e>
    }
  }
}
 800d8c0:	bf00      	nop
 800d8c2:	3718      	adds	r7, #24
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800d8d4:	e005      	b.n	800d8e2 <USBD_GetLen+0x1a>
  {
    len++;
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	73fb      	strb	r3, [r7, #15]
    buf++;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1f5      	bne.n	800d8d6 <USBD_GetLen+0xe>
  }

  return len;
 800d8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3714      	adds	r7, #20
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bc80      	pop	{r7}
 800d8f4:	4770      	bx	lr

0800d8f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b084      	sub	sp, #16
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	60b9      	str	r1, [r7, #8]
 800d900:	4613      	mov	r3, r2
 800d902:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2202      	movs	r2, #2
 800d908:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d90c:	88fa      	ldrh	r2, [r7, #6]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d912:	88fa      	ldrh	r2, [r7, #6]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d918:	88fb      	ldrh	r3, [r7, #6]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	2100      	movs	r1, #0
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f000 fccd 	bl	800e2be <USBD_LL_Transmit>

  return USBD_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b084      	sub	sp, #16
 800d932:	af00      	add	r7, sp, #0
 800d934:	60f8      	str	r0, [r7, #12]
 800d936:	60b9      	str	r1, [r7, #8]
 800d938:	4613      	mov	r3, r2
 800d93a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d93c:	88fb      	ldrh	r3, [r7, #6]
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	2100      	movs	r1, #0
 800d942:	68f8      	ldr	r0, [r7, #12]
 800d944:	f000 fcbb 	bl	800e2be <USBD_LL_Transmit>

  return USBD_OK;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b084      	sub	sp, #16
 800d956:	af00      	add	r7, sp, #0
 800d958:	60f8      	str	r0, [r7, #12]
 800d95a:	60b9      	str	r1, [r7, #8]
 800d95c:	4613      	mov	r3, r2
 800d95e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2203      	movs	r2, #3
 800d964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d968:	88fa      	ldrh	r2, [r7, #6]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d970:	88fa      	ldrh	r2, [r7, #6]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d978:	88fb      	ldrh	r3, [r7, #6]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	2100      	movs	r1, #0
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 fcc0 	bl	800e304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b084      	sub	sp, #16
 800d992:	af00      	add	r7, sp, #0
 800d994:	60f8      	str	r0, [r7, #12]
 800d996:	60b9      	str	r1, [r7, #8]
 800d998:	4613      	mov	r3, r2
 800d99a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d99c:	88fb      	ldrh	r3, [r7, #6]
 800d99e:	68ba      	ldr	r2, [r7, #8]
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f000 fcae 	bl	800e304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3710      	adds	r7, #16
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b082      	sub	sp, #8
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2204      	movs	r2, #4
 800d9be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 fc78 	bl	800e2be <USBD_LL_Transmit>

  return USBD_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2205      	movs	r2, #5
 800d9e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 fc88 	bl	800e304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3708      	adds	r7, #8
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
	...

0800da00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	4613      	mov	r3, r2
 800da0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da0e:	2301      	movs	r3, #1
 800da10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800da16:	4b1e      	ldr	r3, [pc, #120]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da18:	7a5b      	ldrb	r3, [r3, #9]
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d831      	bhi.n	800da84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da20:	4b1b      	ldr	r3, [pc, #108]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da22:	7a5b      	ldrb	r3, [r3, #9]
 800da24:	b2db      	uxtb	r3, r3
 800da26:	461a      	mov	r2, r3
 800da28:	4b19      	ldr	r3, [pc, #100]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da2a:	2100      	movs	r1, #0
 800da2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800da2e:	4b18      	ldr	r3, [pc, #96]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da30:	7a5b      	ldrb	r3, [r3, #9]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	4a16      	ldr	r2, [pc, #88]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800da3e:	4b14      	ldr	r3, [pc, #80]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da40:	7a5b      	ldrb	r3, [r3, #9]
 800da42:	b2db      	uxtb	r3, r3
 800da44:	461a      	mov	r2, r3
 800da46:	4b12      	ldr	r3, [pc, #72]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da48:	4413      	add	r3, r2
 800da4a:	79fa      	ldrb	r2, [r7, #7]
 800da4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da50:	7a5b      	ldrb	r3, [r3, #9]
 800da52:	b2db      	uxtb	r3, r3
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	b2d1      	uxtb	r1, r2
 800da58:	4a0d      	ldr	r2, [pc, #52]	; (800da90 <FATFS_LinkDriverEx+0x90>)
 800da5a:	7251      	strb	r1, [r2, #9]
 800da5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da5e:	7dbb      	ldrb	r3, [r7, #22]
 800da60:	3330      	adds	r3, #48	; 0x30
 800da62:	b2da      	uxtb	r2, r3
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	3301      	adds	r3, #1
 800da6c:	223a      	movs	r2, #58	; 0x3a
 800da6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	3302      	adds	r3, #2
 800da74:	222f      	movs	r2, #47	; 0x2f
 800da76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	3303      	adds	r3, #3
 800da7c:	2200      	movs	r2, #0
 800da7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da80:	2300      	movs	r3, #0
 800da82:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800da84:	7dfb      	ldrb	r3, [r7, #23]
}
 800da86:	4618      	mov	r0, r3
 800da88:	371c      	adds	r7, #28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bc80      	pop	{r7}
 800da8e:	4770      	bx	lr
 800da90:	20000680 	.word	0x20000680

0800da94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800da9e:	2200      	movs	r2, #0
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7ff ffac 	bl	800da00 <FATFS_LinkDriverEx>
 800daa8:	4603      	mov	r3, r0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
	...

0800dab4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dab8:	2200      	movs	r2, #0
 800daba:	4912      	ldr	r1, [pc, #72]	; (800db04 <MX_USB_DEVICE_Init+0x50>)
 800dabc:	4812      	ldr	r0, [pc, #72]	; (800db08 <MX_USB_DEVICE_Init+0x54>)
 800dabe:	f7fe ff04 	bl	800c8ca <USBD_Init>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dac8:	f7f4 fe6a 	bl	80027a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dacc:	490f      	ldr	r1, [pc, #60]	; (800db0c <MX_USB_DEVICE_Init+0x58>)
 800dace:	480e      	ldr	r0, [pc, #56]	; (800db08 <MX_USB_DEVICE_Init+0x54>)
 800dad0:	f7fe ff26 	bl	800c920 <USBD_RegisterClass>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dada:	f7f4 fe61 	bl	80027a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dade:	490c      	ldr	r1, [pc, #48]	; (800db10 <MX_USB_DEVICE_Init+0x5c>)
 800dae0:	4809      	ldr	r0, [pc, #36]	; (800db08 <MX_USB_DEVICE_Init+0x54>)
 800dae2:	f7fe fe57 	bl	800c794 <USBD_CDC_RegisterInterface>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800daec:	f7f4 fe58 	bl	80027a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800daf0:	4805      	ldr	r0, [pc, #20]	; (800db08 <MX_USB_DEVICE_Init+0x54>)
 800daf2:	f7fe ff2e 	bl	800c952 <USBD_Start>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d001      	beq.n	800db00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dafc:	f7f4 fe50 	bl	80027a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db00:	bf00      	nop
 800db02:	bd80      	pop	{r7, pc}
 800db04:	20000140 	.word	0x20000140
 800db08:	20000900 	.word	0x20000900
 800db0c:	2000002c 	.word	0x2000002c
 800db10:	20000130 	.word	0x20000130

0800db14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db18:	2200      	movs	r2, #0
 800db1a:	4905      	ldr	r1, [pc, #20]	; (800db30 <CDC_Init_FS+0x1c>)
 800db1c:	4805      	ldr	r0, [pc, #20]	; (800db34 <CDC_Init_FS+0x20>)
 800db1e:	f7fe fe4f 	bl	800c7c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db22:	4905      	ldr	r1, [pc, #20]	; (800db38 <CDC_Init_FS+0x24>)
 800db24:	4803      	ldr	r0, [pc, #12]	; (800db34 <CDC_Init_FS+0x20>)
 800db26:	f7fe fe64 	bl	800c7f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	200016f4 	.word	0x200016f4
 800db34:	20000900 	.word	0x20000900
 800db38:	2000130c 	.word	0x2000130c

0800db3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db3c:	b480      	push	{r7}
 800db3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800db40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db42:	4618      	mov	r0, r3
 800db44:	46bd      	mov	sp, r7
 800db46:	bc80      	pop	{r7}
 800db48:	4770      	bx	lr
	...

0800db4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	4603      	mov	r3, r0
 800db54:	6039      	str	r1, [r7, #0]
 800db56:	71fb      	strb	r3, [r7, #7]
 800db58:	4613      	mov	r3, r2
 800db5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800db5c:	79fb      	ldrb	r3, [r7, #7]
 800db5e:	2b23      	cmp	r3, #35	; 0x23
 800db60:	d84a      	bhi.n	800dbf8 <CDC_Control_FS+0xac>
 800db62:	a201      	add	r2, pc, #4	; (adr r2, 800db68 <CDC_Control_FS+0x1c>)
 800db64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db68:	0800dbf9 	.word	0x0800dbf9
 800db6c:	0800dbf9 	.word	0x0800dbf9
 800db70:	0800dbf9 	.word	0x0800dbf9
 800db74:	0800dbf9 	.word	0x0800dbf9
 800db78:	0800dbf9 	.word	0x0800dbf9
 800db7c:	0800dbf9 	.word	0x0800dbf9
 800db80:	0800dbf9 	.word	0x0800dbf9
 800db84:	0800dbf9 	.word	0x0800dbf9
 800db88:	0800dbf9 	.word	0x0800dbf9
 800db8c:	0800dbf9 	.word	0x0800dbf9
 800db90:	0800dbf9 	.word	0x0800dbf9
 800db94:	0800dbf9 	.word	0x0800dbf9
 800db98:	0800dbf9 	.word	0x0800dbf9
 800db9c:	0800dbf9 	.word	0x0800dbf9
 800dba0:	0800dbf9 	.word	0x0800dbf9
 800dba4:	0800dbf9 	.word	0x0800dbf9
 800dba8:	0800dbf9 	.word	0x0800dbf9
 800dbac:	0800dbf9 	.word	0x0800dbf9
 800dbb0:	0800dbf9 	.word	0x0800dbf9
 800dbb4:	0800dbf9 	.word	0x0800dbf9
 800dbb8:	0800dbf9 	.word	0x0800dbf9
 800dbbc:	0800dbf9 	.word	0x0800dbf9
 800dbc0:	0800dbf9 	.word	0x0800dbf9
 800dbc4:	0800dbf9 	.word	0x0800dbf9
 800dbc8:	0800dbf9 	.word	0x0800dbf9
 800dbcc:	0800dbf9 	.word	0x0800dbf9
 800dbd0:	0800dbf9 	.word	0x0800dbf9
 800dbd4:	0800dbf9 	.word	0x0800dbf9
 800dbd8:	0800dbf9 	.word	0x0800dbf9
 800dbdc:	0800dbf9 	.word	0x0800dbf9
 800dbe0:	0800dbf9 	.word	0x0800dbf9
 800dbe4:	0800dbf9 	.word	0x0800dbf9
 800dbe8:	0800dbf9 	.word	0x0800dbf9
 800dbec:	0800dbf9 	.word	0x0800dbf9
 800dbf0:	0800dbf9 	.word	0x0800dbf9
 800dbf4:	0800dbf9 	.word	0x0800dbf9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dbf8:	bf00      	nop
  }

  return (USBD_OK);
 800dbfa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	370c      	adds	r7, #12
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bc80      	pop	{r7}
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop

0800dc08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	480b      	ldr	r0, [pc, #44]	; (800dc44 <CDC_Receive_FS+0x3c>)
 800dc16:	f7fe fdec 	bl	800c7f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc1a:	480a      	ldr	r0, [pc, #40]	; (800dc44 <CDC_Receive_FS+0x3c>)
 800dc1c:	f7fe fe2b 	bl	800c876 <USBD_CDC_ReceivePacket>
  strncpy(strRX,(char*)Buf,*Len);
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	461a      	mov	r2, r3
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	4807      	ldr	r0, [pc, #28]	; (800dc48 <CDC_Receive_FS+0x40>)
 800dc2a:	f000 fc47 	bl	800e4bc <strncpy>
  strRX[*Len]=0;
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a05      	ldr	r2, [pc, #20]	; (800dc48 <CDC_Receive_FS+0x40>)
 800dc34:	2100      	movs	r1, #0
 800dc36:	54d1      	strb	r1, [r2, r3]
  return (USBD_OK);
 800dc38:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	20000900 	.word	0x20000900
 800dc48:	20000cbc 	.word	0x20000cbc

0800dc4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dc5c:	4b0d      	ldr	r3, [pc, #52]	; (800dc94 <CDC_Transmit_FS+0x48>)
 800dc5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d001      	beq.n	800dc72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e00b      	b.n	800dc8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dc72:	887b      	ldrh	r3, [r7, #2]
 800dc74:	461a      	mov	r2, r3
 800dc76:	6879      	ldr	r1, [r7, #4]
 800dc78:	4806      	ldr	r0, [pc, #24]	; (800dc94 <CDC_Transmit_FS+0x48>)
 800dc7a:	f7fe fda1 	bl	800c7c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dc7e:	4805      	ldr	r0, [pc, #20]	; (800dc94 <CDC_Transmit_FS+0x48>)
 800dc80:	f7fe fdca 	bl	800c818 <USBD_CDC_TransmitPacket>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	20000900 	.word	0x20000900

0800dc98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	4603      	mov	r3, r0
 800dca0:	6039      	str	r1, [r7, #0]
 800dca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	2212      	movs	r2, #18
 800dca8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dcaa:	4b03      	ldr	r3, [pc, #12]	; (800dcb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bc80      	pop	{r7}
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	2000015c 	.word	0x2000015c

0800dcbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	6039      	str	r1, [r7, #0]
 800dcc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	2204      	movs	r2, #4
 800dccc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dcce:	4b03      	ldr	r3, [pc, #12]	; (800dcdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bc80      	pop	{r7}
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	20000170 	.word	0x20000170

0800dce0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	4603      	mov	r3, r0
 800dce8:	6039      	str	r1, [r7, #0]
 800dcea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dcec:	79fb      	ldrb	r3, [r7, #7]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d105      	bne.n	800dcfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	4907      	ldr	r1, [pc, #28]	; (800dd14 <USBD_FS_ProductStrDescriptor+0x34>)
 800dcf6:	4808      	ldr	r0, [pc, #32]	; (800dd18 <USBD_FS_ProductStrDescriptor+0x38>)
 800dcf8:	f7ff fda4 	bl	800d844 <USBD_GetString>
 800dcfc:	e004      	b.n	800dd08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	4904      	ldr	r1, [pc, #16]	; (800dd14 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd02:	4805      	ldr	r0, [pc, #20]	; (800dd18 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd04:	f7ff fd9e 	bl	800d844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd08:	4b02      	ldr	r3, [pc, #8]	; (800dd14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	20001adc 	.word	0x20001adc
 800dd18:	0800edd8 	.word	0x0800edd8

0800dd1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	4904      	ldr	r1, [pc, #16]	; (800dd3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd2c:	4804      	ldr	r0, [pc, #16]	; (800dd40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd2e:	f7ff fd89 	bl	800d844 <USBD_GetString>
  return USBD_StrDesc;
 800dd32:	4b02      	ldr	r3, [pc, #8]	; (800dd3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	20001adc 	.word	0x20001adc
 800dd40:	0800edec 	.word	0x0800edec

0800dd44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	6039      	str	r1, [r7, #0]
 800dd4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	221a      	movs	r2, #26
 800dd54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd56:	f000 f843 	bl	800dde0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd5a:	4b02      	ldr	r3, [pc, #8]	; (800dd64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	20000174 	.word	0x20000174

0800dd68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	4603      	mov	r3, r0
 800dd70:	6039      	str	r1, [r7, #0]
 800dd72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd7a:	683a      	ldr	r2, [r7, #0]
 800dd7c:	4907      	ldr	r1, [pc, #28]	; (800dd9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd7e:	4808      	ldr	r0, [pc, #32]	; (800dda0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd80:	f7ff fd60 	bl	800d844 <USBD_GetString>
 800dd84:	e004      	b.n	800dd90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd86:	683a      	ldr	r2, [r7, #0]
 800dd88:	4904      	ldr	r1, [pc, #16]	; (800dd9c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd8a:	4805      	ldr	r0, [pc, #20]	; (800dda0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd8c:	f7ff fd5a 	bl	800d844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd90:	4b02      	ldr	r3, [pc, #8]	; (800dd9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20001adc 	.word	0x20001adc
 800dda0:	0800ee00 	.word	0x0800ee00

0800dda4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddb0:	79fb      	ldrb	r3, [r7, #7]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d105      	bne.n	800ddc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddb6:	683a      	ldr	r2, [r7, #0]
 800ddb8:	4907      	ldr	r1, [pc, #28]	; (800ddd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddba:	4808      	ldr	r0, [pc, #32]	; (800dddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddbc:	f7ff fd42 	bl	800d844 <USBD_GetString>
 800ddc0:	e004      	b.n	800ddcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	4904      	ldr	r1, [pc, #16]	; (800ddd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ddc6:	4805      	ldr	r0, [pc, #20]	; (800dddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ddc8:	f7ff fd3c 	bl	800d844 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddcc:	4b02      	ldr	r3, [pc, #8]	; (800ddd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20001adc 	.word	0x20001adc
 800dddc:	0800ee0c 	.word	0x0800ee0c

0800dde0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dde6:	4b0f      	ldr	r3, [pc, #60]	; (800de24 <Get_SerialNum+0x44>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ddec:	4b0e      	ldr	r3, [pc, #56]	; (800de28 <Get_SerialNum+0x48>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ddf2:	4b0e      	ldr	r3, [pc, #56]	; (800de2c <Get_SerialNum+0x4c>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d009      	beq.n	800de1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de06:	2208      	movs	r2, #8
 800de08:	4909      	ldr	r1, [pc, #36]	; (800de30 <Get_SerialNum+0x50>)
 800de0a:	68f8      	ldr	r0, [r7, #12]
 800de0c:	f000 f814 	bl	800de38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de10:	2204      	movs	r2, #4
 800de12:	4908      	ldr	r1, [pc, #32]	; (800de34 <Get_SerialNum+0x54>)
 800de14:	68b8      	ldr	r0, [r7, #8]
 800de16:	f000 f80f 	bl	800de38 <IntToUnicode>
  }
}
 800de1a:	bf00      	nop
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	1ffff7e8 	.word	0x1ffff7e8
 800de28:	1ffff7ec 	.word	0x1ffff7ec
 800de2c:	1ffff7f0 	.word	0x1ffff7f0
 800de30:	20000176 	.word	0x20000176
 800de34:	20000186 	.word	0x20000186

0800de38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de38:	b480      	push	{r7}
 800de3a:	b087      	sub	sp, #28
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	4613      	mov	r3, r2
 800de44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de4a:	2300      	movs	r3, #0
 800de4c:	75fb      	strb	r3, [r7, #23]
 800de4e:	e027      	b.n	800dea0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	0f1b      	lsrs	r3, r3, #28
 800de54:	2b09      	cmp	r3, #9
 800de56:	d80b      	bhi.n	800de70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	0f1b      	lsrs	r3, r3, #28
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	7dfb      	ldrb	r3, [r7, #23]
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	4619      	mov	r1, r3
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	440b      	add	r3, r1
 800de68:	3230      	adds	r2, #48	; 0x30
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	e00a      	b.n	800de86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	0f1b      	lsrs	r3, r3, #28
 800de74:	b2da      	uxtb	r2, r3
 800de76:	7dfb      	ldrb	r3, [r7, #23]
 800de78:	005b      	lsls	r3, r3, #1
 800de7a:	4619      	mov	r1, r3
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	440b      	add	r3, r1
 800de80:	3237      	adds	r2, #55	; 0x37
 800de82:	b2d2      	uxtb	r2, r2
 800de84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	011b      	lsls	r3, r3, #4
 800de8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	005b      	lsls	r3, r3, #1
 800de90:	3301      	adds	r3, #1
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	4413      	add	r3, r2
 800de96:	2200      	movs	r2, #0
 800de98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
 800de9c:	3301      	adds	r3, #1
 800de9e:	75fb      	strb	r3, [r7, #23]
 800dea0:	7dfa      	ldrb	r2, [r7, #23]
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d3d3      	bcc.n	800de50 <IntToUnicode+0x18>
  }
}
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	371c      	adds	r7, #28
 800deae:	46bd      	mov	sp, r7
 800deb0:	bc80      	pop	{r7}
 800deb2:	4770      	bx	lr

0800deb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a0d      	ldr	r2, [pc, #52]	; (800def8 <HAL_PCD_MspInit+0x44>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d113      	bne.n	800deee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dec6:	4b0d      	ldr	r3, [pc, #52]	; (800defc <HAL_PCD_MspInit+0x48>)
 800dec8:	69db      	ldr	r3, [r3, #28]
 800deca:	4a0c      	ldr	r2, [pc, #48]	; (800defc <HAL_PCD_MspInit+0x48>)
 800decc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ded0:	61d3      	str	r3, [r2, #28]
 800ded2:	4b0a      	ldr	r3, [pc, #40]	; (800defc <HAL_PCD_MspInit+0x48>)
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800dede:	2200      	movs	r2, #0
 800dee0:	2100      	movs	r1, #0
 800dee2:	2014      	movs	r0, #20
 800dee4:	f7f5 ffc1 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800dee8:	2014      	movs	r0, #20
 800deea:	f7f5 ffda 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800deee:	bf00      	nop
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	40005c00 	.word	0x40005c00
 800defc:	40021000 	.word	0x40021000

0800df00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800df14:	4619      	mov	r1, r3
 800df16:	4610      	mov	r0, r2
 800df18:	f7fe fd63 	bl	800c9e2 <USBD_LL_SetupStage>
}
 800df1c:	bf00      	nop
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	460b      	mov	r3, r1
 800df2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800df36:	78fa      	ldrb	r2, [r7, #3]
 800df38:	6879      	ldr	r1, [r7, #4]
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	440b      	add	r3, r1
 800df44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	78fb      	ldrb	r3, [r7, #3]
 800df4c:	4619      	mov	r1, r3
 800df4e:	f7fe fd95 	bl	800ca7c <USBD_LL_DataOutStage>
}
 800df52:	bf00      	nop
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b082      	sub	sp, #8
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	460b      	mov	r3, r1
 800df64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800df6c:	78fa      	ldrb	r2, [r7, #3]
 800df6e:	6879      	ldr	r1, [r7, #4]
 800df70:	4613      	mov	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	00db      	lsls	r3, r3, #3
 800df78:	440b      	add	r3, r1
 800df7a:	333c      	adds	r3, #60	; 0x3c
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	78fb      	ldrb	r3, [r7, #3]
 800df80:	4619      	mov	r1, r3
 800df82:	f7fe fdec 	bl	800cb5e <USBD_LL_DataInStage>
}
 800df86:	bf00      	nop
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b082      	sub	sp, #8
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fe fefc 	bl	800cd9a <USBD_LL_SOF>
}
 800dfa2:	bf00      	nop
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d001      	beq.n	800dfc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dfbe:	f7f4 fbef 	bl	80027a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800dfc8:	7bfa      	ldrb	r2, [r7, #15]
 800dfca:	4611      	mov	r1, r2
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fe feac 	bl	800cd2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fe fe65 	bl	800cca8 <USBD_LL_Reset>
}
 800dfde:	bf00      	nop
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
	...

0800dfe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fe fea6 	bl	800cd48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d005      	beq.n	800e010 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e004:	4b04      	ldr	r3, [pc, #16]	; (800e018 <HAL_PCD_SuspendCallback+0x30>)
 800e006:	691b      	ldr	r3, [r3, #16]
 800e008:	4a03      	ldr	r2, [pc, #12]	; (800e018 <HAL_PCD_SuspendCallback+0x30>)
 800e00a:	f043 0306 	orr.w	r3, r3, #6
 800e00e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e010:	bf00      	nop
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	e000ed00 	.word	0xe000ed00

0800e01c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fe fea0 	bl	800cd70 <USBD_LL_Resume>
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e040:	4a28      	ldr	r2, [pc, #160]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4a26      	ldr	r2, [pc, #152]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e04c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e050:	4b24      	ldr	r3, [pc, #144]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e052:	4a25      	ldr	r2, [pc, #148]	; (800e0e8 <USBD_LL_Init+0xb0>)
 800e054:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e056:	4b23      	ldr	r3, [pc, #140]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e058:	2208      	movs	r2, #8
 800e05a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e05c:	4b21      	ldr	r3, [pc, #132]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e05e:	2202      	movs	r2, #2
 800e060:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e062:	4b20      	ldr	r3, [pc, #128]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e064:	2200      	movs	r2, #0
 800e066:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e068:	4b1e      	ldr	r3, [pc, #120]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e06e:	4b1d      	ldr	r3, [pc, #116]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e070:	2200      	movs	r2, #0
 800e072:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e074:	481b      	ldr	r0, [pc, #108]	; (800e0e4 <USBD_LL_Init+0xac>)
 800e076:	f7f8 f945 	bl	8006304 <HAL_PCD_Init>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d001      	beq.n	800e084 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e080:	f7f4 fb8e 	bl	80027a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e08a:	2318      	movs	r3, #24
 800e08c:	2200      	movs	r2, #0
 800e08e:	2100      	movs	r1, #0
 800e090:	f7f9 fdbb 	bl	8007c0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e09a:	2358      	movs	r3, #88	; 0x58
 800e09c:	2200      	movs	r2, #0
 800e09e:	2180      	movs	r1, #128	; 0x80
 800e0a0:	f7f9 fdb3 	bl	8007c0a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e0aa:	23c0      	movs	r3, #192	; 0xc0
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	2181      	movs	r1, #129	; 0x81
 800e0b0:	f7f9 fdab 	bl	8007c0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e0ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	f7f9 fda2 	bl	8007c0a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2182      	movs	r1, #130	; 0x82
 800e0d4:	f7f9 fd99 	bl	8007c0a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	20001cdc 	.word	0x20001cdc
 800e0e8:	40005c00 	.word	0x40005c00

0800e0ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e102:	4618      	mov	r0, r3
 800e104:	f7f8 fa09 	bl	800651a <HAL_PCD_Start>
 800e108:	4603      	mov	r3, r0
 800e10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 f94e 	bl	800e3b0 <USBD_Get_USB_Status>
 800e114:	4603      	mov	r3, r0
 800e116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e118:	7bbb      	ldrb	r3, [r7, #14]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b084      	sub	sp, #16
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	4608      	mov	r0, r1
 800e12c:	4611      	mov	r1, r2
 800e12e:	461a      	mov	r2, r3
 800e130:	4603      	mov	r3, r0
 800e132:	70fb      	strb	r3, [r7, #3]
 800e134:	460b      	mov	r3, r1
 800e136:	70bb      	strb	r3, [r7, #2]
 800e138:	4613      	mov	r3, r2
 800e13a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e14a:	78bb      	ldrb	r3, [r7, #2]
 800e14c:	883a      	ldrh	r2, [r7, #0]
 800e14e:	78f9      	ldrb	r1, [r7, #3]
 800e150:	f7f8 fb83 	bl	800685a <HAL_PCD_EP_Open>
 800e154:	4603      	mov	r3, r0
 800e156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e158:	7bfb      	ldrb	r3, [r7, #15]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f000 f928 	bl	800e3b0 <USBD_Get_USB_Status>
 800e160:	4603      	mov	r3, r0
 800e162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e164:	7bbb      	ldrb	r3, [r7, #14]
}
 800e166:	4618      	mov	r0, r3
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b084      	sub	sp, #16
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	460b      	mov	r3, r1
 800e178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e188:	78fa      	ldrb	r2, [r7, #3]
 800e18a:	4611      	mov	r1, r2
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7f8 fbca 	bl	8006926 <HAL_PCD_EP_Close>
 800e192:	4603      	mov	r3, r0
 800e194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e196:	7bfb      	ldrb	r3, [r7, #15]
 800e198:	4618      	mov	r0, r3
 800e19a:	f000 f909 	bl	800e3b0 <USBD_Get_USB_Status>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1c6:	78fa      	ldrb	r2, [r7, #3]
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7f8 fc8a 	bl	8006ae4 <HAL_PCD_EP_SetStall>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f000 f8ea 	bl	800e3b0 <USBD_Get_USB_Status>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b084      	sub	sp, #16
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e204:	78fa      	ldrb	r2, [r7, #3]
 800e206:	4611      	mov	r1, r2
 800e208:	4618      	mov	r0, r3
 800e20a:	f7f8 fccb 	bl	8006ba4 <HAL_PCD_EP_ClrStall>
 800e20e:	4603      	mov	r3, r0
 800e210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e212:	7bfb      	ldrb	r3, [r7, #15]
 800e214:	4618      	mov	r0, r3
 800e216:	f000 f8cb 	bl	800e3b0 <USBD_Get_USB_Status>
 800e21a:	4603      	mov	r3, r0
 800e21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	460b      	mov	r3, r1
 800e232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e23a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e23c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e240:	2b00      	cmp	r3, #0
 800e242:	da0c      	bge.n	800e25e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e244:	78fb      	ldrb	r3, [r7, #3]
 800e246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e24a:	68f9      	ldr	r1, [r7, #12]
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	4613      	mov	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	4413      	add	r3, r2
 800e254:	00db      	lsls	r3, r3, #3
 800e256:	440b      	add	r3, r1
 800e258:	3302      	adds	r3, #2
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	e00b      	b.n	800e276 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e25e:	78fb      	ldrb	r3, [r7, #3]
 800e260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e264:	68f9      	ldr	r1, [r7, #12]
 800e266:	4613      	mov	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	440b      	add	r3, r1
 800e270:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800e274:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e276:	4618      	mov	r0, r3
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bc80      	pop	{r7}
 800e27e:	4770      	bx	lr

0800e280 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b084      	sub	sp, #16
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	460b      	mov	r3, r1
 800e28a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e29a:	78fa      	ldrb	r2, [r7, #3]
 800e29c:	4611      	mov	r1, r2
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f8 fab6 	bl	8006810 <HAL_PCD_SetAddress>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f000 f880 	bl	800e3b0 <USBD_Get_USB_Status>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b086      	sub	sp, #24
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	60f8      	str	r0, [r7, #12]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	72fb      	strb	r3, [r7, #11]
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e2e0:	893b      	ldrh	r3, [r7, #8]
 800e2e2:	7af9      	ldrb	r1, [r7, #11]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	f7f8 fbba 	bl	8006a5e <HAL_PCD_EP_Transmit>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ee:	7dfb      	ldrb	r3, [r7, #23]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f000 f85d 	bl	800e3b0 <USBD_Get_USB_Status>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3718      	adds	r7, #24
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	607a      	str	r2, [r7, #4]
 800e30e:	461a      	mov	r2, r3
 800e310:	460b      	mov	r3, r1
 800e312:	72fb      	strb	r3, [r7, #11]
 800e314:	4613      	mov	r3, r2
 800e316:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e318:	2300      	movs	r3, #0
 800e31a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e326:	893b      	ldrh	r3, [r7, #8]
 800e328:	7af9      	ldrb	r1, [r7, #11]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	f7f8 fb43 	bl	80069b6 <HAL_PCD_EP_Receive>
 800e330:	4603      	mov	r3, r0
 800e332:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e334:	7dfb      	ldrb	r3, [r7, #23]
 800e336:	4618      	mov	r0, r3
 800e338:	f000 f83a 	bl	800e3b0 <USBD_Get_USB_Status>
 800e33c:	4603      	mov	r3, r0
 800e33e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e340:	7dbb      	ldrb	r3, [r7, #22]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3718      	adds	r7, #24
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b082      	sub	sp, #8
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	460b      	mov	r3, r1
 800e354:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e35c:	78fa      	ldrb	r2, [r7, #3]
 800e35e:	4611      	mov	r1, r2
 800e360:	4618      	mov	r0, r3
 800e362:	f7f8 fb65 	bl	8006a30 <HAL_PCD_EP_GetRxCount>
 800e366:	4603      	mov	r3, r0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e378:	4b02      	ldr	r3, [pc, #8]	; (800e384 <USBD_static_malloc+0x14>)
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	370c      	adds	r7, #12
 800e37e:	46bd      	mov	sp, r7
 800e380:	bc80      	pop	{r7}
 800e382:	4770      	bx	lr
 800e384:	2000068c 	.word	0x2000068c

0800e388 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]

}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	bc80      	pop	{r7}
 800e398:	4770      	bx	lr

0800e39a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e39a:	b480      	push	{r7}
 800e39c:	b083      	sub	sp, #12
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e3a6:	bf00      	nop
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bc80      	pop	{r7}
 800e3ae:	4770      	bx	lr

0800e3b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3be:	79fb      	ldrb	r3, [r7, #7]
 800e3c0:	2b03      	cmp	r3, #3
 800e3c2:	d817      	bhi.n	800e3f4 <USBD_Get_USB_Status+0x44>
 800e3c4:	a201      	add	r2, pc, #4	; (adr r2, 800e3cc <USBD_Get_USB_Status+0x1c>)
 800e3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ca:	bf00      	nop
 800e3cc:	0800e3dd 	.word	0x0800e3dd
 800e3d0:	0800e3e3 	.word	0x0800e3e3
 800e3d4:	0800e3e9 	.word	0x0800e3e9
 800e3d8:	0800e3ef 	.word	0x0800e3ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	73fb      	strb	r3, [r7, #15]
    break;
 800e3e0:	e00b      	b.n	800e3fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3e2:	2302      	movs	r3, #2
 800e3e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e3e6:	e008      	b.n	800e3fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ec:	e005      	b.n	800e3fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3ee:	2302      	movs	r3, #2
 800e3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e3f2:	e002      	b.n	800e3fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e3f4:	2302      	movs	r3, #2
 800e3f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e3f8:	bf00      	nop
  }
  return usb_status;
 800e3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	bc80      	pop	{r7}
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop

0800e408 <__errno>:
 800e408:	4b01      	ldr	r3, [pc, #4]	; (800e410 <__errno+0x8>)
 800e40a:	6818      	ldr	r0, [r3, #0]
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	20000190 	.word	0x20000190

0800e414 <__libc_init_array>:
 800e414:	b570      	push	{r4, r5, r6, lr}
 800e416:	2600      	movs	r6, #0
 800e418:	4d0c      	ldr	r5, [pc, #48]	; (800e44c <__libc_init_array+0x38>)
 800e41a:	4c0d      	ldr	r4, [pc, #52]	; (800e450 <__libc_init_array+0x3c>)
 800e41c:	1b64      	subs	r4, r4, r5
 800e41e:	10a4      	asrs	r4, r4, #2
 800e420:	42a6      	cmp	r6, r4
 800e422:	d109      	bne.n	800e438 <__libc_init_array+0x24>
 800e424:	f000 fc76 	bl	800ed14 <_init>
 800e428:	2600      	movs	r6, #0
 800e42a:	4d0a      	ldr	r5, [pc, #40]	; (800e454 <__libc_init_array+0x40>)
 800e42c:	4c0a      	ldr	r4, [pc, #40]	; (800e458 <__libc_init_array+0x44>)
 800e42e:	1b64      	subs	r4, r4, r5
 800e430:	10a4      	asrs	r4, r4, #2
 800e432:	42a6      	cmp	r6, r4
 800e434:	d105      	bne.n	800e442 <__libc_init_array+0x2e>
 800e436:	bd70      	pop	{r4, r5, r6, pc}
 800e438:	f855 3b04 	ldr.w	r3, [r5], #4
 800e43c:	4798      	blx	r3
 800e43e:	3601      	adds	r6, #1
 800e440:	e7ee      	b.n	800e420 <__libc_init_array+0xc>
 800e442:	f855 3b04 	ldr.w	r3, [r5], #4
 800e446:	4798      	blx	r3
 800e448:	3601      	adds	r6, #1
 800e44a:	e7f2      	b.n	800e432 <__libc_init_array+0x1e>
 800e44c:	0800ee70 	.word	0x0800ee70
 800e450:	0800ee70 	.word	0x0800ee70
 800e454:	0800ee70 	.word	0x0800ee70
 800e458:	0800ee74 	.word	0x0800ee74

0800e45c <memset>:
 800e45c:	4603      	mov	r3, r0
 800e45e:	4402      	add	r2, r0
 800e460:	4293      	cmp	r3, r2
 800e462:	d100      	bne.n	800e466 <memset+0xa>
 800e464:	4770      	bx	lr
 800e466:	f803 1b01 	strb.w	r1, [r3], #1
 800e46a:	e7f9      	b.n	800e460 <memset+0x4>

0800e46c <siprintf>:
 800e46c:	b40e      	push	{r1, r2, r3}
 800e46e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e472:	b500      	push	{lr}
 800e474:	b09c      	sub	sp, #112	; 0x70
 800e476:	ab1d      	add	r3, sp, #116	; 0x74
 800e478:	9002      	str	r0, [sp, #8]
 800e47a:	9006      	str	r0, [sp, #24]
 800e47c:	9107      	str	r1, [sp, #28]
 800e47e:	9104      	str	r1, [sp, #16]
 800e480:	4808      	ldr	r0, [pc, #32]	; (800e4a4 <siprintf+0x38>)
 800e482:	4909      	ldr	r1, [pc, #36]	; (800e4a8 <siprintf+0x3c>)
 800e484:	f853 2b04 	ldr.w	r2, [r3], #4
 800e488:	9105      	str	r1, [sp, #20]
 800e48a:	6800      	ldr	r0, [r0, #0]
 800e48c:	a902      	add	r1, sp, #8
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	f000 f882 	bl	800e598 <_svfiprintf_r>
 800e494:	2200      	movs	r2, #0
 800e496:	9b02      	ldr	r3, [sp, #8]
 800e498:	701a      	strb	r2, [r3, #0]
 800e49a:	b01c      	add	sp, #112	; 0x70
 800e49c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4a0:	b003      	add	sp, #12
 800e4a2:	4770      	bx	lr
 800e4a4:	20000190 	.word	0x20000190
 800e4a8:	ffff0208 	.word	0xffff0208

0800e4ac <strcpy>:
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4b2:	f803 2b01 	strb.w	r2, [r3], #1
 800e4b6:	2a00      	cmp	r2, #0
 800e4b8:	d1f9      	bne.n	800e4ae <strcpy+0x2>
 800e4ba:	4770      	bx	lr

0800e4bc <strncpy>:
 800e4bc:	4603      	mov	r3, r0
 800e4be:	b510      	push	{r4, lr}
 800e4c0:	3901      	subs	r1, #1
 800e4c2:	b132      	cbz	r2, 800e4d2 <strncpy+0x16>
 800e4c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e4c8:	3a01      	subs	r2, #1
 800e4ca:	f803 4b01 	strb.w	r4, [r3], #1
 800e4ce:	2c00      	cmp	r4, #0
 800e4d0:	d1f7      	bne.n	800e4c2 <strncpy+0x6>
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	441a      	add	r2, r3
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d100      	bne.n	800e4dc <strncpy+0x20>
 800e4da:	bd10      	pop	{r4, pc}
 800e4dc:	f803 1b01 	strb.w	r1, [r3], #1
 800e4e0:	e7f9      	b.n	800e4d6 <strncpy+0x1a>

0800e4e2 <__ssputs_r>:
 800e4e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e6:	688e      	ldr	r6, [r1, #8]
 800e4e8:	4682      	mov	sl, r0
 800e4ea:	429e      	cmp	r6, r3
 800e4ec:	460c      	mov	r4, r1
 800e4ee:	4690      	mov	r8, r2
 800e4f0:	461f      	mov	r7, r3
 800e4f2:	d838      	bhi.n	800e566 <__ssputs_r+0x84>
 800e4f4:	898a      	ldrh	r2, [r1, #12]
 800e4f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e4fa:	d032      	beq.n	800e562 <__ssputs_r+0x80>
 800e4fc:	6825      	ldr	r5, [r4, #0]
 800e4fe:	6909      	ldr	r1, [r1, #16]
 800e500:	3301      	adds	r3, #1
 800e502:	eba5 0901 	sub.w	r9, r5, r1
 800e506:	6965      	ldr	r5, [r4, #20]
 800e508:	444b      	add	r3, r9
 800e50a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e50e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e512:	106d      	asrs	r5, r5, #1
 800e514:	429d      	cmp	r5, r3
 800e516:	bf38      	it	cc
 800e518:	461d      	movcc	r5, r3
 800e51a:	0553      	lsls	r3, r2, #21
 800e51c:	d531      	bpl.n	800e582 <__ssputs_r+0xa0>
 800e51e:	4629      	mov	r1, r5
 800e520:	f000 fb52 	bl	800ebc8 <_malloc_r>
 800e524:	4606      	mov	r6, r0
 800e526:	b950      	cbnz	r0, 800e53e <__ssputs_r+0x5c>
 800e528:	230c      	movs	r3, #12
 800e52a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e52e:	f8ca 3000 	str.w	r3, [sl]
 800e532:	89a3      	ldrh	r3, [r4, #12]
 800e534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e538:	81a3      	strh	r3, [r4, #12]
 800e53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e53e:	464a      	mov	r2, r9
 800e540:	6921      	ldr	r1, [r4, #16]
 800e542:	f000 facd 	bl	800eae0 <memcpy>
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e550:	81a3      	strh	r3, [r4, #12]
 800e552:	6126      	str	r6, [r4, #16]
 800e554:	444e      	add	r6, r9
 800e556:	6026      	str	r6, [r4, #0]
 800e558:	463e      	mov	r6, r7
 800e55a:	6165      	str	r5, [r4, #20]
 800e55c:	eba5 0509 	sub.w	r5, r5, r9
 800e560:	60a5      	str	r5, [r4, #8]
 800e562:	42be      	cmp	r6, r7
 800e564:	d900      	bls.n	800e568 <__ssputs_r+0x86>
 800e566:	463e      	mov	r6, r7
 800e568:	4632      	mov	r2, r6
 800e56a:	4641      	mov	r1, r8
 800e56c:	6820      	ldr	r0, [r4, #0]
 800e56e:	f000 fac5 	bl	800eafc <memmove>
 800e572:	68a3      	ldr	r3, [r4, #8]
 800e574:	6822      	ldr	r2, [r4, #0]
 800e576:	1b9b      	subs	r3, r3, r6
 800e578:	4432      	add	r2, r6
 800e57a:	2000      	movs	r0, #0
 800e57c:	60a3      	str	r3, [r4, #8]
 800e57e:	6022      	str	r2, [r4, #0]
 800e580:	e7db      	b.n	800e53a <__ssputs_r+0x58>
 800e582:	462a      	mov	r2, r5
 800e584:	f000 fb7a 	bl	800ec7c <_realloc_r>
 800e588:	4606      	mov	r6, r0
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d1e1      	bne.n	800e552 <__ssputs_r+0x70>
 800e58e:	4650      	mov	r0, sl
 800e590:	6921      	ldr	r1, [r4, #16]
 800e592:	f000 facd 	bl	800eb30 <_free_r>
 800e596:	e7c7      	b.n	800e528 <__ssputs_r+0x46>

0800e598 <_svfiprintf_r>:
 800e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59c:	4698      	mov	r8, r3
 800e59e:	898b      	ldrh	r3, [r1, #12]
 800e5a0:	4607      	mov	r7, r0
 800e5a2:	061b      	lsls	r3, r3, #24
 800e5a4:	460d      	mov	r5, r1
 800e5a6:	4614      	mov	r4, r2
 800e5a8:	b09d      	sub	sp, #116	; 0x74
 800e5aa:	d50e      	bpl.n	800e5ca <_svfiprintf_r+0x32>
 800e5ac:	690b      	ldr	r3, [r1, #16]
 800e5ae:	b963      	cbnz	r3, 800e5ca <_svfiprintf_r+0x32>
 800e5b0:	2140      	movs	r1, #64	; 0x40
 800e5b2:	f000 fb09 	bl	800ebc8 <_malloc_r>
 800e5b6:	6028      	str	r0, [r5, #0]
 800e5b8:	6128      	str	r0, [r5, #16]
 800e5ba:	b920      	cbnz	r0, 800e5c6 <_svfiprintf_r+0x2e>
 800e5bc:	230c      	movs	r3, #12
 800e5be:	603b      	str	r3, [r7, #0]
 800e5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5c4:	e0d1      	b.n	800e76a <_svfiprintf_r+0x1d2>
 800e5c6:	2340      	movs	r3, #64	; 0x40
 800e5c8:	616b      	str	r3, [r5, #20]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ce:	2320      	movs	r3, #32
 800e5d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5d4:	2330      	movs	r3, #48	; 0x30
 800e5d6:	f04f 0901 	mov.w	r9, #1
 800e5da:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e784 <_svfiprintf_r+0x1ec>
 800e5e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5e6:	4623      	mov	r3, r4
 800e5e8:	469a      	mov	sl, r3
 800e5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5ee:	b10a      	cbz	r2, 800e5f4 <_svfiprintf_r+0x5c>
 800e5f0:	2a25      	cmp	r2, #37	; 0x25
 800e5f2:	d1f9      	bne.n	800e5e8 <_svfiprintf_r+0x50>
 800e5f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e5f8:	d00b      	beq.n	800e612 <_svfiprintf_r+0x7a>
 800e5fa:	465b      	mov	r3, fp
 800e5fc:	4622      	mov	r2, r4
 800e5fe:	4629      	mov	r1, r5
 800e600:	4638      	mov	r0, r7
 800e602:	f7ff ff6e 	bl	800e4e2 <__ssputs_r>
 800e606:	3001      	adds	r0, #1
 800e608:	f000 80aa 	beq.w	800e760 <_svfiprintf_r+0x1c8>
 800e60c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e60e:	445a      	add	r2, fp
 800e610:	9209      	str	r2, [sp, #36]	; 0x24
 800e612:	f89a 3000 	ldrb.w	r3, [sl]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f000 80a2 	beq.w	800e760 <_svfiprintf_r+0x1c8>
 800e61c:	2300      	movs	r3, #0
 800e61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e626:	f10a 0a01 	add.w	sl, sl, #1
 800e62a:	9304      	str	r3, [sp, #16]
 800e62c:	9307      	str	r3, [sp, #28]
 800e62e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e632:	931a      	str	r3, [sp, #104]	; 0x68
 800e634:	4654      	mov	r4, sl
 800e636:	2205      	movs	r2, #5
 800e638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e63c:	4851      	ldr	r0, [pc, #324]	; (800e784 <_svfiprintf_r+0x1ec>)
 800e63e:	f000 fa41 	bl	800eac4 <memchr>
 800e642:	9a04      	ldr	r2, [sp, #16]
 800e644:	b9d8      	cbnz	r0, 800e67e <_svfiprintf_r+0xe6>
 800e646:	06d0      	lsls	r0, r2, #27
 800e648:	bf44      	itt	mi
 800e64a:	2320      	movmi	r3, #32
 800e64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e650:	0711      	lsls	r1, r2, #28
 800e652:	bf44      	itt	mi
 800e654:	232b      	movmi	r3, #43	; 0x2b
 800e656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e65a:	f89a 3000 	ldrb.w	r3, [sl]
 800e65e:	2b2a      	cmp	r3, #42	; 0x2a
 800e660:	d015      	beq.n	800e68e <_svfiprintf_r+0xf6>
 800e662:	4654      	mov	r4, sl
 800e664:	2000      	movs	r0, #0
 800e666:	f04f 0c0a 	mov.w	ip, #10
 800e66a:	9a07      	ldr	r2, [sp, #28]
 800e66c:	4621      	mov	r1, r4
 800e66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e672:	3b30      	subs	r3, #48	; 0x30
 800e674:	2b09      	cmp	r3, #9
 800e676:	d94e      	bls.n	800e716 <_svfiprintf_r+0x17e>
 800e678:	b1b0      	cbz	r0, 800e6a8 <_svfiprintf_r+0x110>
 800e67a:	9207      	str	r2, [sp, #28]
 800e67c:	e014      	b.n	800e6a8 <_svfiprintf_r+0x110>
 800e67e:	eba0 0308 	sub.w	r3, r0, r8
 800e682:	fa09 f303 	lsl.w	r3, r9, r3
 800e686:	4313      	orrs	r3, r2
 800e688:	46a2      	mov	sl, r4
 800e68a:	9304      	str	r3, [sp, #16]
 800e68c:	e7d2      	b.n	800e634 <_svfiprintf_r+0x9c>
 800e68e:	9b03      	ldr	r3, [sp, #12]
 800e690:	1d19      	adds	r1, r3, #4
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	9103      	str	r1, [sp, #12]
 800e696:	2b00      	cmp	r3, #0
 800e698:	bfbb      	ittet	lt
 800e69a:	425b      	neglt	r3, r3
 800e69c:	f042 0202 	orrlt.w	r2, r2, #2
 800e6a0:	9307      	strge	r3, [sp, #28]
 800e6a2:	9307      	strlt	r3, [sp, #28]
 800e6a4:	bfb8      	it	lt
 800e6a6:	9204      	strlt	r2, [sp, #16]
 800e6a8:	7823      	ldrb	r3, [r4, #0]
 800e6aa:	2b2e      	cmp	r3, #46	; 0x2e
 800e6ac:	d10c      	bne.n	800e6c8 <_svfiprintf_r+0x130>
 800e6ae:	7863      	ldrb	r3, [r4, #1]
 800e6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800e6b2:	d135      	bne.n	800e720 <_svfiprintf_r+0x188>
 800e6b4:	9b03      	ldr	r3, [sp, #12]
 800e6b6:	3402      	adds	r4, #2
 800e6b8:	1d1a      	adds	r2, r3, #4
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	9203      	str	r2, [sp, #12]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	bfb8      	it	lt
 800e6c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e6c6:	9305      	str	r3, [sp, #20]
 800e6c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e794 <_svfiprintf_r+0x1fc>
 800e6cc:	2203      	movs	r2, #3
 800e6ce:	4650      	mov	r0, sl
 800e6d0:	7821      	ldrb	r1, [r4, #0]
 800e6d2:	f000 f9f7 	bl	800eac4 <memchr>
 800e6d6:	b140      	cbz	r0, 800e6ea <_svfiprintf_r+0x152>
 800e6d8:	2340      	movs	r3, #64	; 0x40
 800e6da:	eba0 000a 	sub.w	r0, r0, sl
 800e6de:	fa03 f000 	lsl.w	r0, r3, r0
 800e6e2:	9b04      	ldr	r3, [sp, #16]
 800e6e4:	3401      	adds	r4, #1
 800e6e6:	4303      	orrs	r3, r0
 800e6e8:	9304      	str	r3, [sp, #16]
 800e6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ee:	2206      	movs	r2, #6
 800e6f0:	4825      	ldr	r0, [pc, #148]	; (800e788 <_svfiprintf_r+0x1f0>)
 800e6f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6f6:	f000 f9e5 	bl	800eac4 <memchr>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	d038      	beq.n	800e770 <_svfiprintf_r+0x1d8>
 800e6fe:	4b23      	ldr	r3, [pc, #140]	; (800e78c <_svfiprintf_r+0x1f4>)
 800e700:	bb1b      	cbnz	r3, 800e74a <_svfiprintf_r+0x1b2>
 800e702:	9b03      	ldr	r3, [sp, #12]
 800e704:	3307      	adds	r3, #7
 800e706:	f023 0307 	bic.w	r3, r3, #7
 800e70a:	3308      	adds	r3, #8
 800e70c:	9303      	str	r3, [sp, #12]
 800e70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e710:	4433      	add	r3, r6
 800e712:	9309      	str	r3, [sp, #36]	; 0x24
 800e714:	e767      	b.n	800e5e6 <_svfiprintf_r+0x4e>
 800e716:	460c      	mov	r4, r1
 800e718:	2001      	movs	r0, #1
 800e71a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e71e:	e7a5      	b.n	800e66c <_svfiprintf_r+0xd4>
 800e720:	2300      	movs	r3, #0
 800e722:	f04f 0c0a 	mov.w	ip, #10
 800e726:	4619      	mov	r1, r3
 800e728:	3401      	adds	r4, #1
 800e72a:	9305      	str	r3, [sp, #20]
 800e72c:	4620      	mov	r0, r4
 800e72e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e732:	3a30      	subs	r2, #48	; 0x30
 800e734:	2a09      	cmp	r2, #9
 800e736:	d903      	bls.n	800e740 <_svfiprintf_r+0x1a8>
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d0c5      	beq.n	800e6c8 <_svfiprintf_r+0x130>
 800e73c:	9105      	str	r1, [sp, #20]
 800e73e:	e7c3      	b.n	800e6c8 <_svfiprintf_r+0x130>
 800e740:	4604      	mov	r4, r0
 800e742:	2301      	movs	r3, #1
 800e744:	fb0c 2101 	mla	r1, ip, r1, r2
 800e748:	e7f0      	b.n	800e72c <_svfiprintf_r+0x194>
 800e74a:	ab03      	add	r3, sp, #12
 800e74c:	9300      	str	r3, [sp, #0]
 800e74e:	462a      	mov	r2, r5
 800e750:	4638      	mov	r0, r7
 800e752:	4b0f      	ldr	r3, [pc, #60]	; (800e790 <_svfiprintf_r+0x1f8>)
 800e754:	a904      	add	r1, sp, #16
 800e756:	f3af 8000 	nop.w
 800e75a:	1c42      	adds	r2, r0, #1
 800e75c:	4606      	mov	r6, r0
 800e75e:	d1d6      	bne.n	800e70e <_svfiprintf_r+0x176>
 800e760:	89ab      	ldrh	r3, [r5, #12]
 800e762:	065b      	lsls	r3, r3, #25
 800e764:	f53f af2c 	bmi.w	800e5c0 <_svfiprintf_r+0x28>
 800e768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e76a:	b01d      	add	sp, #116	; 0x74
 800e76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e770:	ab03      	add	r3, sp, #12
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	462a      	mov	r2, r5
 800e776:	4638      	mov	r0, r7
 800e778:	4b05      	ldr	r3, [pc, #20]	; (800e790 <_svfiprintf_r+0x1f8>)
 800e77a:	a904      	add	r1, sp, #16
 800e77c:	f000 f87c 	bl	800e878 <_printf_i>
 800e780:	e7eb      	b.n	800e75a <_svfiprintf_r+0x1c2>
 800e782:	bf00      	nop
 800e784:	0800ee34 	.word	0x0800ee34
 800e788:	0800ee3e 	.word	0x0800ee3e
 800e78c:	00000000 	.word	0x00000000
 800e790:	0800e4e3 	.word	0x0800e4e3
 800e794:	0800ee3a 	.word	0x0800ee3a

0800e798 <_printf_common>:
 800e798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e79c:	4616      	mov	r6, r2
 800e79e:	4699      	mov	r9, r3
 800e7a0:	688a      	ldr	r2, [r1, #8]
 800e7a2:	690b      	ldr	r3, [r1, #16]
 800e7a4:	4607      	mov	r7, r0
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	bfb8      	it	lt
 800e7aa:	4613      	movlt	r3, r2
 800e7ac:	6033      	str	r3, [r6, #0]
 800e7ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e7b2:	460c      	mov	r4, r1
 800e7b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e7b8:	b10a      	cbz	r2, 800e7be <_printf_common+0x26>
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	6033      	str	r3, [r6, #0]
 800e7be:	6823      	ldr	r3, [r4, #0]
 800e7c0:	0699      	lsls	r1, r3, #26
 800e7c2:	bf42      	ittt	mi
 800e7c4:	6833      	ldrmi	r3, [r6, #0]
 800e7c6:	3302      	addmi	r3, #2
 800e7c8:	6033      	strmi	r3, [r6, #0]
 800e7ca:	6825      	ldr	r5, [r4, #0]
 800e7cc:	f015 0506 	ands.w	r5, r5, #6
 800e7d0:	d106      	bne.n	800e7e0 <_printf_common+0x48>
 800e7d2:	f104 0a19 	add.w	sl, r4, #25
 800e7d6:	68e3      	ldr	r3, [r4, #12]
 800e7d8:	6832      	ldr	r2, [r6, #0]
 800e7da:	1a9b      	subs	r3, r3, r2
 800e7dc:	42ab      	cmp	r3, r5
 800e7de:	dc28      	bgt.n	800e832 <_printf_common+0x9a>
 800e7e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e7e4:	1e13      	subs	r3, r2, #0
 800e7e6:	6822      	ldr	r2, [r4, #0]
 800e7e8:	bf18      	it	ne
 800e7ea:	2301      	movne	r3, #1
 800e7ec:	0692      	lsls	r2, r2, #26
 800e7ee:	d42d      	bmi.n	800e84c <_printf_common+0xb4>
 800e7f0:	4649      	mov	r1, r9
 800e7f2:	4638      	mov	r0, r7
 800e7f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7f8:	47c0      	blx	r8
 800e7fa:	3001      	adds	r0, #1
 800e7fc:	d020      	beq.n	800e840 <_printf_common+0xa8>
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	68e5      	ldr	r5, [r4, #12]
 800e802:	f003 0306 	and.w	r3, r3, #6
 800e806:	2b04      	cmp	r3, #4
 800e808:	bf18      	it	ne
 800e80a:	2500      	movne	r5, #0
 800e80c:	6832      	ldr	r2, [r6, #0]
 800e80e:	f04f 0600 	mov.w	r6, #0
 800e812:	68a3      	ldr	r3, [r4, #8]
 800e814:	bf08      	it	eq
 800e816:	1aad      	subeq	r5, r5, r2
 800e818:	6922      	ldr	r2, [r4, #16]
 800e81a:	bf08      	it	eq
 800e81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e820:	4293      	cmp	r3, r2
 800e822:	bfc4      	itt	gt
 800e824:	1a9b      	subgt	r3, r3, r2
 800e826:	18ed      	addgt	r5, r5, r3
 800e828:	341a      	adds	r4, #26
 800e82a:	42b5      	cmp	r5, r6
 800e82c:	d11a      	bne.n	800e864 <_printf_common+0xcc>
 800e82e:	2000      	movs	r0, #0
 800e830:	e008      	b.n	800e844 <_printf_common+0xac>
 800e832:	2301      	movs	r3, #1
 800e834:	4652      	mov	r2, sl
 800e836:	4649      	mov	r1, r9
 800e838:	4638      	mov	r0, r7
 800e83a:	47c0      	blx	r8
 800e83c:	3001      	adds	r0, #1
 800e83e:	d103      	bne.n	800e848 <_printf_common+0xb0>
 800e840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e848:	3501      	adds	r5, #1
 800e84a:	e7c4      	b.n	800e7d6 <_printf_common+0x3e>
 800e84c:	2030      	movs	r0, #48	; 0x30
 800e84e:	18e1      	adds	r1, r4, r3
 800e850:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e854:	1c5a      	adds	r2, r3, #1
 800e856:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e85a:	4422      	add	r2, r4
 800e85c:	3302      	adds	r3, #2
 800e85e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e862:	e7c5      	b.n	800e7f0 <_printf_common+0x58>
 800e864:	2301      	movs	r3, #1
 800e866:	4622      	mov	r2, r4
 800e868:	4649      	mov	r1, r9
 800e86a:	4638      	mov	r0, r7
 800e86c:	47c0      	blx	r8
 800e86e:	3001      	adds	r0, #1
 800e870:	d0e6      	beq.n	800e840 <_printf_common+0xa8>
 800e872:	3601      	adds	r6, #1
 800e874:	e7d9      	b.n	800e82a <_printf_common+0x92>
	...

0800e878 <_printf_i>:
 800e878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e87c:	460c      	mov	r4, r1
 800e87e:	7e27      	ldrb	r7, [r4, #24]
 800e880:	4691      	mov	r9, r2
 800e882:	2f78      	cmp	r7, #120	; 0x78
 800e884:	4680      	mov	r8, r0
 800e886:	469a      	mov	sl, r3
 800e888:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e88a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e88e:	d807      	bhi.n	800e8a0 <_printf_i+0x28>
 800e890:	2f62      	cmp	r7, #98	; 0x62
 800e892:	d80a      	bhi.n	800e8aa <_printf_i+0x32>
 800e894:	2f00      	cmp	r7, #0
 800e896:	f000 80d9 	beq.w	800ea4c <_printf_i+0x1d4>
 800e89a:	2f58      	cmp	r7, #88	; 0x58
 800e89c:	f000 80a4 	beq.w	800e9e8 <_printf_i+0x170>
 800e8a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e8a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e8a8:	e03a      	b.n	800e920 <_printf_i+0xa8>
 800e8aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e8ae:	2b15      	cmp	r3, #21
 800e8b0:	d8f6      	bhi.n	800e8a0 <_printf_i+0x28>
 800e8b2:	a001      	add	r0, pc, #4	; (adr r0, 800e8b8 <_printf_i+0x40>)
 800e8b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e8b8:	0800e911 	.word	0x0800e911
 800e8bc:	0800e925 	.word	0x0800e925
 800e8c0:	0800e8a1 	.word	0x0800e8a1
 800e8c4:	0800e8a1 	.word	0x0800e8a1
 800e8c8:	0800e8a1 	.word	0x0800e8a1
 800e8cc:	0800e8a1 	.word	0x0800e8a1
 800e8d0:	0800e925 	.word	0x0800e925
 800e8d4:	0800e8a1 	.word	0x0800e8a1
 800e8d8:	0800e8a1 	.word	0x0800e8a1
 800e8dc:	0800e8a1 	.word	0x0800e8a1
 800e8e0:	0800e8a1 	.word	0x0800e8a1
 800e8e4:	0800ea33 	.word	0x0800ea33
 800e8e8:	0800e955 	.word	0x0800e955
 800e8ec:	0800ea15 	.word	0x0800ea15
 800e8f0:	0800e8a1 	.word	0x0800e8a1
 800e8f4:	0800e8a1 	.word	0x0800e8a1
 800e8f8:	0800ea55 	.word	0x0800ea55
 800e8fc:	0800e8a1 	.word	0x0800e8a1
 800e900:	0800e955 	.word	0x0800e955
 800e904:	0800e8a1 	.word	0x0800e8a1
 800e908:	0800e8a1 	.word	0x0800e8a1
 800e90c:	0800ea1d 	.word	0x0800ea1d
 800e910:	680b      	ldr	r3, [r1, #0]
 800e912:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e916:	1d1a      	adds	r2, r3, #4
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	600a      	str	r2, [r1, #0]
 800e91c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e920:	2301      	movs	r3, #1
 800e922:	e0a4      	b.n	800ea6e <_printf_i+0x1f6>
 800e924:	6825      	ldr	r5, [r4, #0]
 800e926:	6808      	ldr	r0, [r1, #0]
 800e928:	062e      	lsls	r6, r5, #24
 800e92a:	f100 0304 	add.w	r3, r0, #4
 800e92e:	d50a      	bpl.n	800e946 <_printf_i+0xce>
 800e930:	6805      	ldr	r5, [r0, #0]
 800e932:	600b      	str	r3, [r1, #0]
 800e934:	2d00      	cmp	r5, #0
 800e936:	da03      	bge.n	800e940 <_printf_i+0xc8>
 800e938:	232d      	movs	r3, #45	; 0x2d
 800e93a:	426d      	negs	r5, r5
 800e93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e940:	230a      	movs	r3, #10
 800e942:	485e      	ldr	r0, [pc, #376]	; (800eabc <_printf_i+0x244>)
 800e944:	e019      	b.n	800e97a <_printf_i+0x102>
 800e946:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e94a:	6805      	ldr	r5, [r0, #0]
 800e94c:	600b      	str	r3, [r1, #0]
 800e94e:	bf18      	it	ne
 800e950:	b22d      	sxthne	r5, r5
 800e952:	e7ef      	b.n	800e934 <_printf_i+0xbc>
 800e954:	680b      	ldr	r3, [r1, #0]
 800e956:	6825      	ldr	r5, [r4, #0]
 800e958:	1d18      	adds	r0, r3, #4
 800e95a:	6008      	str	r0, [r1, #0]
 800e95c:	0628      	lsls	r0, r5, #24
 800e95e:	d501      	bpl.n	800e964 <_printf_i+0xec>
 800e960:	681d      	ldr	r5, [r3, #0]
 800e962:	e002      	b.n	800e96a <_printf_i+0xf2>
 800e964:	0669      	lsls	r1, r5, #25
 800e966:	d5fb      	bpl.n	800e960 <_printf_i+0xe8>
 800e968:	881d      	ldrh	r5, [r3, #0]
 800e96a:	2f6f      	cmp	r7, #111	; 0x6f
 800e96c:	bf0c      	ite	eq
 800e96e:	2308      	moveq	r3, #8
 800e970:	230a      	movne	r3, #10
 800e972:	4852      	ldr	r0, [pc, #328]	; (800eabc <_printf_i+0x244>)
 800e974:	2100      	movs	r1, #0
 800e976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e97a:	6866      	ldr	r6, [r4, #4]
 800e97c:	2e00      	cmp	r6, #0
 800e97e:	bfa8      	it	ge
 800e980:	6821      	ldrge	r1, [r4, #0]
 800e982:	60a6      	str	r6, [r4, #8]
 800e984:	bfa4      	itt	ge
 800e986:	f021 0104 	bicge.w	r1, r1, #4
 800e98a:	6021      	strge	r1, [r4, #0]
 800e98c:	b90d      	cbnz	r5, 800e992 <_printf_i+0x11a>
 800e98e:	2e00      	cmp	r6, #0
 800e990:	d04d      	beq.n	800ea2e <_printf_i+0x1b6>
 800e992:	4616      	mov	r6, r2
 800e994:	fbb5 f1f3 	udiv	r1, r5, r3
 800e998:	fb03 5711 	mls	r7, r3, r1, r5
 800e99c:	5dc7      	ldrb	r7, [r0, r7]
 800e99e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9a2:	462f      	mov	r7, r5
 800e9a4:	42bb      	cmp	r3, r7
 800e9a6:	460d      	mov	r5, r1
 800e9a8:	d9f4      	bls.n	800e994 <_printf_i+0x11c>
 800e9aa:	2b08      	cmp	r3, #8
 800e9ac:	d10b      	bne.n	800e9c6 <_printf_i+0x14e>
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	07df      	lsls	r7, r3, #31
 800e9b2:	d508      	bpl.n	800e9c6 <_printf_i+0x14e>
 800e9b4:	6923      	ldr	r3, [r4, #16]
 800e9b6:	6861      	ldr	r1, [r4, #4]
 800e9b8:	4299      	cmp	r1, r3
 800e9ba:	bfde      	ittt	le
 800e9bc:	2330      	movle	r3, #48	; 0x30
 800e9be:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e9c2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800e9c6:	1b92      	subs	r2, r2, r6
 800e9c8:	6122      	str	r2, [r4, #16]
 800e9ca:	464b      	mov	r3, r9
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	f8cd a000 	str.w	sl, [sp]
 800e9d4:	aa03      	add	r2, sp, #12
 800e9d6:	f7ff fedf 	bl	800e798 <_printf_common>
 800e9da:	3001      	adds	r0, #1
 800e9dc:	d14c      	bne.n	800ea78 <_printf_i+0x200>
 800e9de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9e2:	b004      	add	sp, #16
 800e9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e8:	4834      	ldr	r0, [pc, #208]	; (800eabc <_printf_i+0x244>)
 800e9ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e9ee:	680e      	ldr	r6, [r1, #0]
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800e9f6:	061f      	lsls	r7, r3, #24
 800e9f8:	600e      	str	r6, [r1, #0]
 800e9fa:	d514      	bpl.n	800ea26 <_printf_i+0x1ae>
 800e9fc:	07d9      	lsls	r1, r3, #31
 800e9fe:	bf44      	itt	mi
 800ea00:	f043 0320 	orrmi.w	r3, r3, #32
 800ea04:	6023      	strmi	r3, [r4, #0]
 800ea06:	b91d      	cbnz	r5, 800ea10 <_printf_i+0x198>
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	f023 0320 	bic.w	r3, r3, #32
 800ea0e:	6023      	str	r3, [r4, #0]
 800ea10:	2310      	movs	r3, #16
 800ea12:	e7af      	b.n	800e974 <_printf_i+0xfc>
 800ea14:	6823      	ldr	r3, [r4, #0]
 800ea16:	f043 0320 	orr.w	r3, r3, #32
 800ea1a:	6023      	str	r3, [r4, #0]
 800ea1c:	2378      	movs	r3, #120	; 0x78
 800ea1e:	4828      	ldr	r0, [pc, #160]	; (800eac0 <_printf_i+0x248>)
 800ea20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea24:	e7e3      	b.n	800e9ee <_printf_i+0x176>
 800ea26:	065e      	lsls	r6, r3, #25
 800ea28:	bf48      	it	mi
 800ea2a:	b2ad      	uxthmi	r5, r5
 800ea2c:	e7e6      	b.n	800e9fc <_printf_i+0x184>
 800ea2e:	4616      	mov	r6, r2
 800ea30:	e7bb      	b.n	800e9aa <_printf_i+0x132>
 800ea32:	680b      	ldr	r3, [r1, #0]
 800ea34:	6826      	ldr	r6, [r4, #0]
 800ea36:	1d1d      	adds	r5, r3, #4
 800ea38:	6960      	ldr	r0, [r4, #20]
 800ea3a:	600d      	str	r5, [r1, #0]
 800ea3c:	0635      	lsls	r5, r6, #24
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	d501      	bpl.n	800ea46 <_printf_i+0x1ce>
 800ea42:	6018      	str	r0, [r3, #0]
 800ea44:	e002      	b.n	800ea4c <_printf_i+0x1d4>
 800ea46:	0671      	lsls	r1, r6, #25
 800ea48:	d5fb      	bpl.n	800ea42 <_printf_i+0x1ca>
 800ea4a:	8018      	strh	r0, [r3, #0]
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	4616      	mov	r6, r2
 800ea50:	6123      	str	r3, [r4, #16]
 800ea52:	e7ba      	b.n	800e9ca <_printf_i+0x152>
 800ea54:	680b      	ldr	r3, [r1, #0]
 800ea56:	1d1a      	adds	r2, r3, #4
 800ea58:	600a      	str	r2, [r1, #0]
 800ea5a:	681e      	ldr	r6, [r3, #0]
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	4630      	mov	r0, r6
 800ea60:	6862      	ldr	r2, [r4, #4]
 800ea62:	f000 f82f 	bl	800eac4 <memchr>
 800ea66:	b108      	cbz	r0, 800ea6c <_printf_i+0x1f4>
 800ea68:	1b80      	subs	r0, r0, r6
 800ea6a:	6060      	str	r0, [r4, #4]
 800ea6c:	6863      	ldr	r3, [r4, #4]
 800ea6e:	6123      	str	r3, [r4, #16]
 800ea70:	2300      	movs	r3, #0
 800ea72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea76:	e7a8      	b.n	800e9ca <_printf_i+0x152>
 800ea78:	4632      	mov	r2, r6
 800ea7a:	4649      	mov	r1, r9
 800ea7c:	4640      	mov	r0, r8
 800ea7e:	6923      	ldr	r3, [r4, #16]
 800ea80:	47d0      	blx	sl
 800ea82:	3001      	adds	r0, #1
 800ea84:	d0ab      	beq.n	800e9de <_printf_i+0x166>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	079b      	lsls	r3, r3, #30
 800ea8a:	d413      	bmi.n	800eab4 <_printf_i+0x23c>
 800ea8c:	68e0      	ldr	r0, [r4, #12]
 800ea8e:	9b03      	ldr	r3, [sp, #12]
 800ea90:	4298      	cmp	r0, r3
 800ea92:	bfb8      	it	lt
 800ea94:	4618      	movlt	r0, r3
 800ea96:	e7a4      	b.n	800e9e2 <_printf_i+0x16a>
 800ea98:	2301      	movs	r3, #1
 800ea9a:	4632      	mov	r2, r6
 800ea9c:	4649      	mov	r1, r9
 800ea9e:	4640      	mov	r0, r8
 800eaa0:	47d0      	blx	sl
 800eaa2:	3001      	adds	r0, #1
 800eaa4:	d09b      	beq.n	800e9de <_printf_i+0x166>
 800eaa6:	3501      	adds	r5, #1
 800eaa8:	68e3      	ldr	r3, [r4, #12]
 800eaaa:	9903      	ldr	r1, [sp, #12]
 800eaac:	1a5b      	subs	r3, r3, r1
 800eaae:	42ab      	cmp	r3, r5
 800eab0:	dcf2      	bgt.n	800ea98 <_printf_i+0x220>
 800eab2:	e7eb      	b.n	800ea8c <_printf_i+0x214>
 800eab4:	2500      	movs	r5, #0
 800eab6:	f104 0619 	add.w	r6, r4, #25
 800eaba:	e7f5      	b.n	800eaa8 <_printf_i+0x230>
 800eabc:	0800ee45 	.word	0x0800ee45
 800eac0:	0800ee56 	.word	0x0800ee56

0800eac4 <memchr>:
 800eac4:	4603      	mov	r3, r0
 800eac6:	b510      	push	{r4, lr}
 800eac8:	b2c9      	uxtb	r1, r1
 800eaca:	4402      	add	r2, r0
 800eacc:	4293      	cmp	r3, r2
 800eace:	4618      	mov	r0, r3
 800ead0:	d101      	bne.n	800ead6 <memchr+0x12>
 800ead2:	2000      	movs	r0, #0
 800ead4:	e003      	b.n	800eade <memchr+0x1a>
 800ead6:	7804      	ldrb	r4, [r0, #0]
 800ead8:	3301      	adds	r3, #1
 800eada:	428c      	cmp	r4, r1
 800eadc:	d1f6      	bne.n	800eacc <memchr+0x8>
 800eade:	bd10      	pop	{r4, pc}

0800eae0 <memcpy>:
 800eae0:	440a      	add	r2, r1
 800eae2:	4291      	cmp	r1, r2
 800eae4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eae8:	d100      	bne.n	800eaec <memcpy+0xc>
 800eaea:	4770      	bx	lr
 800eaec:	b510      	push	{r4, lr}
 800eaee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaf2:	4291      	cmp	r1, r2
 800eaf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaf8:	d1f9      	bne.n	800eaee <memcpy+0xe>
 800eafa:	bd10      	pop	{r4, pc}

0800eafc <memmove>:
 800eafc:	4288      	cmp	r0, r1
 800eafe:	b510      	push	{r4, lr}
 800eb00:	eb01 0402 	add.w	r4, r1, r2
 800eb04:	d902      	bls.n	800eb0c <memmove+0x10>
 800eb06:	4284      	cmp	r4, r0
 800eb08:	4623      	mov	r3, r4
 800eb0a:	d807      	bhi.n	800eb1c <memmove+0x20>
 800eb0c:	1e43      	subs	r3, r0, #1
 800eb0e:	42a1      	cmp	r1, r4
 800eb10:	d008      	beq.n	800eb24 <memmove+0x28>
 800eb12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb1a:	e7f8      	b.n	800eb0e <memmove+0x12>
 800eb1c:	4601      	mov	r1, r0
 800eb1e:	4402      	add	r2, r0
 800eb20:	428a      	cmp	r2, r1
 800eb22:	d100      	bne.n	800eb26 <memmove+0x2a>
 800eb24:	bd10      	pop	{r4, pc}
 800eb26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb2e:	e7f7      	b.n	800eb20 <memmove+0x24>

0800eb30 <_free_r>:
 800eb30:	b538      	push	{r3, r4, r5, lr}
 800eb32:	4605      	mov	r5, r0
 800eb34:	2900      	cmp	r1, #0
 800eb36:	d043      	beq.n	800ebc0 <_free_r+0x90>
 800eb38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb3c:	1f0c      	subs	r4, r1, #4
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	bfb8      	it	lt
 800eb42:	18e4      	addlt	r4, r4, r3
 800eb44:	f000 f8d0 	bl	800ece8 <__malloc_lock>
 800eb48:	4a1e      	ldr	r2, [pc, #120]	; (800ebc4 <_free_r+0x94>)
 800eb4a:	6813      	ldr	r3, [r2, #0]
 800eb4c:	4610      	mov	r0, r2
 800eb4e:	b933      	cbnz	r3, 800eb5e <_free_r+0x2e>
 800eb50:	6063      	str	r3, [r4, #4]
 800eb52:	6014      	str	r4, [r2, #0]
 800eb54:	4628      	mov	r0, r5
 800eb56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb5a:	f000 b8cb 	b.w	800ecf4 <__malloc_unlock>
 800eb5e:	42a3      	cmp	r3, r4
 800eb60:	d90a      	bls.n	800eb78 <_free_r+0x48>
 800eb62:	6821      	ldr	r1, [r4, #0]
 800eb64:	1862      	adds	r2, r4, r1
 800eb66:	4293      	cmp	r3, r2
 800eb68:	bf01      	itttt	eq
 800eb6a:	681a      	ldreq	r2, [r3, #0]
 800eb6c:	685b      	ldreq	r3, [r3, #4]
 800eb6e:	1852      	addeq	r2, r2, r1
 800eb70:	6022      	streq	r2, [r4, #0]
 800eb72:	6063      	str	r3, [r4, #4]
 800eb74:	6004      	str	r4, [r0, #0]
 800eb76:	e7ed      	b.n	800eb54 <_free_r+0x24>
 800eb78:	461a      	mov	r2, r3
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	b10b      	cbz	r3, 800eb82 <_free_r+0x52>
 800eb7e:	42a3      	cmp	r3, r4
 800eb80:	d9fa      	bls.n	800eb78 <_free_r+0x48>
 800eb82:	6811      	ldr	r1, [r2, #0]
 800eb84:	1850      	adds	r0, r2, r1
 800eb86:	42a0      	cmp	r0, r4
 800eb88:	d10b      	bne.n	800eba2 <_free_r+0x72>
 800eb8a:	6820      	ldr	r0, [r4, #0]
 800eb8c:	4401      	add	r1, r0
 800eb8e:	1850      	adds	r0, r2, r1
 800eb90:	4283      	cmp	r3, r0
 800eb92:	6011      	str	r1, [r2, #0]
 800eb94:	d1de      	bne.n	800eb54 <_free_r+0x24>
 800eb96:	6818      	ldr	r0, [r3, #0]
 800eb98:	685b      	ldr	r3, [r3, #4]
 800eb9a:	4401      	add	r1, r0
 800eb9c:	6011      	str	r1, [r2, #0]
 800eb9e:	6053      	str	r3, [r2, #4]
 800eba0:	e7d8      	b.n	800eb54 <_free_r+0x24>
 800eba2:	d902      	bls.n	800ebaa <_free_r+0x7a>
 800eba4:	230c      	movs	r3, #12
 800eba6:	602b      	str	r3, [r5, #0]
 800eba8:	e7d4      	b.n	800eb54 <_free_r+0x24>
 800ebaa:	6820      	ldr	r0, [r4, #0]
 800ebac:	1821      	adds	r1, r4, r0
 800ebae:	428b      	cmp	r3, r1
 800ebb0:	bf01      	itttt	eq
 800ebb2:	6819      	ldreq	r1, [r3, #0]
 800ebb4:	685b      	ldreq	r3, [r3, #4]
 800ebb6:	1809      	addeq	r1, r1, r0
 800ebb8:	6021      	streq	r1, [r4, #0]
 800ebba:	6063      	str	r3, [r4, #4]
 800ebbc:	6054      	str	r4, [r2, #4]
 800ebbe:	e7c9      	b.n	800eb54 <_free_r+0x24>
 800ebc0:	bd38      	pop	{r3, r4, r5, pc}
 800ebc2:	bf00      	nop
 800ebc4:	200008ac 	.word	0x200008ac

0800ebc8 <_malloc_r>:
 800ebc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebca:	1ccd      	adds	r5, r1, #3
 800ebcc:	f025 0503 	bic.w	r5, r5, #3
 800ebd0:	3508      	adds	r5, #8
 800ebd2:	2d0c      	cmp	r5, #12
 800ebd4:	bf38      	it	cc
 800ebd6:	250c      	movcc	r5, #12
 800ebd8:	2d00      	cmp	r5, #0
 800ebda:	4606      	mov	r6, r0
 800ebdc:	db01      	blt.n	800ebe2 <_malloc_r+0x1a>
 800ebde:	42a9      	cmp	r1, r5
 800ebe0:	d903      	bls.n	800ebea <_malloc_r+0x22>
 800ebe2:	230c      	movs	r3, #12
 800ebe4:	6033      	str	r3, [r6, #0]
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebea:	f000 f87d 	bl	800ece8 <__malloc_lock>
 800ebee:	4921      	ldr	r1, [pc, #132]	; (800ec74 <_malloc_r+0xac>)
 800ebf0:	680a      	ldr	r2, [r1, #0]
 800ebf2:	4614      	mov	r4, r2
 800ebf4:	b99c      	cbnz	r4, 800ec1e <_malloc_r+0x56>
 800ebf6:	4f20      	ldr	r7, [pc, #128]	; (800ec78 <_malloc_r+0xb0>)
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	b923      	cbnz	r3, 800ec06 <_malloc_r+0x3e>
 800ebfc:	4621      	mov	r1, r4
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f000 f862 	bl	800ecc8 <_sbrk_r>
 800ec04:	6038      	str	r0, [r7, #0]
 800ec06:	4629      	mov	r1, r5
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f000 f85d 	bl	800ecc8 <_sbrk_r>
 800ec0e:	1c43      	adds	r3, r0, #1
 800ec10:	d123      	bne.n	800ec5a <_malloc_r+0x92>
 800ec12:	230c      	movs	r3, #12
 800ec14:	4630      	mov	r0, r6
 800ec16:	6033      	str	r3, [r6, #0]
 800ec18:	f000 f86c 	bl	800ecf4 <__malloc_unlock>
 800ec1c:	e7e3      	b.n	800ebe6 <_malloc_r+0x1e>
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	1b5b      	subs	r3, r3, r5
 800ec22:	d417      	bmi.n	800ec54 <_malloc_r+0x8c>
 800ec24:	2b0b      	cmp	r3, #11
 800ec26:	d903      	bls.n	800ec30 <_malloc_r+0x68>
 800ec28:	6023      	str	r3, [r4, #0]
 800ec2a:	441c      	add	r4, r3
 800ec2c:	6025      	str	r5, [r4, #0]
 800ec2e:	e004      	b.n	800ec3a <_malloc_r+0x72>
 800ec30:	6863      	ldr	r3, [r4, #4]
 800ec32:	42a2      	cmp	r2, r4
 800ec34:	bf0c      	ite	eq
 800ec36:	600b      	streq	r3, [r1, #0]
 800ec38:	6053      	strne	r3, [r2, #4]
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	f000 f85a 	bl	800ecf4 <__malloc_unlock>
 800ec40:	f104 000b 	add.w	r0, r4, #11
 800ec44:	1d23      	adds	r3, r4, #4
 800ec46:	f020 0007 	bic.w	r0, r0, #7
 800ec4a:	1ac2      	subs	r2, r0, r3
 800ec4c:	d0cc      	beq.n	800ebe8 <_malloc_r+0x20>
 800ec4e:	1a1b      	subs	r3, r3, r0
 800ec50:	50a3      	str	r3, [r4, r2]
 800ec52:	e7c9      	b.n	800ebe8 <_malloc_r+0x20>
 800ec54:	4622      	mov	r2, r4
 800ec56:	6864      	ldr	r4, [r4, #4]
 800ec58:	e7cc      	b.n	800ebf4 <_malloc_r+0x2c>
 800ec5a:	1cc4      	adds	r4, r0, #3
 800ec5c:	f024 0403 	bic.w	r4, r4, #3
 800ec60:	42a0      	cmp	r0, r4
 800ec62:	d0e3      	beq.n	800ec2c <_malloc_r+0x64>
 800ec64:	1a21      	subs	r1, r4, r0
 800ec66:	4630      	mov	r0, r6
 800ec68:	f000 f82e 	bl	800ecc8 <_sbrk_r>
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	d1dd      	bne.n	800ec2c <_malloc_r+0x64>
 800ec70:	e7cf      	b.n	800ec12 <_malloc_r+0x4a>
 800ec72:	bf00      	nop
 800ec74:	200008ac 	.word	0x200008ac
 800ec78:	200008b0 	.word	0x200008b0

0800ec7c <_realloc_r>:
 800ec7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec7e:	4607      	mov	r7, r0
 800ec80:	4614      	mov	r4, r2
 800ec82:	460e      	mov	r6, r1
 800ec84:	b921      	cbnz	r1, 800ec90 <_realloc_r+0x14>
 800ec86:	4611      	mov	r1, r2
 800ec88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ec8c:	f7ff bf9c 	b.w	800ebc8 <_malloc_r>
 800ec90:	b922      	cbnz	r2, 800ec9c <_realloc_r+0x20>
 800ec92:	f7ff ff4d 	bl	800eb30 <_free_r>
 800ec96:	4625      	mov	r5, r4
 800ec98:	4628      	mov	r0, r5
 800ec9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec9c:	f000 f830 	bl	800ed00 <_malloc_usable_size_r>
 800eca0:	42a0      	cmp	r0, r4
 800eca2:	d20f      	bcs.n	800ecc4 <_realloc_r+0x48>
 800eca4:	4621      	mov	r1, r4
 800eca6:	4638      	mov	r0, r7
 800eca8:	f7ff ff8e 	bl	800ebc8 <_malloc_r>
 800ecac:	4605      	mov	r5, r0
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	d0f2      	beq.n	800ec98 <_realloc_r+0x1c>
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	4622      	mov	r2, r4
 800ecb6:	f7ff ff13 	bl	800eae0 <memcpy>
 800ecba:	4631      	mov	r1, r6
 800ecbc:	4638      	mov	r0, r7
 800ecbe:	f7ff ff37 	bl	800eb30 <_free_r>
 800ecc2:	e7e9      	b.n	800ec98 <_realloc_r+0x1c>
 800ecc4:	4635      	mov	r5, r6
 800ecc6:	e7e7      	b.n	800ec98 <_realloc_r+0x1c>

0800ecc8 <_sbrk_r>:
 800ecc8:	b538      	push	{r3, r4, r5, lr}
 800ecca:	2300      	movs	r3, #0
 800eccc:	4d05      	ldr	r5, [pc, #20]	; (800ece4 <_sbrk_r+0x1c>)
 800ecce:	4604      	mov	r4, r0
 800ecd0:	4608      	mov	r0, r1
 800ecd2:	602b      	str	r3, [r5, #0]
 800ecd4:	f7f4 fa92 	bl	80031fc <_sbrk>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d102      	bne.n	800ece2 <_sbrk_r+0x1a>
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	b103      	cbz	r3, 800ece2 <_sbrk_r+0x1a>
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	bd38      	pop	{r3, r4, r5, pc}
 800ece4:	20001fc8 	.word	0x20001fc8

0800ece8 <__malloc_lock>:
 800ece8:	4801      	ldr	r0, [pc, #4]	; (800ecf0 <__malloc_lock+0x8>)
 800ecea:	f000 b811 	b.w	800ed10 <__retarget_lock_acquire_recursive>
 800ecee:	bf00      	nop
 800ecf0:	20001fd0 	.word	0x20001fd0

0800ecf4 <__malloc_unlock>:
 800ecf4:	4801      	ldr	r0, [pc, #4]	; (800ecfc <__malloc_unlock+0x8>)
 800ecf6:	f000 b80c 	b.w	800ed12 <__retarget_lock_release_recursive>
 800ecfa:	bf00      	nop
 800ecfc:	20001fd0 	.word	0x20001fd0

0800ed00 <_malloc_usable_size_r>:
 800ed00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed04:	1f18      	subs	r0, r3, #4
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	bfbc      	itt	lt
 800ed0a:	580b      	ldrlt	r3, [r1, r0]
 800ed0c:	18c0      	addlt	r0, r0, r3
 800ed0e:	4770      	bx	lr

0800ed10 <__retarget_lock_acquire_recursive>:
 800ed10:	4770      	bx	lr

0800ed12 <__retarget_lock_release_recursive>:
 800ed12:	4770      	bx	lr

0800ed14 <_init>:
 800ed14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed16:	bf00      	nop
 800ed18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed1a:	bc08      	pop	{r3}
 800ed1c:	469e      	mov	lr, r3
 800ed1e:	4770      	bx	lr

0800ed20 <_fini>:
 800ed20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed22:	bf00      	nop
 800ed24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed26:	bc08      	pop	{r3}
 800ed28:	469e      	mov	lr, r3
 800ed2a:	4770      	bx	lr
